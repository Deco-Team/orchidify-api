{"version":3,"file":"firebase.messaging.service.js","sourceRoot":"/","sources":["firebase/services/firebase.messaging.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,6EAAgF;AAChF,iFAA+D;AASlD,QAAA,yBAAyB,GAAG,MAAM,CAAC,2BAA2B,CAAC,CAAA;AAsBrE,IAAM,wBAAwB,gCAA9B,MAAM,wBAAwB;IAEnC,YAEE,kBAAwD;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;QAHzC,cAAS,GAAG,IAAI,8BAAS,CAAC,0BAAwB,CAAC,IAAI,CAAC,CAAA;IAItE,CAAC;IAEJ,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAA4B;QAC/D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;gBACjE,KAAK;gBACL,YAAY,EAAE;oBACZ,KAAK;oBACL,IAAI;iBACL;gBACD,IAAI;aACL,CAAC,CAAA;YACF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ;aACT,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAA;YACtD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAqC;QAClF,MAAM,OAAO,GAAG;YACd,YAAY,EAAE;gBACZ,KAAK;gBACL,IAAI;aACL;YACD,MAAM;YACN,IAAI;SACL,CAAA;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAA;YAC3F,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YAC7E,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ;aACT,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAA;YACtD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAiC;QACrF,MAAM,OAAO,GAAG;YACd,YAAY,EAAE;gBACZ,KAAK;gBACL,IAAI;aACL;YACD,KAAK;YACL,IAAI;SACL,CAAA;QAED,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC3E,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YAC7E,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAA;QACpC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAA;YACrD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,MAAM,EAA6B;QACjE,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;YAC7F,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qCAAqC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YACnF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAA;QACpC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;YAC1D,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;CACF,CAAA;AAhFY,4DAAwB;mCAAxB,wBAAwB;IADpC,IAAA,mBAAU,GAAE;IAIR,WAAA,IAAA,eAAM,EAAC,yCAAmB,CAAC,CAAA;;GAHnB,wBAAwB,CAgFpC","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IFirebaseRepository } from '@firebase/repositories/firebase.repository'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport {\r\n  SendFirebaseMessagingDto,\r\n  SendFirebaseMulticastMessagingDto,\r\n  SendFirebaseTopicMessagingDto,\r\n  SubscribeFirebaseTopicDto\r\n} from '@firebase/dto/firebase-messaging.dto'\r\nimport { BatchResponse, MessagingTopicManagementResponse } from 'firebase-admin/lib/messaging/messaging-api'\r\n\r\nexport const IFirebaseMessagingService = Symbol('IFirebaseMessagingService')\r\n\r\nexport interface IFirebaseMessagingService {\r\n  send({ token, title, body, data }: SendFirebaseMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: string\r\n  }>\r\n  sendMulticast({ tokens, title, body, data }: SendFirebaseMulticastMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: BatchResponse\r\n  }>\r\n  sendTopicNotification({ topic, title, body, data }: SendFirebaseTopicMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: string\r\n  }>\r\n  subscribeToTopic({ topic, tokens }: SubscribeFirebaseTopicDto): Promise<{\r\n    success: boolean\r\n    response?: MessagingTopicManagementResponse\r\n  }>\r\n}\r\n\r\n@Injectable()\r\nexport class FirebaseMessagingService implements IFirebaseMessagingService {\r\n  private readonly appLogger = new AppLogger(FirebaseMessagingService.name)\r\n  constructor(\r\n    @Inject(IFirebaseRepository)\r\n    private readonly firebaseRepository: IFirebaseRepository\r\n  ) {}\r\n\r\n  async send({ token, title, body, data }: SendFirebaseMessagingDto) {\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().send({\r\n        token,\r\n        notification: {\r\n          title,\r\n          body\r\n        },\r\n        data\r\n      })\r\n      return {\r\n        success: true,\r\n        response\r\n      }\r\n    } catch (error) {\r\n      this.appLogger.error('Error sending messages:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  async sendMulticast({ tokens, title, body, data }: SendFirebaseMulticastMessagingDto) {\r\n    const message = {\r\n      notification: {\r\n        title,\r\n        body\r\n      },\r\n      tokens,\r\n      data\r\n    }\r\n\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().sendEachForMulticast(message)\r\n      this.appLogger.log(`Successfully sent messages: ${JSON.stringify(response)}`)\r\n      return {\r\n        success: true,\r\n        response\r\n      }\r\n    } catch (error) {\r\n      this.appLogger.error('Error sending messages:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  async sendTopicNotification({ topic, title, body, data }: SendFirebaseTopicMessagingDto) {\r\n    const message = {\r\n      notification: {\r\n        title,\r\n        body\r\n      },\r\n      topic,\r\n      data\r\n    }\r\n\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().send(message)\r\n      this.appLogger.log(`Successfully sent messages: ${JSON.stringify(response)}`)\r\n      return { success: true, response }\r\n    } catch (error) {\r\n      this.appLogger.error('Error sending message:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  async subscribeToTopic({ topic, tokens }: SubscribeFirebaseTopicDto) {\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().subscribeToTopic(tokens, topic)\r\n      this.appLogger.log(`Successfully subscribed to topic: ${JSON.stringify(response)}`)\r\n      return { success: true, response }\r\n    } catch (error) {\r\n      this.appLogger.error('Error subscribing to topic:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n}\r\n"]}