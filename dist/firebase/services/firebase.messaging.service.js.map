{"version":3,"file":"firebase.messaging.service.js","sourceRoot":"/","sources":["firebase/services/firebase.messaging.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IFirebaseRepository } from '@firebase/repositories/firebase.repository'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { IInstructorService } from '@instructor/services/instructor.service'\r\nimport { ILearnerService } from '@learner/services/learner.service'\r\nimport {\r\n  SendFirebaseMessagingDto,\r\n  SendFirebaseMulticastMessagingDto,\r\n  SendFirebaseTopicMessagingDto\r\n} from '@firebase/dto/firebase-messaging.dto'\r\nimport { BatchResponse } from 'firebase-admin/lib/messaging/messaging-api'\r\n\r\nexport const IFirebaseMessagingService = Symbol('IFirebaseMessagingService')\r\n\r\nexport interface IFirebaseMessagingService {\r\n  send({ token, title, body, icon }: SendFirebaseMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: string\r\n  }>\r\n  sendMulticast({ tokens, title, body, icon }: SendFirebaseMulticastMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: BatchResponse\r\n  }>\r\n  sendTopicNotification({ topic, title, body, icon }: SendFirebaseTopicMessagingDto): Promise<{\r\n    success: boolean\r\n    response?: string\r\n  }>\r\n}\r\n\r\n@Injectable()\r\nexport class FirebaseMessagingService implements IFirebaseMessagingService {\r\n  private readonly appLogger = new AppLogger(FirebaseMessagingService.name)\r\n  constructor(\r\n    @Inject(IFirebaseRepository)\r\n    private readonly firebaseRepository: IFirebaseRepository,\r\n    @Inject(IInstructorService)\r\n    private readonly instructorService: IInstructorService,\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService\r\n  ) {}\r\n\r\n  async send({ token, title, body, icon }: SendFirebaseMessagingDto) {\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().send({\r\n        token,\r\n        notification: {\r\n          title,\r\n          body,\r\n        },\r\n        // webpush: {\r\n        //   notification: {\r\n        //     title,\r\n        //     body,\r\n        //     icon\r\n        //   }\r\n        // }\r\n      })\r\n      return {\r\n        success: true,\r\n        response\r\n      }\r\n    } catch (error) {\r\n      console.log('Error sending messages:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  async sendMulticast({ tokens, title, body, icon }: SendFirebaseMulticastMessagingDto) {\r\n    const message = {\r\n      notification: {\r\n        title,\r\n        body,\r\n        icon\r\n      },\r\n      tokens\r\n    }\r\n\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().sendEachForMulticast(message)\r\n      console.log('Successfully sent messages:', response)\r\n      return {\r\n        success: true,\r\n        response\r\n      }\r\n    } catch (error) {\r\n      console.log('Error sending messages:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  async sendTopicNotification({ topic, title, body, icon }: SendFirebaseTopicMessagingDto) {\r\n    const message = {\r\n      notification: {\r\n        title,\r\n        body,\r\n        icon\r\n      },\r\n      topic\r\n    }\r\n\r\n    try {\r\n      const response = await this.firebaseRepository.getMessaging().send(message)\r\n      console.log('Successfully sent message:', response)\r\n      return { success: true, response }\r\n    } catch (error) {\r\n      console.log('Error sending message:', error)\r\n      return { success: false }\r\n    }\r\n  }\r\n}\r\n"]}