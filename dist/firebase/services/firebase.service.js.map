{"version":3,"file":"firebase.service.js","sourceRoot":"/","sources":["firebase/services/firebase.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,6EAAgF;AAChF,iFAA+D;AAE/D,qFAA4E;AAC5E,4EAAmE;AACnE,8DAAqD;AAExC,QAAA,gBAAgB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAA;AAOnD,IAAM,eAAe,uBAArB,MAAM,eAAe;IAE1B,YAEE,kBAAwD,EAExD,iBAAsD,EAEtD,cAAgD;QAJ/B,uBAAkB,GAAlB,kBAAkB,CAAqB;QAEvC,sBAAiB,GAAjB,iBAAiB,CAAoB;QAErC,mBAAc,GAAd,cAAc,CAAiB;QAPjC,cAAS,GAAG,IAAI,8BAAS,CAAC,iBAAe,CAAC,IAAI,CAAC,CAAA;IAQ7D,CAAC;IAEG,KAAK,CAAC,iBAAiB,CAAC,QAAkB;QAC/C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAA;QAC9B,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;QACtD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YAChC,IAAI,IAAI,KAAK,mBAAQ,CAAC,UAAU,EAAE,CAAC;gBACjC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;gBAC7D,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC;oBACjD,GAAG,EAAE,GAAG;oBACR,WAAW,EAAE,UAAU,CAAC,IAAI;oBAC5B,KAAK,EAAE,UAAU,CAAC,KAAK;oBACvB,QAAQ,EAAE,UAAU,CAAC,MAAM;iBAC5B,CAAC,CAAA;YACJ,CAAC;iBAAM,IAAI,IAAI,KAAK,mBAAQ,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;gBACvD,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC;oBACjD,GAAG,EAAE,GAAG;oBACR,WAAW,EAAE,OAAO,CAAC,IAAI;oBACzB,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,QAAQ,EAAE,OAAO,CAAC,MAAM;iBACzB,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAA;IACvE,CAAC;CACF,CAAA;AAtCY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAIR,WAAA,IAAA,eAAM,EAAC,yCAAmB,CAAC,CAAA;IAE3B,WAAA,IAAA,eAAM,EAAC,uCAAkB,CAAC,CAAA;IAE1B,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;;GAPf,eAAe,CAsC3B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IFirebaseRepository } from '@firebase/repositories/firebase.repository'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { UserAuth } from '@common/contracts/dto'\r\nimport { IInstructorService } from '@instructor/services/instructor.service'\r\nimport { ILearnerService } from '@learner/services/learner.service'\r\nimport { UserRole } from '@common/contracts/constant'\r\n\r\nexport const IFirebaseService = Symbol('IFirebaseService')\r\n\r\nexport interface IFirebaseService {\r\n  createCustomToken(userAuth: UserAuth): Promise<string>\r\n}\r\n\r\n@Injectable()\r\nexport class FirebaseService implements IFirebaseService {\r\n  private readonly appLogger = new AppLogger(FirebaseService.name)\r\n  constructor(\r\n    @Inject(IFirebaseRepository)\r\n    private readonly firebaseRepository: IFirebaseRepository,\r\n    @Inject(IInstructorService)\r\n    private readonly instructorService: IInstructorService,\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService\r\n  ) {}\r\n\r\n  public async createCustomToken(userAuth: UserAuth): Promise<string> {\r\n    const { _id, role } = userAuth\r\n    try {\r\n      await this.firebaseRepository.getAuth().getUser(_id)\r\n    } catch (error) {\r\n      this.appLogger.error(error.name)\r\n      if (role === UserRole.INSTRUCTOR) {\r\n        const instructor = await this.instructorService.findById(_id)\r\n        await this.firebaseRepository.getAuth().createUser({\r\n          uid: _id,\r\n          displayName: instructor.name,\r\n          email: instructor.email,\r\n          photoURL: instructor.avatar\r\n        })\r\n      } else if (role === UserRole.LEARNER) {\r\n        const learner = await this.learnerService.findById(_id)\r\n        await this.firebaseRepository.getAuth().createUser({\r\n          uid: _id,\r\n          displayName: learner.name,\r\n          email: learner.email,\r\n          photoURL: learner.avatar\r\n        })\r\n      }\r\n    }\r\n\r\n    return await this.firebaseRepository.getAuth().createCustomToken(_id)\r\n  }\r\n}\r\n"]}