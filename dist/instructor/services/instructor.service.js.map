{"version":3,"file":"instructor.service.js","sourceRoot":"/","sources":["instructor/services/instructor.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,iFAAsF;AAMtF,oDAA2E;AAC3E,8DAA6D;AAE7D,yEAA+D;AAC/D,qFAA2E;AAE9D,QAAA,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAA;AAevD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEmB,oBAA2C,EAC3C,aAA4B,EAC5B,mBAAwC;QAFxC,yBAAoB,GAApB,oBAAoB,CAAuB;QAC3C,kBAAa,GAAb,aAAa,CAAe;QAC5B,wBAAmB,GAAnB,mBAAmB,CAAqB;IACxD,CAAC;IAEG,KAAK,CAAC,MAAM,CAAC,mBAAwC,EAAE,OAAiC;QAC7F,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,EAAE,sCAAsC,CAAC,CAAA;QACpG,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QACpE,mBAAmB,CAAC,UAAU,CAAC,GAAG,YAAY,CAAA;QAC9C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAA;QAEvF,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;YAChC,EAAE,EAAE,UAAU,CAAC,KAAK;YACpB,OAAO,EAAE,iCAAiC;YAC1C,QAAQ,EAAE,2BAA2B;YACrC,OAAO,EAAE;gBACP,KAAK,EAAE,UAAU,CAAC,KAAK;gBACvB,IAAI,EAAE,UAAU,CAAC,IAAI;gBACrB,QAAQ;aACT;SACF,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,YAAoB,EAAE,UAAyC;QACnF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,UAAU,EAAE;gBACV,GAAG,EAAE,YAAY;aAClB;YACD,UAAU;SACX,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,KAAa,EAAE,UAAyC;QAC/E,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,UAAU,EAAE;gBACV,KAAK;aACN;YACD,UAAU;SACX,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,MAAM,CACX,UAAmC,EACnC,OAAgC,EAChC,OAAkC;QAElC,OAAO,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IACjF,CAAC;IAED,KAAK,CAAC,IAAI,CACR,UAA4B,EAC5B,eAAmC,EACnC,UAAU,GAAG,qCAA0B;QAEvC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,eAAe,CAAA;QAC/C,MAAM,MAAM,GAAwB,EAAE,CAAA;QAEtC,MAAM,WAAW,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,2BAAgB,CAAC,MAAM,EAAE,2BAAgB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;QACrH,IAAI,WAAW,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,QAAQ,CAAC,GAAG;gBACjB,GAAG,EAAE,WAAW;aACjB,CAAA;QACH,CAAC;QAED,IAAI,UAAU,GAAG,EAAE,CAAA;QACnB,IAAI,IAAI;YAAE,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE,CAAA;QACnC,IAAI,KAAK;YAAE,UAAU,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;QAC3C,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,CAAC,OAAO,CAAC,GAAG;gBAChB,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE;aAC3B,CAAA;QACH,CAAC;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtD,GAAG,UAAU;YACb,UAAU;SACX,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AApFY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,6CAAqB,CAAC,CAAA;6CAEE,8BAAa;QACP,0CAAmB;GALhD,iBAAiB,CAoF7B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { IInstructorRepository } from '@instructor/repositories/instructor.repository'\r\nimport { Instructor, InstructorDocument } from '@instructor/schemas/instructor.schema'\r\nimport { FilterQuery, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\nimport { IAuthUserService } from '@auth/services/auth.service'\r\nimport { QueryInstructorDto } from '@instructor/dto/view-instructor.dto'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { INSTRUCTOR_LIST_PROJECTION } from '@instructor/contracts/constant'\r\nimport { InstructorStatus } from '@common/contracts/constant'\r\nimport { CreateInstructorDto } from '@instructor/dto/create-instructor.dto'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { NotificationAdapter } from '@common/adapters/notification.adapter'\r\n\r\nexport const IInstructorService = Symbol('IInstructorService')\r\n\r\nexport interface IInstructorService extends IAuthUserService {\r\n  create(createInstructorDto: CreateInstructorDto, options?: SaveOptions | undefined): Promise<InstructorDocument>\r\n  findById(instructorId: string, projection?: string | Record<string, any>): Promise<InstructorDocument>\r\n  findByEmail(email: string, projection?: string | Record<string, any>): Promise<InstructorDocument>\r\n  update(\r\n    conditions: FilterQuery<Instructor>,\r\n    payload: UpdateQuery<Instructor>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<InstructorDocument>\r\n  list(pagination: PaginationParams, queryLearnerDto: QueryInstructorDto)\r\n}\r\n\r\n@Injectable()\r\nexport class InstructorService implements IInstructorService {\r\n  constructor(\r\n    @Inject(IInstructorRepository)\r\n    private readonly instructorRepository: IInstructorRepository,\r\n    private readonly helperService: HelperService,\r\n    private readonly notificationAdapter: NotificationAdapter\r\n  ) {}\r\n\r\n  public async create(createInstructorDto: CreateInstructorDto, options?: SaveOptions | undefined) {\r\n    const password = this.helperService.generateRandomString(10, 'abcdefghijklmnopqrstuvwxyz0123456789')\r\n    const hashPassword = await this.helperService.hashPassword(password)\r\n    createInstructorDto['password'] = hashPassword\r\n    const instructor = await this.instructorRepository.create(createInstructorDto, options)\r\n\r\n    this.notificationAdapter.sendMail({\r\n      to: instructor.email,\r\n      subject: `[Orchidify] Thông tin đăng nhập`,\r\n      template: 'instructor/add-instructor',\r\n      context: {\r\n        email: instructor.email,\r\n        name: instructor.name,\r\n        password\r\n      }\r\n    })\r\n    return instructor\r\n  }\r\n\r\n  public async findById(instructorId: string, projection?: string | Record<string, any>) {\r\n    const instructor = await this.instructorRepository.findOne({\r\n      conditions: {\r\n        _id: instructorId\r\n      },\r\n      projection\r\n    })\r\n    return instructor\r\n  }\r\n\r\n  public async findByEmail(email: string, projection?: string | Record<string, any>) {\r\n    const instructor = await this.instructorRepository.findOne({\r\n      conditions: {\r\n        email\r\n      },\r\n      projection\r\n    })\r\n    return instructor\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<Instructor>,\r\n    payload: UpdateQuery<Instructor>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.instructorRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryLearnerDto: QueryInstructorDto,\r\n    projection = INSTRUCTOR_LIST_PROJECTION\r\n  ) {\r\n    const { name, email, status } = queryLearnerDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    const validStatus = status?.filter((status) => [InstructorStatus.ACTIVE, InstructorStatus.INACTIVE].includes(status))\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (email) textSearch += ' ' + email.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.instructorRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n}\r\n"]}