{"version":3,"file":"garden.service.js","sourceRoot":"/","sources":["garden/services/garden.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IGardenRepository } from '@garden/repositories/garden.repository'\r\nimport { Garden, GardenDocument } from '@garden/schemas/garden.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreateGardenDto } from '@garden/dto/create-garden.dto'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { QueryGardenDto } from '@garden/dto/view-garden.dto'\r\nimport { GARDEN_LIST_PROJECTION } from '@garden/contracts/constant'\r\nimport { GardenStatus } from '@common/contracts/constant'\r\nimport { MongoServerError } from 'mongodb'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AvailableGardenListItemResponse, QueryAvailableGardenDto } from '@garden/dto/view-available-garden.dto'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\n\r\nexport const IGardenService = Symbol('IGardenService')\r\n\r\nexport interface IGardenService {\r\n  create(createGardenDto: CreateGardenDto, options?: SaveOptions | undefined): Promise<GardenDocument>\r\n  findById(\r\n    gardenId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<Garden>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenDocument>\r\n  update(\r\n    conditions: FilterQuery<Garden>,\r\n    payload: UpdateQuery<Garden>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<GardenDocument>\r\n  findManyByGardenManagerId(gardenManagerId: string): Promise<GardenDocument[]>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryGardenDto: QueryGardenDto,\r\n    projection?: string | Record<string, any>,\r\n    populate?: Array<PopulateOptions>\r\n  )\r\n  getAvailableGardenList(queryAvailableGardenDto: QueryAvailableGardenDto): Promise<AvailableGardenListItemResponse[]>\r\n}\r\n\r\n@Injectable()\r\nexport class GardenService implements IGardenService {\r\n  private readonly appLogger = new AppLogger(GardenService.name)\r\n  constructor(\r\n    @Inject(IGardenRepository)\r\n    private readonly gardenRepository: IGardenRepository,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService\r\n  ) {}\r\n\r\n  public async create(createGardenDto: CreateGardenDto, options?: SaveOptions | undefined) {\r\n    try {\r\n      return await this.gardenRepository.create(\r\n        { ...createGardenDto, gardenManagerId: new Types.ObjectId(createGardenDto.gardenManagerId) },\r\n        options\r\n      )\r\n    } catch (error) {\r\n      if (error.name === MongoServerError.name && error.code === 11000 && error.keyPattern?.['name'] === 1) {\r\n        throw new AppException(Errors.GARDEN_NAME_EXISTED)\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  public async findById(\r\n    gardenId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const garden = await this.gardenRepository.findOne({\r\n      conditions: {\r\n        _id: gardenId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return garden\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<Garden>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const garden = await this.gardenRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return garden\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<Garden>,\r\n    payload: UpdateQuery<Garden>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    try {\r\n      if (payload.gardenManagerId) {\r\n        payload.gardenManagerId = new Types.ObjectId(payload.gardenManagerId)\r\n      }\r\n      return await this.gardenRepository.findOneAndUpdate(conditions, payload, options)\r\n    } catch (error) {\r\n      if (error.name === MongoServerError.name && error.code === 11000 && error.keyPattern?.['name'] === 1) {\r\n        throw new AppException(Errors.GARDEN_NAME_EXISTED)\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async findManyByGardenManagerId(gardenManagerId: string): Promise<GardenDocument[]> {\r\n    const gardens = await this.gardenRepository.findMany({\r\n      conditions: {\r\n        gardenManagerId: new Types.ObjectId(gardenManagerId)\r\n      }\r\n    })\r\n    return gardens\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryCourseDto: QueryGardenDto,\r\n    projection = GARDEN_LIST_PROJECTION,\r\n    populate?: Array<PopulateOptions>\r\n  ) {\r\n    const { name, address, status, gardenManagerId } = queryCourseDto\r\n    const filter: Record<string, any> = {}\r\n    if (gardenManagerId) {\r\n      filter['gardenManagerId'] = gardenManagerId\r\n    }\r\n\r\n    const validStatus = status?.filter((status) => [GardenStatus.ACTIVE, GardenStatus.INACTIVE].includes(status))\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (address) textSearch += ' ' + address.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.gardenRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection,\r\n      populate\r\n    })\r\n  }\r\n\r\n  async getAvailableGardenList(\r\n    queryAvailableGardenDto: QueryAvailableGardenDto\r\n  ): Promise<AvailableGardenListItemResponse[]> {\r\n    const { startDate, duration, weekdays, slotNumbers, instructorId } = queryAvailableGardenDto\r\n    const availableSlots = await this.gardenTimesheetService.viewAvailableTime({\r\n      startDate,\r\n      duration,\r\n      weekdays,\r\n      instructorId\r\n    })\r\n    this.appLogger.log(\r\n      `getAvailableGardenList: slotNumbers=${slotNumbers}, availableSlotNumbers=${\r\n        availableSlots.slotNumbers\r\n      }, availableTimeOfGardens=${JSON.stringify(availableSlots.availableTimeOfGardens)}`\r\n    )\r\n    if (_.difference(slotNumbers, availableSlots.slotNumbers).length !== 0) return []\r\n\r\n    const availableGardens = availableSlots.availableTimeOfGardens.filter((availableTimeOfGarden) => {\r\n      this.appLogger.log(`gardenId=${availableTimeOfGarden.gardenId}, slotNumbers=${availableTimeOfGarden.slotNumbers}`)\r\n      return _.difference(slotNumbers, availableTimeOfGarden.slotNumbers).length === 0\r\n    })\r\n    if (availableGardens.length === 0) return []\r\n\r\n    const gardenIds = availableGardens.map((availableGarden) => availableGarden.gardenId)\r\n    const gardens = await this.gardenRepository.findMany({\r\n      conditions: {\r\n        _id: {\r\n          $in: gardenIds\r\n        },\r\n        status: GardenStatus.ACTIVE\r\n      },\r\n      projection: ['_id', 'name']\r\n    })\r\n    return gardens\r\n  }\r\n}\r\n"]}