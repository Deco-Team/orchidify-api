{"version":3,"file":"transaction.service.js","sourceRoot":"/","sources":["transaction/services/transaction.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { ITransactionRepository } from '@src/transaction/repositories/transaction.repository'\r\nimport { Transaction, TransactionDocument } from '@src/transaction/schemas/transaction.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { TransactionStatus } from '@common/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { CreateTransactionDto } from '@transaction/dto/create-transaction.dto'\r\nimport { QueryTransactionDto } from '@transaction/dto/view-transaction.dto'\r\nimport { PaymentMethod, TRANSACTION_LIST_PROJECTION, TransactionType } from '@transaction/contracts/constant'\r\n\r\nexport const ITransactionService = Symbol('ITransactionService')\r\n\r\nexport interface ITransactionService {\r\n  create(createTransactionDto: CreateTransactionDto, options?: SaveOptions | undefined): Promise<TransactionDocument>\r\n  findById(\r\n    transactionId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<TransactionDocument>\r\n  update(\r\n    conditions: FilterQuery<Transaction>,\r\n    payload: UpdateQuery<Transaction>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<TransactionDocument>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryTransactionDto: QueryTransactionDto,\r\n    projection?: string | Record<string, any>,\r\n    populate?: Array<PopulateOptions>\r\n  )\r\n  viewReportTransactionByDate({ fromDate, toDate }: { fromDate: Date; toDate: Date }): Promise<any[]>\r\n}\r\n\r\n@Injectable()\r\nexport class TransactionService implements ITransactionService {\r\n  private readonly appLogger = new AppLogger(TransactionService.name)\r\n  constructor(\r\n    @Inject(ITransactionRepository)\r\n    private readonly transactionRepository: ITransactionRepository\r\n  ) {}\r\n\r\n  public async create(createTransactionDto: CreateTransactionDto, options?: SaveOptions | undefined) {\r\n    return await this.transactionRepository.create(createTransactionDto, options)\r\n  }\r\n\r\n  public async findById(\r\n    transactionId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const transaction = await this.transactionRepository.findOne({\r\n      conditions: {\r\n        _id: transactionId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return transaction\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<Transaction>,\r\n    payload: UpdateQuery<Transaction>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return await this.transactionRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryTransactionDto: QueryTransactionDto,\r\n    projection = TRANSACTION_LIST_PROJECTION,\r\n    populate?: Array<PopulateOptions>\r\n  ) {\r\n    const { type, paymentMethod, status, fromAmount, toAmount } = queryTransactionDto\r\n    const filter: Record<string, any> = {\r\n      status: {\r\n        $in: [TransactionStatus.CAPTURED, TransactionStatus.ERROR, TransactionStatus.CANCELED]\r\n      }\r\n    }\r\n\r\n    const validType = type?.filter((type) => [TransactionType.PAYMENT, TransactionType.PAYOUT].includes(type))\r\n    if (validType?.length > 0) {\r\n      filter['type'] = {\r\n        $in: validType\r\n      }\r\n    }\r\n\r\n    const validPaymentMethod = paymentMethod?.filter((paymentMethod) =>\r\n      [PaymentMethod.STRIPE, PaymentMethod.MOMO].includes(paymentMethod)\r\n    )\r\n    if (validPaymentMethod?.length > 0) {\r\n      filter['paymentMethod'] = {\r\n        $in: validPaymentMethod\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [TransactionStatus.CAPTURED, TransactionStatus.ERROR, TransactionStatus.CANCELED].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    if (fromAmount !== undefined && toAmount !== undefined) {\r\n      filter['amount'] = {\r\n        $gte: fromAmount,\r\n        $lte: toAmount\r\n      }\r\n    }\r\n\r\n    return this.transactionRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection,\r\n      populate\r\n    })\r\n  }\r\n\r\n  async viewReportTransactionByDate({ fromDate, toDate }) {\r\n    return this.transactionRepository.model.aggregate([\r\n      {\r\n        $match: {\r\n          status: TransactionStatus.CAPTURED,\r\n          updatedAt: {\r\n            $gte: fromDate,\r\n            $lte: toDate\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: {\r\n            $dateToString: {\r\n              format: '%Y-%m-%d',\r\n              date: '$updatedAt'\r\n            }\r\n          },\r\n          paymentAmount: {\r\n            $sum: {\r\n              $switch: {\r\n                branches: [\r\n                  {\r\n                    case: {\r\n                      $eq: ['$type', TransactionType.PAYMENT]\r\n                    },\r\n                    then: '$amount'\r\n                  }\r\n                ],\r\n                default: 0\r\n              }\r\n            }\r\n          },\r\n          payoutAmount: {\r\n            $sum: {\r\n              $switch: {\r\n                branches: [\r\n                  {\r\n                    case: {\r\n                      $eq: ['$type', TransactionType.PAYOUT]\r\n                    },\r\n                    then: '$amount'\r\n                  }\r\n                ],\r\n                default: 0\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $sort: {\r\n          _id: 1\r\n        }\r\n      }\r\n    ])\r\n  }\r\n}\r\n"]}