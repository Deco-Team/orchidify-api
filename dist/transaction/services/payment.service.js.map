{"version":3,"file":"payment.service.js","sourceRoot":"/","sources":["transaction/services/payment.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Logger } from '@nestjs/common'\r\nimport { IPaymentStrategy } from '@src/transaction/strategies/payment-strategy.interface'\r\nimport {\r\n  CreateMomoPaymentDto,\r\n  MomoPaymentResponseDto,\r\n  QueryMomoPaymentDto,\r\n  RefundMomoPaymentDto\r\n} from '@src/transaction/dto/momo-payment.dto'\r\nimport { MomoPaymentStrategy } from '@src/transaction/strategies/momo.strategy'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { Connection, FilterQuery } from 'mongoose'\r\nimport { ITransactionRepository } from '@src/transaction/repositories/transaction.repository'\r\nimport { TransactionStatus } from '@common/contracts/constant'\r\nimport { PaymentMethod } from '@src/transaction/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { Transaction } from '@src/transaction/schemas/transaction.schema'\r\nimport { PayOSPaymentStrategy } from '@src/transaction/strategies/payos.strategy'\r\nimport { WebhookType as PayOSWebhookData } from '@payos/node/lib/type'\r\nimport { ZaloPayPaymentStrategy } from '@src/transaction/strategies/zalopay.strategy'\r\nimport { StripePaymentStrategy } from '@transaction/strategies/stripe.strategy'\r\nimport {\r\n  CreateStripePaymentDto,\r\n  QueryStripePaymentDto,\r\n  RefundStripePaymentDto\r\n} from '@transaction/dto/stripe-payment.dto'\r\n\r\nexport const IPaymentService = Symbol('IPaymentService')\r\n\r\nexport interface IPaymentService {\r\n  setStrategy(paymentMethod: PaymentMethod): void\r\n  verifyPaymentWebhookData(webhookData: any): any\r\n  createTransaction(createPaymentDto: any): any\r\n  getTransaction(queryPaymentDto: QueryMomoPaymentDto | QueryStripePaymentDto): any\r\n  refundTransaction(refundPaymentDto: RefundMomoPaymentDto | RefundStripePaymentDto): any\r\n  getRefundTransaction(queryPaymentDto: QueryMomoPaymentDto): any\r\n  getPaymentList(filter: any, paginationParams: PaginationParams): Promise<any>\r\n  processWebhook(webhookData: MomoPaymentResponseDto | PayOSWebhookData): Promise<any>\r\n}\r\n\r\n@Injectable()\r\nexport class PaymentService implements IPaymentService {\r\n  private strategy: IPaymentStrategy\r\n  private readonly logger = new Logger(PaymentService.name)\r\n  constructor(\r\n    @InjectConnection() readonly connection: Connection,\r\n    @Inject(ITransactionRepository)\r\n    private readonly transactionRepository: ITransactionRepository,\r\n    private readonly momoPaymentStrategy: MomoPaymentStrategy,\r\n    private readonly zaloPayPaymentStrategy: ZaloPayPaymentStrategy,\r\n    private readonly payOSPaymentStrategy: PayOSPaymentStrategy,\r\n    private readonly stripePaymentStrategy: StripePaymentStrategy\r\n  ) {}\r\n\r\n  public setStrategy(paymentMethod: PaymentMethod) {\r\n    switch (paymentMethod) {\r\n      case PaymentMethod.MOMO:\r\n        this.strategy = this.momoPaymentStrategy\r\n        break\r\n      case PaymentMethod.ZALO_PAY:\r\n        this.strategy = this.zaloPayPaymentStrategy\r\n        break\r\n      case PaymentMethod.PAY_OS:\r\n        this.strategy = this.payOSPaymentStrategy\r\n        break\r\n      case PaymentMethod.STRIPE:\r\n      default:\r\n        this.strategy = this.stripePaymentStrategy\r\n        break\r\n    }\r\n  }\r\n\r\n  public verifyPaymentWebhookData(webhookData: any) {\r\n    return this.strategy.verifyPaymentWebhookData(webhookData)\r\n  }\r\n\r\n  public createTransaction(createPaymentDto: CreateMomoPaymentDto | CreateStripePaymentDto) {\r\n    return this.strategy.createTransaction(createPaymentDto)\r\n  }\r\n\r\n  public getTransaction(queryPaymentDto: QueryMomoPaymentDto | QueryStripePaymentDto) {\r\n    return this.strategy.getTransaction(queryPaymentDto)\r\n  }\r\n\r\n  public refundTransaction(refundPaymentDto: RefundMomoPaymentDto | RefundStripePaymentDto) {\r\n    return this.strategy.refundTransaction(refundPaymentDto)\r\n  }\r\n\r\n  public getRefundTransaction(queryPaymentDto: any) {\r\n    return this.strategy.getRefundTransaction(queryPaymentDto)\r\n  }\r\n\r\n  public async getPaymentList(filter: FilterQuery<Transaction>, paginationParams: PaginationParams) {\r\n    const result = await this.transactionRepository.paginate(\r\n      {\r\n        ...filter,\r\n        transactionStatus: {\r\n          $in: [TransactionStatus.CAPTURED, TransactionStatus.REFUNDED]\r\n        }\r\n      },\r\n      {\r\n        projection: '-transactionHistory',\r\n        ...paginationParams\r\n      }\r\n    )\r\n    return result\r\n  }\r\n\r\n  public async processWebhook(webhookData: MomoPaymentResponseDto | PayOSWebhookData) {\r\n    this.logger.log('processWebhook::', JSON.stringify(webhookData))\r\n    return this.strategy.processWebhook(webhookData)\r\n  }\r\n}\r\n"]}