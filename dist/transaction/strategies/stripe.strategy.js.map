{"version":3,"file":"stripe.strategy.js","sourceRoot":"/","sources":["transaction/strategies/stripe.strategy.ts"],"names":[],"mappings":"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","sourcesContent":["import Stripe from 'stripe'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { TransactionStatus } from '@common/contracts/constant'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { BadRequestException, forwardRef, Inject, Injectable, Logger, OnModuleInit } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { StripeStatus, TransactionType } from '@src/transaction/contracts/constant'\r\nimport { ITransactionRepository } from '@src/transaction/repositories/transaction.repository'\r\nimport { IPaymentStrategy } from '@src/transaction/strategies/payment-strategy.interface'\r\nimport { BasePaymentDto } from '@transaction/dto/base.transaction.dto'\r\nimport { get } from 'lodash'\r\nimport { Connection, Types } from 'mongoose'\r\nimport { ILearnerService } from '@learner/services/learner.service'\r\nimport {\r\n  CreateStripePaymentDto,\r\n  QueryStripePaymentDto,\r\n  RefundStripePaymentDto\r\n} from '@transaction/dto/stripe-payment.dto'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { FCMNotificationDataType } from '@notification/contracts/constant'\r\n\r\n@Injectable()\r\nexport class StripePaymentStrategy implements IPaymentStrategy, OnModuleInit {\r\n  private readonly logger = new Logger(StripePaymentStrategy.name)\r\n  private stripe: Stripe\r\n  private publishableKey: string\r\n  constructor(\r\n    @InjectConnection() readonly connection: Connection,\r\n    private readonly configService: ConfigService,\r\n    @Inject(ITransactionRepository)\r\n    private readonly transactionRepository: ITransactionRepository,\r\n    @Inject(forwardRef(() => IClassService))\r\n    private readonly classService: IClassService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService,\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService\r\n  ) {}\r\n  async onModuleInit() {\r\n    this.stripe = new Stripe(this.configService.get('payment.stripe.apiKey'))\r\n    this.publishableKey = (await this.settingService.findByKey(SettingKey.StripePublishableKey)).value as string\r\n  }\r\n\r\n  async createTransaction(createStripePaymentDto: CreateStripePaymentDto) {\r\n    const { customerEmail, amount, description, metadata } = createStripePaymentDto\r\n    const customer = await this.stripe.customers.create({\r\n      email: customerEmail\r\n    })\r\n    const ephemeralKey = await this.stripe.ephemeralKeys.create(\r\n      { customer: customer.id },\r\n      { apiVersion: '2024-10-28.acacia' }\r\n    )\r\n    const paymentIntent = await this.stripe.paymentIntents.create({\r\n      amount: amount,\r\n      currency: 'vnd',\r\n      customer: customer.id,\r\n      description: description,\r\n      metadata: metadata,\r\n      automatic_payment_methods: {\r\n        enabled: true\r\n      }\r\n    })\r\n    const createStripePaymentResponse = {\r\n      id: paymentIntent.id,\r\n      paymentIntent: paymentIntent.client_secret,\r\n      ephemeralKey: ephemeralKey.secret,\r\n      customer: customer.id,\r\n      publishableKey: this.publishableKey\r\n    }\r\n    this.logger.log(JSON.stringify(createStripePaymentResponse))\r\n\r\n    return createStripePaymentResponse\r\n\r\n    // const session = await this.stripe.checkout.sessions.create({\r\n    //   line_items: [\r\n    //     {\r\n    //       price_data: {\r\n    //         currency: 'vnd',\r\n    //         product_data: {\r\n    //           name: 'T-shirt',\r\n    //           description: 'Orchid Flower Sticks',\r\n    //           images: [\r\n    //             'https://www.coopersofstortford.co.uk/images/products/medium/M236i.jpg',\r\n    //             'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbhK63v9WwEwLipJ72cuTyqTS-ssxrTzMNj7T1Z30XUPAQj7XCFRqXAsdAy4qsbK7I14g&usqp=CAU'\r\n    //           ]\r\n    //         },\r\n    //         unit_amount: 20000\r\n    //       },\r\n    //       quantity: 2\r\n    //     }\r\n    //   ],\r\n    //   mode: 'payment',\r\n    //   success_url: 'http://localhost:4242/success',\r\n    //   cancel_url: 'http://localhost:4242/cancel',\r\n    //   expires_at: moment().tz(VN_TIMEZONE).add(30, 'minute').unix()\r\n    // })\r\n\r\n    // return session\r\n  }\r\n\r\n  async getTransaction(queryDto: QueryStripePaymentDto) {\r\n    const { id } = queryDto\r\n    const paymentIntent = await this.stripe.paymentIntents.retrieve(id)\r\n    return paymentIntent\r\n  }\r\n\r\n  async refundTransaction(refundDto: RefundStripePaymentDto) {\r\n    const { id, amount, metadata } = refundDto\r\n    const refund = await this.stripe.refunds.create({\r\n      payment_intent: id,\r\n      amount,\r\n      metadata\r\n    })\r\n    return refund\r\n  }\r\n\r\n  async getRefundTransaction(queryDto: any) {}\r\n\r\n  async processWebhook(event: Stripe.Event) {\r\n    // Handle the event\r\n    let charge: Stripe.Charge\r\n    switch (event.type) {\r\n      case 'charge.succeeded':\r\n        charge = event.data.object\r\n        this.logger.log(`Charge for ${charge.amount} was succeeded!`)\r\n        // Then define and call a method to handle the succeeded payment intent.\r\n        await this.handleChargeSucceeded(charge)\r\n        break\r\n      case 'charge.failed':\r\n        charge = event.data.object\r\n        this.logger.log(`Charge for ${charge.amount} was failed!`)\r\n        await this.handleChargeFailed(charge)\r\n        break\r\n      case 'charge.refunded':\r\n        charge = event.data.object\r\n        this.logger.log(`Charge for ${charge.amount} was refunded!`)\r\n        await this.handleChargeRefunded(charge)\r\n        break\r\n      default:\r\n        this.logger.error(`Unhandled event type ${event.type}.`)\r\n    }\r\n  }\r\n\r\n  verifyPaymentWebhookData(params: { rawBody: any; signature: string }): Stripe.Event {\r\n    const { rawBody, signature } = params\r\n    try {\r\n      this.logger.log(`Webhook signature verification...`)\r\n      const webhookSecret = this.configService.get('payment.stripe.webhookSecret')\r\n      const event = this.stripe.webhooks.constructEvent(rawBody, signature, webhookSecret)\r\n      return event\r\n    } catch (err) {\r\n      this.logger.error(`⚠️  Webhook signature verification failed.`, err.message)\r\n      throw new BadRequestException(`⚠️  Webhook signature verification failed.`)\r\n    }\r\n  }\r\n\r\n  private async sendNotificationWhenPaymentSuccess({ learnerId, classId }) {\r\n    try {\r\n      const [learner, courseClass] = await Promise.all([\r\n        this.learnerService.findById(learnerId),\r\n        this.classService.findById(classId)\r\n      ])\r\n      this.notificationService.sendMail({\r\n        to: learner?.email,\r\n        subject: `[Orchidify] Xác nhận đăng ký lớp học ${courseClass?.title} thành công`,\r\n        template: 'learner/enroll-class',\r\n        context: {\r\n          classTitle: courseClass?.title,\r\n          name: learner?.name\r\n        }\r\n      })\r\n    } catch (error) {}\r\n  }\r\n\r\n  private async handleChargeSucceeded(charge: Stripe.Charge) {\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        const chargeId = get(charge, 'id')\r\n        const paymentIntentId = get(charge, 'payment_intent')\r\n        this.logger.log(`handleChargeSucceeded: [start] chargeId=${chargeId}, paymentIntentId=${paymentIntentId}`)\r\n        const isPaymentSuccess = get(charge, 'status') === StripeStatus.SUCCEEDED\r\n        if (isPaymentSuccess) {\r\n          this.logger.log('handleChargeSucceeded: payment SUCCESS')\r\n          const transaction = await this.transactionRepository.findOne({\r\n            conditions: {\r\n              type: TransactionType.PAYMENT,\r\n              'payment.id': paymentIntentId,\r\n              status: TransactionStatus.DRAFT\r\n            }\r\n          })\r\n          if (!transaction) throw new AppException(Errors.TRANSACTION_NOT_FOUND)\r\n          // Get learnerId, classId from extraData\r\n          const { learnerId, classId, orderCode } = get(charge, 'metadata')\r\n          // 1. Update learnerQuantity in class\r\n          const courseClass = await this.classService.update(\r\n            { _id: new Types.ObjectId(classId) },\r\n            {\r\n              $inc: {\r\n                learnerQuantity: 1\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n          // 2. Create learnerClass\r\n          await this.learnerClassService.create(\r\n            {\r\n              enrollDate: new Date(),\r\n              transactionId: transaction._id,\r\n              learnerId: new Types.ObjectId(learnerId),\r\n              classId: new Types.ObjectId(classId),\r\n              courseId: courseClass.courseId\r\n            },\r\n            { session }\r\n          )\r\n          // 3.  Update payment to transaction\r\n          const paymentPayLoad = {\r\n            id: charge?.id,\r\n            code: orderCode,\r\n            createdAt: new Date(),\r\n            status: transaction?.status,\r\n            ...charge\r\n          }\r\n          const newPayment: BasePaymentDto = {\r\n            ...paymentPayLoad,\r\n            histories: [...transaction.payment.histories, paymentPayLoad]\r\n          }\r\n          await this.transactionRepository.findOneAndUpdate(\r\n            { _id: transaction._id },\r\n            {\r\n              status: TransactionStatus.CAPTURED,\r\n              payment: newPayment\r\n            },\r\n            { session }\r\n          )\r\n          // 4. Send notification to learner/instructor\r\n          this.sendNotificationWhenChargeSucceeded({ classId, courseClass, learnerId })\r\n        }\r\n      })\r\n      this.logger.log('handleChargeSucceeded: [completed]')\r\n      return true\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n  }\r\n\r\n  private async handleChargeFailed(charge: Stripe.Charge) {\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        const chargeId = get(charge, 'id')\r\n        const paymentIntentId = get(charge, 'payment_intent')\r\n        this.logger.log(`handleChargeFailed: [start] chargeId=${chargeId}, paymentIntentId=${paymentIntentId}`)\r\n        this.logger.log('handleChargeFailed: payment FAILED')\r\n        // 1.  Update payment to transaction\r\n        const transaction = await this.transactionRepository.findOne({\r\n          conditions: {\r\n            type: TransactionType.PAYMENT,\r\n            'payment.id': paymentIntentId,\r\n            status: TransactionStatus.DRAFT\r\n          }\r\n        })\r\n        if (!transaction) throw new AppException(Errors.TRANSACTION_NOT_FOUND)\r\n        const { orderCode } = get(charge, 'metadata')\r\n        const paymentPayLoad = {\r\n          id: charge?.id,\r\n          code: orderCode,\r\n          createdAt: new Date(),\r\n          status: transaction?.status,\r\n          ...charge\r\n        }\r\n        const newPayment: BasePaymentDto = {\r\n          ...paymentPayLoad,\r\n          histories: [...transaction.payment.histories, paymentPayLoad]\r\n        }\r\n        await this.transactionRepository.findOneAndUpdate(\r\n          { _id: transaction._id },\r\n          {\r\n            status: TransactionStatus.ERROR,\r\n            payment: newPayment\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n      this.logger.log('handleChargeFailed: [completed]')\r\n      return true\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n  }\r\n\r\n  private async handleChargeRefunded(charge: Stripe.Charge) {\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        const chargeId = get(charge, 'id')\r\n        const paymentIntentId = get(charge, 'payment_intent')\r\n        this.logger.log(`handleChargeRefunded: [start] chargeId=${chargeId}, paymentIntentId=${paymentIntentId}`)\r\n        this.logger.log('handleChargeRefunded: payment REFUNDED')\r\n        // 1.  Update payment to transaction\r\n        const transaction = await this.transactionRepository.findOne({\r\n          conditions: {\r\n            type: TransactionType.PAYMENT,\r\n            'payment.id': paymentIntentId,\r\n            status: TransactionStatus.CAPTURED\r\n          }\r\n        })\r\n        if (!transaction) throw new AppException(Errors.TRANSACTION_NOT_FOUND)\r\n        const { orderCode } = get(charge, 'metadata')\r\n        const paymentPayLoad = {\r\n          id: charge?.id,\r\n          code: orderCode,\r\n          createdAt: new Date(),\r\n          status: transaction?.status,\r\n          ...charge\r\n        }\r\n        const newPayment: BasePaymentDto = {\r\n          ...paymentPayLoad,\r\n          histories: [...transaction.payment.histories, paymentPayLoad]\r\n        }\r\n        await this.transactionRepository.findOneAndUpdate(\r\n          { _id: transaction._id },\r\n          {\r\n            status: TransactionStatus.REFUNDED,\r\n            payment: newPayment\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n      this.logger.log('handleChargeRefunded: [completed]')\r\n      return true\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n  }\r\n\r\n  private async sendNotificationWhenChargeSucceeded({ classId, courseClass, learnerId }) {\r\n    // 4. Send email/notification to learner\r\n    this.sendNotificationWhenPaymentSuccess({ learnerId, classId })\r\n\r\n    // 5. Send notification to learner\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: `Bạn đã đăng ký lớp học thành công`,\r\n      body: `Chào mừng bạn đến với lớp học ${courseClass.code}: ${courseClass.title}.`,\r\n      receiverIds: [learnerId],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS,\r\n        id: classId\r\n      }\r\n    })\r\n\r\n    // 6. Send notification for instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: `Học viên đã đăng ký lớp học thành công`,\r\n      body: `Lớp học ${courseClass.code}: ${courseClass.title} có học viên mới.`,\r\n      receiverIds: [courseClass.instructorId.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS,\r\n        id: classId\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}