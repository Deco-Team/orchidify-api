{"version":3,"file":"momo.strategy.js","sourceRoot":"/","sources":["transaction/strategies/momo.strategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { IClassService } from '@class/services/class.service'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { LearnerClassStatus, TransactionStatus, UserRole } from '@common/contracts/constant'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { MailerService } from '@nestjs-modules/mailer'\r\nimport { HttpService } from '@nestjs/axios'\r\nimport { forwardRef, Inject, Injectable, Logger } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { MomoResultCode, TransactionType } from '@src/transaction/contracts/constant'\r\nimport {\r\n  CreateMomoPaymentDto,\r\n  MomoPaymentResponseDto,\r\n  QueryMomoPaymentDto,\r\n  RefundMomoPaymentDto\r\n} from '@src/transaction/dto/momo-payment.dto'\r\nimport { ITransactionRepository } from '@src/transaction/repositories/transaction.repository'\r\nimport { IPaymentStrategy } from '@src/transaction/strategies/payment-strategy.interface'\r\nimport { BasePaymentDto } from '@transaction/dto/base.transaction.dto'\r\nimport { AxiosError } from 'axios'\r\nimport { get } from 'lodash'\r\nimport { Connection, Types } from 'mongoose'\r\nimport { catchError, firstValueFrom } from 'rxjs'\r\nimport { ILearnerService } from '@learner/services/learner.service'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\n\r\n@Injectable()\r\nexport class MomoPaymentStrategy implements IPaymentStrategy {\r\n  private readonly logger = new Logger(MomoPaymentStrategy.name)\r\n  private config\r\n  constructor(\r\n    @InjectConnection() readonly connection: Connection,\r\n    private readonly httpService: HttpService,\r\n    private readonly configService: ConfigService,\r\n    private readonly helperService: HelperService,\r\n    @Inject(ITransactionRepository)\r\n    private readonly transactionRepository: ITransactionRepository,\r\n    @Inject(forwardRef(() => IClassService))\r\n    private readonly classService: IClassService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService,\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n  ) {\r\n    this.config = this.configService.get('payment.momo')\r\n  }\r\n\r\n  async createTransaction(createMomoPaymentDto: CreateMomoPaymentDto) {\r\n    const {\r\n      partnerName,\r\n      orderInfo,\r\n      redirectUrl,\r\n      ipnUrl,\r\n      requestType,\r\n      amount,\r\n      orderId,\r\n      requestId,\r\n      extraData,\r\n      autoCapture,\r\n      lang,\r\n      orderExpireTime\r\n    } = createMomoPaymentDto\r\n    const rawSignature = `accessKey=${this.config.accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${orderId}&orderInfo=${orderInfo}&partnerCode=${this.config.partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`\r\n    const signature = this.helperService.createSignature(rawSignature, this.config.secretKey)\r\n    createMomoPaymentDto.partnerCode = this.config.partnerCode\r\n    createMomoPaymentDto.signature = signature\r\n\r\n    const { data } = await firstValueFrom(\r\n      this.httpService.post(`${this.config.endpoint}/v2/gateway/api/create`, createMomoPaymentDto).pipe(\r\n        catchError((error: AxiosError) => {\r\n          this.logger.error(error.response.data)\r\n          throw 'An error happened!'\r\n        })\r\n      )\r\n    )\r\n    console.log(data)\r\n    data.deeplink = encodeURIComponent(data?.deeplink)\r\n    return data\r\n  }\r\n\r\n  async getTransaction(queryDto: QueryMomoPaymentDto) {\r\n    const { orderId, requestId } = queryDto\r\n    const rawSignature = `accessKey=${this.config.accessKey}&orderId=${orderId}&partnerCode=${this.config.partnerCode}&requestId=${requestId}`\r\n    const signature = this.helperService.createSignature(rawSignature, this.config.secretKey)\r\n    const body = {\r\n      partnerCode: this.config.partnerCode,\r\n      requestId,\r\n      orderId,\r\n      lang: 'vi',\r\n      signature\r\n    }\r\n    const { data } = await firstValueFrom(\r\n      this.httpService.post(`${this.config.endpoint}/v2/gateway/api/query`, body).pipe(\r\n        catchError((error: AxiosError) => {\r\n          this.logger.error(error.response.data)\r\n          throw 'An error happened!'\r\n        })\r\n      )\r\n    )\r\n    console.log(data)\r\n    return data\r\n  }\r\n\r\n  async refundTransaction(refundDto: RefundMomoPaymentDto) {\r\n    const { amount, description, orderId, requestId, transId } = refundDto\r\n    const rawSignature = `accessKey=${this.config.accessKey}&amount=${amount}&description=${description}&orderId=${orderId}&partnerCode=${this.config.partnerCode}&requestId=${requestId}&transId=${transId}`\r\n    const signature = this.helperService.createSignature(rawSignature, this.config.secretKey)\r\n    refundDto.partnerCode = this.config.partnerCode\r\n    refundDto.signature = signature\r\n\r\n    const { data } = await firstValueFrom(\r\n      this.httpService.post(`${this.config.endpoint}/v2/gateway/api/refund`, refundDto).pipe(\r\n        catchError((error: AxiosError) => {\r\n          this.logger.error(error.response.data)\r\n          throw 'An error happened!'\r\n        })\r\n      )\r\n    )\r\n    console.log(data)\r\n    return data\r\n  }\r\n\r\n  async getRefundTransaction(queryDto: QueryMomoPaymentDto) {\r\n    const { orderId, requestId } = queryDto\r\n    const rawSignature = `accessKey=${this.config.accessKey}&orderId=${orderId}&partnerCode=${this.config.partnerCode}&requestId=${requestId}`\r\n    const signature = this.helperService.createSignature(rawSignature, this.config.secretKey)\r\n    const body = {\r\n      partnerCode: this.config.partnerCode,\r\n      requestId,\r\n      orderId,\r\n      lang: 'vi',\r\n      signature\r\n    }\r\n    const { data } = await firstValueFrom(\r\n      this.httpService.post(`${this.config.endpoint}/v2/gateway/api/refund/query`, body).pipe(\r\n        catchError((error: AxiosError) => {\r\n          this.logger.error(error.response.data)\r\n          throw 'An error happened!'\r\n        })\r\n      )\r\n    )\r\n    console.log(data)\r\n    return data\r\n  }\r\n\r\n  async processWebhook(webhookData: MomoPaymentResponseDto) {\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        const orderId = get(webhookData, 'orderId')\r\n        this.logger.log(`processWebhook: [start] orderId=${orderId}`)\r\n\r\n        const isPaymentSuccess = get(webhookData, 'resultCode') === MomoResultCode.SUCCESS\r\n        if (isPaymentSuccess) {\r\n          // {\"partnerCode\":\"MOMO\",\"orderId\":\"2350841914636077\",\"requestId\":\"2350841914636077\",\"amount\":500000,\r\n          // \"orderInfo\":\"Orchidify - Thanh toán đơn hàng #2350841914636077\",\"orderType\":\"momo_wallet\",\"transId\":4193767509,\r\n          // \"resultCode\":0,\"message\":\"Thành công.\",\"payType\":\"credit\",\"responseTime\":1729168176653,\"extraData\":\"\",\r\n          // \"signature\":\"7c72c91be19b2af1a3274eb489e48a121d7e1dfaf6b486fc171446220dec577b\"}\r\n          this.logger.log('processWebhook: payment SUCCESS')\r\n\r\n          const transaction = await this.transactionRepository.findOne({\r\n            conditions: {\r\n              type: TransactionType.PAYMENT,\r\n              'payment.code': get(webhookData, 'orderId'),\r\n              status: TransactionStatus.DRAFT\r\n            }\r\n          })\r\n          if (!transaction) throw new AppException(Errors.TRANSACTION_NOT_FOUND)\r\n\r\n          // 1. Fetch learnerId, classId from extraData => create learnerClass\r\n          const { learnerId, classId } = JSON.parse(get(webhookData, 'extraData'))\r\n          await this.learnerClassService.create(\r\n            {\r\n              enrollDate: new Date(),\r\n              // status: LearnerClassStatus.ENROLLED,\r\n              transactionId: transaction._id,\r\n              learnerId: new Types.ObjectId(learnerId),\r\n              classId: new Types.ObjectId(classId)\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // 2. Update learnerQuantity in class\r\n          await this.classService.update(\r\n            { _id: new Types.ObjectId(classId) },\r\n            {\r\n              $inc: {\r\n                learnerQuantity: 1\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // 3.  Update payment to transaction\r\n          const paymentPayLoad = {\r\n            id: webhookData?.transId?.toString(),\r\n            code: webhookData?.orderId,\r\n            createdAt: new Date(),\r\n            status: webhookData?.resultCode?.toString(),\r\n            ...webhookData\r\n          }\r\n          const newPayment: BasePaymentDto = {\r\n            ...paymentPayLoad,\r\n            histories: [...transaction.payment.histories, paymentPayLoad]\r\n          }\r\n          await this.transactionRepository.findOneAndUpdate(\r\n            { _id: transaction._id },\r\n            {\r\n              status: TransactionStatus.CAPTURED,\r\n              payment: newPayment\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // 4. Send email/notification to learner\r\n          this.sendNotificationWhenPaymentSuccess({ learnerId, classId })\r\n\r\n          // 5. Send notification to staff\r\n        } else {\r\n          // {\"partnerCode\":\"MOMO\",\"orderId\":\"2597751498479017\",\"requestId\":\"2597751498479017\",\r\n          // \"amount\":500000,\"orderInfo\":\"Orchidify - Thanh toán đơn hàng #2597751498479017\",\r\n          // \"orderType\":\"momo_wallet\",\"transId\":4193843003,\"resultCode\":1002,\r\n          // \"message\":\"Giao dịch bị từ chối do nhà phát hành tài khoản thanh toán.\",\"payType\":\"credit\",\r\n          // \"responseTime\":1729170439150,\"extraData\":\"{\\\"classId\\\":\\\"670fe48f8c7ef08132529f7f\\\",\\\"learnerId\\\":\\\"66dafb2a05fbc3343d6bfc83\\\"}\",\r\n          // \"signature\":\"d7625350337e76ac93db68e7c8182cdf360cb01803580157ec61af0f8e506f03\"}\r\n          this.logger.log('processWebhook: payment FAILED')\r\n          // 1.  Update payment to transaction\r\n          const transaction = await this.transactionRepository.findOne({\r\n            conditions: {\r\n              type: TransactionType.PAYMENT,\r\n              'payment.code': get(webhookData, 'orderId'),\r\n              status: TransactionStatus.DRAFT\r\n            }\r\n          })\r\n          if (!transaction) throw new AppException(Errors.TRANSACTION_NOT_FOUND)\r\n\r\n          const paymentPayLoad = {\r\n            id: webhookData?.transId?.toString(),\r\n            code: webhookData?.orderId,\r\n            createdAt: new Date(),\r\n            status: webhookData?.resultCode?.toString(),\r\n            ...webhookData\r\n          }\r\n          const newPayment: BasePaymentDto = {\r\n            ...paymentPayLoad,\r\n            histories: [...transaction.payment.histories, paymentPayLoad]\r\n          }\r\n          await this.transactionRepository.findOneAndUpdate(\r\n            { _id: transaction._id },\r\n            {\r\n              status: TransactionStatus.ERROR,\r\n              payment: newPayment\r\n            },\r\n            { session }\r\n          )\r\n        }\r\n      })\r\n      this.logger.log('processWebhook: [completed]')\r\n      return true\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n  }\r\n\r\n  verifyPaymentWebhookData(momoPaymentResponseDto: any): boolean {\r\n    const {\r\n      partnerCode,\r\n      amount,\r\n      extraData,\r\n      message,\r\n      orderId,\r\n      orderInfo,\r\n      orderType,\r\n      requestId,\r\n      payType,\r\n      responseTime,\r\n      resultCode,\r\n      transId\r\n    } = momoPaymentResponseDto\r\n    const rawSignature = `accessKey=${this.config.accessKey}&amount=${amount}&extraData=${extraData}&message=${message}&orderId=${orderId}&orderInfo=${orderInfo}&orderType=${orderType}&partnerCode=${partnerCode}&payType=${payType}&requestId=${requestId}&responseTime=${responseTime}&resultCode=${resultCode}&transId=${transId}`\r\n    const signature = this.helperService.createSignature(rawSignature, this.config.secretKey)\r\n\r\n    return momoPaymentResponseDto.signature == signature\r\n  }\r\n\r\n  private async sendNotificationWhenPaymentSuccess({ learnerId, classId }) {\r\n    try {\r\n      const [learner, courseClass] = await Promise.all([\r\n        this.learnerService.findById(learnerId),\r\n        this.classService.findById(classId)\r\n      ])\r\n      this.notificationService.sendMail({\r\n        to: learner?.email,\r\n        subject: `[Orchidify] Xác nhận đăng ký lớp học ${courseClass?.title} thành công`,\r\n        template: 'learner/enroll-class',\r\n        context: {\r\n          classTitle: courseClass?.title,\r\n          name: learner?.name\r\n        }\r\n      })\r\n    } catch (error) {}\r\n  }\r\n}\r\n"]}