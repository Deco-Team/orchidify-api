{"version":3,"file":"payment.controller.js","sourceRoot":"/","sources":["transaction/controllers/payment.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAkG;AAClG,6CAAsE;AAEtE,iEAA2E;AAC3E,oDAAmE;AAK5D,IAAM,iBAAiB,yBAAvB,MAAM,iBAAiB;IAE5B,YAEE,cAAgD;QAA/B,mBAAc,GAAd,cAAc,CAAiB;QAHjC,WAAM,GAAG,IAAI,eAAM,CAAC,mBAAiB,CAAC,IAAI,CAAC,CAAA;IAIzD,CAAC;IAOJ,WAAW,CAAS,sBAAsB;QACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAChF,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,wBAAa,CAAC,IAAI,CAAC,CAAA;QAGnD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,CAAA;QACnF,IAAI,CAAC,MAAM;YAAE,OAAO,KAAK,CAAA;QAGzB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,wBAAa,CAAC,IAAI,CAAC,CAAA;QACnD,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAA;IACnE,CAAC;IAOK,AAAN,KAAK,CAAC,aAAa,CAAQ,GAAY,EAAU,IAAI;QACnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QAC7C,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,wBAAa,CAAC,MAAM,CAAC,CAAA;QAErD,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;QAGjD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;QAG9F,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,wBAAa,CAAC,MAAM,CAAC,CAAA;QACrD,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;IAClD,CAAC;CACF,CAAA;AA3CY,8CAAiB;AAY5B;IALC,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,yDAAyD;KACnE,CAAC;IACD,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAC/B,IAAA,aAAI,EAAC,cAAc,CAAC;IACR,WAAA,IAAA,aAAI,GAAE,CAAA;;;;oDAWlB;AAOK;IALL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,kBAAkB;KAC5B,CAAC;IACD,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,aAAI,EAAC,gBAAgB,CAAC;IACF,WAAA,IAAA,YAAG,GAAE,CAAA;IAAgB,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAhB,OAAO;;sDAYtC;4BA1CU,iBAAiB;IAH7B,IAAA,iBAAO,EAAC,SAAS,CAAC;IAClB,IAAA,uBAAa,GAAE;IACf,IAAA,mBAAU,EAAC,SAAS,CAAC;IAIjB,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;;GAHf,iBAAiB,CA2C7B","sourcesContent":["import { Body, Controller, HttpCode, HttpStatus, Inject, Logger, Post, Req } from '@nestjs/common'\r\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\nimport { IPaymentService } from '@src/transaction/services/payment.service'\r\nimport { PaymentMethod } from '@src/transaction/contracts/constant'\r\n\r\n@ApiTags('Payment')\r\n@ApiBearerAuth()\r\n@Controller('payment')\r\nexport class PaymentController {\r\n  private readonly logger = new Logger(PaymentController.name)\r\n  constructor(\r\n    @Inject(IPaymentService)\r\n    private readonly paymentService: IPaymentService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: 'Webhook Handler for Instant Payment Notification (MOMO)'\r\n  })\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @Post('webhook/momo')\r\n  webhookMomo(@Body() momoPaymentResponseDto) {\r\n    this.logger.log('Handling MOMO webhook', JSON.stringify(momoPaymentResponseDto))\r\n    this.paymentService.setStrategy(PaymentMethod.MOMO)\r\n\r\n    //1. Validate signature with other data\r\n    const result = this.paymentService.verifyPaymentWebhookData(momoPaymentResponseDto)\r\n    if (!result) return false\r\n\r\n    //2. Process webhook\r\n    this.paymentService.setStrategy(PaymentMethod.MOMO)\r\n    return this.paymentService.processWebhook(momoPaymentResponseDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Webhook (STRIPE)'\r\n  })\r\n  @HttpCode(HttpStatus.OK)\r\n  @Post('webhook/stripe')\r\n  async webhookStripe(@Req() req: Request, @Body() body) {\r\n    this.logger.log('Handling STRIPE webhook...')\r\n    this.paymentService.setStrategy(PaymentMethod.STRIPE)\r\n    // Get the signature sent by Stripe\r\n    const signature = req.headers['stripe-signature']\r\n\r\n    //1. Validate signature with other data\r\n    const event = await this.paymentService.verifyPaymentWebhookData({ rawBody: body, signature })\r\n\r\n    //2. Process webhook\r\n    this.paymentService.setStrategy(PaymentMethod.STRIPE)\r\n    return this.paymentService.processWebhook(event)\r\n  }\r\n}\r\n"]}