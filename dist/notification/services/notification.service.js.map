{"version":3,"file":"notification.service.js","sourceRoot":"/","sources":["notification/services/notification.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,uCAA6C;AAE7C,iFAA+D;AAC/D,mGAAyF;AACzF,mGAAyF;AACzF,+DAA0D;AAC1D,8DAA6D;AAE7D,mDAAsD;AAGzC,QAAA,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAA;AAW3D,IAAM,mBAAmB,2BAAzB,MAAM,mBAAmB;IAE9B,YACmB,WAA0B,EAE3C,wBAAoE,EAEpE,wBAAoE,EAEpE,iBAAsD;QANrC,gBAAW,GAAX,WAAW,CAAe;QAE1B,6BAAwB,GAAxB,wBAAwB,CAA2B;QAEnD,6BAAwB,GAAxB,wBAAwB,CAA2B;QAEnD,sBAAiB,GAAjB,iBAAiB,CAAoB;QARvC,cAAS,GAAG,IAAI,8BAAS,CAAC,qBAAmB,CAAC,IAAI,CAAC,CAAA;IASjE,CAAC;IAEJ,KAAK,CAAC,QAAQ,CAAC,OAAwB;QACrC,IAAI,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;YAC3E,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACtF,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,0BAA0B,CAAC,mBAAwC;QAC9E,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,qDAAqD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAA;QAChH,IAAI,CAAC;YACH,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,mBAAmB,CAAA;YAG9D,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;YAChG,mBAAmB,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAA;YAC1C,MAAM,sBAAsB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAA;YAGrD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;gBACxD,MAAM,EAAE;oBACN,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACrE;gBACD,MAAM,EAAE,2BAAgB,CAAC,MAAM;aAChC,CAAC,CAAA;YACF,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;YAEtD,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACnE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC;gBAC/D,MAAM;gBACN,KAAK;gBACL,IAAI;gBACJ,IAAI;aACL,CAAC,CAAA;YACF,OAAO,MAAM,CAAA;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,uCAAuC,KAAK,EAAE,CAAC,CAAA;YACpE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;CACF,CAAA;AArDY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,eAAM,EAAC,sDAAyB,CAAC,CAAA;IAEjC,WAAA,IAAA,eAAM,EAAC,sDAAyB,CAAC,CAAA;IAEjC,WAAA,IAAA,eAAM,EAAC,wCAAkB,CAAC,CAAA;qCALG,sBAAa;GAHlC,mBAAmB,CAqD/B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { SaveOptions, Types } from 'mongoose'\r\nimport { SendNotificationDto } from '@notification/dto/send-notification.dto'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { IFirebaseFirestoreService } from '@firebase/services/firebase.firestore.service'\r\nimport { IFirebaseMessagingService } from '@firebase/services/firebase.messaging.service'\r\nimport { IUserDeviceService } from './user-device.service'\r\nimport { UserDeviceStatus } from '@common/contracts/constant'\r\nimport { BatchResponse } from 'firebase-admin/lib/messaging/messaging-api'\r\nimport { MailerService } from '@nestjs-modules/mailer'\r\nimport { MailSendOptions } from '@notification/dto/send-email.dto'\r\n\r\nexport const INotificationService = Symbol('INotificationService')\r\n\r\nexport interface INotificationService {\r\n  sendMail(options: MailSendOptions): Promise<void>\r\n  sendFirebaseCloudMessaging(sendNotificationDto: SendNotificationDto): Promise<{\r\n    success: boolean\r\n    response?: BatchResponse\r\n  }>\r\n}\r\n\r\n@Injectable()\r\nexport class NotificationService implements INotificationService {\r\n  private readonly appLogger = new AppLogger(NotificationService.name)\r\n  constructor(\r\n    private readonly mailService: MailerService,\r\n    @Inject(IFirebaseFirestoreService)\r\n    private readonly firebaseFirestoreService: IFirebaseFirestoreService,\r\n    @Inject(IFirebaseMessagingService)\r\n    private readonly firebaseMessagingService: IFirebaseMessagingService,\r\n    @Inject(IUserDeviceService)\r\n    private readonly userDeviceService: IUserDeviceService\r\n  ) {}\r\n\r\n  async sendMail(options: MailSendOptions) {\r\n    try {\r\n      this.appLogger.log(`[sendMail] [success] data= ${JSON.stringify(options)}`)\r\n      await this.mailService.sendMail(options)\r\n    } catch (error) {\r\n      this.appLogger.error(`[sendMail] [failed] error = ${JSON.stringify(error.message)}`)\r\n    }\r\n  }\r\n\r\n  public async sendFirebaseCloudMessaging(sendNotificationDto: SendNotificationDto) {\r\n    this.appLogger.debug(`[sendFirebaseCloudMessaging]: sendNotificationDto=${JSON.stringify(sendNotificationDto)}`)\r\n    try {\r\n      const { title, body, data, receiverIds } = sendNotificationDto\r\n\r\n      // Add notification doc to firestore\r\n      const notificationCollection = await this.firebaseFirestoreService.getCollection('notification')\r\n      sendNotificationDto.createdAt = new Date()\r\n      await notificationCollection.add(sendNotificationDto)\r\n\r\n      // Push firebase cloud messaging\r\n      const userDevices = await this.userDeviceService.findMany({\r\n        userId: {\r\n          $in: receiverIds.map((receiverId) => new Types.ObjectId(receiverId))\r\n        },\r\n        status: UserDeviceStatus.ACTIVE\r\n      })\r\n      if (userDevices.length === 0) return { success: true }\r\n\r\n      const tokens = userDevices.map((userDevice) => userDevice.fcmToken)\r\n      const result = await this.firebaseMessagingService.sendMulticast({\r\n        tokens,\r\n        title,\r\n        body,\r\n        data\r\n      })\r\n      return result\r\n    } catch (error) {\r\n      this.appLogger.error(`[sendFirebaseCloudMessaging]: error=${error}`)\r\n      return { success: false }\r\n    }\r\n  }\r\n}\r\n"]}