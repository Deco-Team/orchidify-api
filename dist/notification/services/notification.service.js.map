{"version":3,"file":"notification.service.js","sourceRoot":"/","sources":["notification/services/notification.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,qFAA4F;AAM5F,iFAA+D;AAC/D,yFAA+E;AAElE,QAAA,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAA;AAgC3D,IAAM,mBAAmB,2BAAzB,MAAM,mBAAmB;IAE9B,YAEE,sBAAgE,EAEhE,eAAsD;QAFrC,2BAAsB,GAAtB,sBAAsB,CAAyB;QAE/C,oBAAe,GAAf,eAAe,CAAsB;QALvC,cAAS,GAAG,IAAI,8BAAS,CAAC,qBAAmB,CAAC,IAAI,CAAC,CAAA;IAMjE,CAAC;IAEG,KAAK,CAAC,MAAM,CAAC,qBAA4C,EAAE,OAAiC;QAGjG,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,GAAG,qBAAqB,EAAE,EAAE,OAAO,CAAC,CAAA;IACxF,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,UAAqC,EACrC,OAAkC,EAClC,OAAkC;QAElC,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IACzF,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,cAAsB,EACtB,UAAyC,EACzC,SAAkC;QAElC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC7D,UAAU,EAAE;gBACV,GAAG,EAAE,cAAc;aACpB;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,YAAY,CAAA;IACrB,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,UAAqC,EACrC,UAAyC,EACzC,SAAkC;QAElC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC7D,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,YAAY,CAAA;IACrB,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,UAA6C,EAC7C,UAAgC,EAChC,SAAkC;QAElC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC;YAC/D,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,aAAa,CAAA;IACtB,CAAC;CA4BF,CAAA;AA1FY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAIR,WAAA,IAAA,eAAM,EAAC,iDAAuB,CAAC,CAAA;IAE/B,WAAA,IAAA,eAAM,EAAC,4CAAoB,CAAC,CAAA;;GALpB,mBAAmB,CA0F/B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { INotificationRepository } from '@notification/repositories/notification.repository'\r\nimport { Notification, NotificationDocument } from '@notification/schemas/notification.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreateNotificationDto } from '@notification/dto/create-notification.dto'\r\nimport { QueryNotificationDto } from '@notification/dto/view-notification.dto'\r\nimport { NOTIFICATION_LIST_PROJECTION } from '@notification/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { IFirebaseAuthService } from '@firebase/services/firebase.auth.service'\r\n\r\nexport const INotificationService = Symbol('INotificationService')\r\n\r\nexport interface INotificationService {\r\n  create(createNotificationDto: CreateNotificationDto, options?: SaveOptions | undefined): Promise<NotificationDocument>\r\n  findById(\r\n    notificationId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<NotificationDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<Notification>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<NotificationDocument>\r\n  findMany(\r\n    conditions: FilterQuery<NotificationDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<NotificationDocument[]>\r\n  update(\r\n    conditions: FilterQuery<Notification>,\r\n    payload: UpdateQuery<Notification>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<NotificationDocument>\r\n  // list(\r\n  //   queryNotificationDto: QueryNotificationDto,\r\n  //   projection?: string | Record<string, any>,\r\n  //   populate?: Array<PopulateOptions>\r\n  // )\r\n}\r\n\r\n@Injectable()\r\nexport class NotificationService implements INotificationService {\r\n  private readonly appLogger = new AppLogger(NotificationService.name)\r\n  constructor(\r\n    @Inject(INotificationRepository)\r\n    private readonly notificationRepository: INotificationRepository,\r\n    @Inject(IFirebaseAuthService)\r\n    private readonly firebaseService: IFirebaseAuthService\r\n  ) {}\r\n\r\n  public async create(createNotificationDto: CreateNotificationDto, options?: SaveOptions | undefined) {\r\n    // call firebase messaging\r\n    \r\n    return await this.notificationRepository.create({ ...createNotificationDto }, options)\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<Notification>,\r\n    payload: UpdateQuery<Notification>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return await this.notificationRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findById(\r\n    notificationId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const notification = await this.notificationRepository.findOne({\r\n      conditions: {\r\n        _id: notificationId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return notification\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<Notification>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const notification = await this.notificationRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return notification\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<NotificationDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const notifications = await this.notificationRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return notifications\r\n  }\r\n\r\n  // async list(\r\n  //   queryCourseDto: QueryNotificationDto,\r\n  //   projection = NOTIFICATION_LIST_PROJECTION,\r\n  //   populate?: Array<PopulateOptions>\r\n  // ) {\r\n  //   const { slotId } = queryCourseDto\r\n  //   const filter: Record<string, any> = {}\r\n  //   if (slotId) {\r\n  //     filter['slotId'] = slotId\r\n  //   }\r\n\r\n  //   // const validStatus = status?.filter((status) =>\r\n  //   //   [NotificationStatus.ACTIVE, NotificationStatus.INACTIVE].includes(status)\r\n  //   // )\r\n  //   // if (validStatus?.length > 0) {\r\n  //   //   filter['status'] = {\r\n  //   //     $in: validStatus\r\n  //   //   }\r\n  //   // }\r\n\r\n  //   return this.notificationRepository.model.paginate(filter, {\r\n  //     // ...pagination,\r\n  //     projection,\r\n  //     populate\r\n  //   })\r\n  // }\r\n}\r\n"]}