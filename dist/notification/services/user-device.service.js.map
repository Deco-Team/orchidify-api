{"version":3,"file":"user-device.service.js","sourceRoot":"/","sources":["notification/services/user-device.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,mFAAyF;AAGzF,iFAA+D;AAGlD,QAAA,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAA;AAgCvD,IAAM,iBAAiB,yBAAvB,MAAM,iBAAiB;IAE5B,YAEE,oBAA4D;QAA3C,yBAAoB,GAApB,oBAAoB,CAAuB;QAH7C,cAAS,GAAG,IAAI,8BAAS,CAAC,mBAAiB,CAAC,IAAI,CAAC,CAAA;IAI/D,CAAC;IAEG,KAAK,CAAC,MAAM,CAAC,mBAAwC,EAAE,OAAiC;QAC7F,OAAO,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,GAAG,mBAAmB,EAAE,EAAE,OAAO,CAAC,CAAA;IACpF,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,UAAmC,EACnC,OAAgC,EAChC,OAAkC;QAElC,OAAO,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IACvF,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,YAAoB,EACpB,UAAyC,EACzC,SAAkC;QAElC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,UAAU,EAAE;gBACV,GAAG,EAAE,YAAY;aAClB;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,cAAc,CACzB,QAAgB,EAChB,UAAyC,EACzC,SAAkC;QAElC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,UAAU,EAAE;gBACV,QAAQ;aACT;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,UAAmC,EACnC,UAAyC,EACzC,SAAkC;QAElC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YACzD,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,UAA2C,EAC3C,UAAgC,EAChC,SAAkC;QAElC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC;YAC3D,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,WAAW,CAAA;IACpB,CAAC;CACF,CAAA;AA1EY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAIR,WAAA,IAAA,eAAM,EAAC,8CAAqB,CAAC,CAAA;;GAHrB,iBAAiB,CA0E7B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IUserDeviceRepository } from '@notification/repositories/user-device.repository'\r\nimport { UserDevice, UserDeviceDocument } from '@notification/schemas/user-device.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { CreateUserDeviceDto } from '@notification/dto/user-device.dto'\r\n\r\nexport const IUserDeviceService = Symbol('IUserDeviceService')\r\n\r\nexport interface IUserDeviceService {\r\n  create(createUserDeviceDto: CreateUserDeviceDto, options?: SaveOptions | undefined): Promise<UserDeviceDocument>\r\n  findById(\r\n    userDeviceId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<UserDeviceDocument>\r\n  findByFcmToken(\r\n    fcmToken: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<UserDeviceDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<UserDevice>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<UserDeviceDocument>\r\n  findMany(\r\n    conditions: FilterQuery<UserDeviceDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<UserDeviceDocument[]>\r\n  update(\r\n    conditions: FilterQuery<UserDevice>,\r\n    payload: UpdateQuery<UserDevice>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<UserDeviceDocument>\r\n}\r\n\r\n@Injectable()\r\nexport class UserDeviceService implements IUserDeviceService {\r\n  private readonly appLogger = new AppLogger(UserDeviceService.name)\r\n  constructor(\r\n    @Inject(IUserDeviceRepository)\r\n    private readonly userDeviceRepository: IUserDeviceRepository\r\n  ) {}\r\n\r\n  public async create(createUserDeviceDto: CreateUserDeviceDto, options?: SaveOptions | undefined) {\r\n    return await this.userDeviceRepository.create({ ...createUserDeviceDto }, options)\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<UserDevice>,\r\n    payload: UpdateQuery<UserDevice>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return await this.userDeviceRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findById(\r\n    userDeviceId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const userDevice = await this.userDeviceRepository.findOne({\r\n      conditions: {\r\n        _id: userDeviceId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return userDevice\r\n  }\r\n\r\n  public async findByFcmToken(\r\n    fcmToken: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const userDevice = await this.userDeviceRepository.findOne({\r\n      conditions: {\r\n        fcmToken\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return userDevice\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<UserDevice>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const userDevice = await this.userDeviceRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return userDevice\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<UserDeviceDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const userDevices = await this.userDeviceRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return userDevices\r\n  }\r\n}\r\n"]}