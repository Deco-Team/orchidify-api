{"version":3,"file":"auth.service.js","sourceRoot":"/","sources":["auth/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { JwtService } from '@nestjs/jwt'\r\nimport { BadRequestException, Inject, Injectable } from '@nestjs/common'\r\nimport * as moment from 'moment'\r\nimport { Errors } from '@common/contracts/error'\r\nimport {\r\n  UserRole,\r\n  LearnerStatus,\r\n  InstructorStatus,\r\n  StaffStatus,\r\n  GardenManagerStatus,\r\n  RecruitmentStatus\r\n} from '@common/contracts/constant'\r\nimport { AccessTokenPayload } from '@auth/strategies/jwt-access.strategy'\r\nimport { RefreshTokenPayload } from '@auth/strategies/jwt-refresh.strategy'\r\nimport { RefreshTokenDto, TokenResponse } from '@auth/dto/token.dto'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { SuccessResponse } from '@common/contracts/dto'\r\nimport { ILearnerService } from '@learner/services/learner.service'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { LoginDto } from '@auth/dto/login.dto'\r\nimport { IInstructorService } from '@instructor/services/instructor.service'\r\nimport { IStaffService } from '@staff/services/staff.service'\r\nimport { IGardenManagerService } from '@garden-manager/services/garden-manager.service'\r\nimport { IUserTokenService } from './user-token.service'\r\nimport { LearnerRegisterDto, LearnerResendOtpDto, LearnerVerifyAccountDto } from '@auth/dto/learner-register.dto'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { IOtpService } from './otp.service'\r\nimport { Types } from 'mongoose'\r\nimport { InstructorRegisterDto } from '@auth/dto/instructor-register.dto'\r\nimport { IRecruitmentService } from '@recruitment/services/recruitment.service'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { IReportService } from '@report/services/report.service'\r\nimport { ReportTag, ReportType } from '@report/contracts/constant'\r\n\r\nexport interface IAuthUserService {\r\n  findByEmail(email: string, projection?: string | Record<string, any>)\r\n  findById(id: string): Promise<any>\r\n}\r\n\r\nexport const IAuthService = Symbol('IAuthService')\r\n\r\nexport interface IAuthService {\r\n  login(loginDto: LoginDto, role: UserRole): Promise<TokenResponse>\r\n  logout(refreshTokenDto: RefreshTokenDto): Promise<SuccessResponse>\r\n  refreshToken(id: string, role: UserRole, refreshToken: string): Promise<TokenResponse>\r\n\r\n  registerByInstructor(instructorRegisterDto: InstructorRegisterDto): Promise<SuccessResponse>\r\n\r\n  registerByLearner(learnerRegisterDto: LearnerRegisterDto): Promise<SuccessResponse>\r\n  verifyOtpByLearner(learnerVerifyAccountDto: LearnerVerifyAccountDto): Promise<SuccessResponse>\r\n  resendOtpByLearner(learnerResendOtpDto: LearnerResendOtpDto): Promise<SuccessResponse>\r\n}\r\n\r\n@Injectable()\r\nexport class AuthService implements IAuthService {\r\n  constructor(\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService,\r\n    @Inject(IInstructorService)\r\n    private readonly instructorService: IInstructorService,\r\n    @Inject(IStaffService)\r\n    private readonly staffService: IStaffService,\r\n    @Inject(IGardenManagerService)\r\n    private readonly gardenManagerService: IGardenManagerService,\r\n    @Inject(IUserTokenService)\r\n    private readonly userTokenService: IUserTokenService,\r\n    @Inject(IOtpService)\r\n    private readonly otpService: IOtpService,\r\n    @Inject(IRecruitmentService)\r\n    private readonly recruitmentService: IRecruitmentService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    private readonly jwtService: JwtService,\r\n    private readonly helperService: HelperService,\r\n    private readonly configService: ConfigService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n    @Inject(IReportService)\r\n    private readonly reportService: IReportService\r\n  ) {}\r\n\r\n  private readonly authUserServiceMap: Record<UserRole, IAuthUserService> = {\r\n    [UserRole.LEARNER]: this.learnerService,\r\n    [UserRole.INSTRUCTOR]: this.instructorService,\r\n    [UserRole.STAFF]: this.staffService,\r\n    [UserRole.ADMIN]: this.staffService,\r\n    [UserRole.GARDEN_MANAGER]: this.gardenManagerService\r\n  }\r\n\r\n  public async login(loginDto: LoginDto, role: UserRole): Promise<TokenResponse> {\r\n    const user = await this.authUserServiceMap[role].findByEmail(loginDto.email, '+password')\r\n    if (!user) throw new AppException(Errors.WRONG_EMAIL_OR_PASSWORD)\r\n    if (user.status === LearnerStatus.UNVERIFIED) throw new AppException(Errors.UNVERIFIED_ACCOUNT)\r\n    if (\r\n      [LearnerStatus.INACTIVE, InstructorStatus.INACTIVE, StaffStatus.INACTIVE, GardenManagerStatus.INACTIVE].includes(\r\n        user.status\r\n      )\r\n    )\r\n      throw new AppException(Errors.INACTIVE_ACCOUNT)\r\n\r\n    const isPasswordMatch = await this.helperService.comparePassword(loginDto.password, user.password)\r\n    if (!isPasswordMatch) throw new BadRequestException(Errors.WRONG_EMAIL_OR_PASSWORD.message)\r\n\r\n    const userRole = user.role ?? role\r\n    const accessTokenPayload: AccessTokenPayload = { sub: user._id, role: userRole, name: user.name }\r\n    const refreshTokenPayload: RefreshTokenPayload = { sub: user._id, role: userRole }\r\n\r\n    const tokens = this.generateTokens(accessTokenPayload, refreshTokenPayload)\r\n\r\n    await this.userTokenService.create({ userId: user._id, role: userRole, refreshToken: tokens.refreshToken })\r\n    return tokens\r\n  }\r\n\r\n  async logout(refreshTokenDto: RefreshTokenDto) {\r\n    await this.userTokenService.disableRefreshToken(refreshTokenDto.refreshToken)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  public async refreshToken(id: string, role: UserRole, refreshToken: string): Promise<TokenResponse> {\r\n    const userToken = await this.userTokenService.findByRefreshToken(refreshToken)\r\n    if (!userToken || userToken.enabled === false) throw new AppException(Errors.REFRESH_TOKEN_INVALID)\r\n\r\n    const user = await this.authUserServiceMap[role].findById(id)\r\n    if (!user) throw new AppException(Errors.REFRESH_TOKEN_INVALID)\r\n\r\n    const accessTokenPayload: AccessTokenPayload = { sub: user._id, role, name: user.name }\r\n    const refreshTokenPayload: RefreshTokenPayload = { sub: user._id, role }\r\n    const tokens = this.generateTokens(accessTokenPayload, refreshTokenPayload)\r\n\r\n    await this.userTokenService.update({ _id: userToken._id }, { refreshToken: tokens.refreshToken })\r\n    return tokens\r\n  }\r\n\r\n  async registerByLearner(learnerRegisterDto: LearnerRegisterDto): Promise<SuccessResponse> {\r\n    const existedLearner = await this.learnerService.findByEmail(learnerRegisterDto.email)\r\n    if (existedLearner) throw new AppException(Errors.EMAIL_ALREADY_EXIST)\r\n\r\n    const password = await this.helperService.hashPassword(learnerRegisterDto.password)\r\n\r\n    const learner = await this.learnerService.create({\r\n      name: learnerRegisterDto.name,\r\n      email: learnerRegisterDto.email,\r\n      // dateOfBirth: learnerRegisterDto.dateOfBirth,\r\n      // phone: learnerRegisterDto.phone,\r\n      status: LearnerStatus.UNVERIFIED,\r\n      password\r\n    })\r\n\r\n    const code = this.helperService.generateRandomString(6)\r\n    await this.otpService.create({\r\n      code,\r\n      userId: new Types.ObjectId(learner._id),\r\n      role: UserRole.LEARNER,\r\n      expiredAt: new Date(Date.now() + 5 * 60000)\r\n    })\r\n\r\n    this.notificationService.sendMail({\r\n      to: learner.email,\r\n      subject: `[Orchidify] Account Verification`,\r\n      template: 'learner/verify-account',\r\n      context: {\r\n        code,\r\n        name: learner.name,\r\n        expirationMinutes: 5\r\n      }\r\n    })\r\n\r\n    // update learner report\r\n    this.updateReportWhenLearnerRegistered()\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  public async verifyOtpByLearner(learnerVerifyAccountDto: LearnerVerifyAccountDto): Promise<SuccessResponse> {\r\n    const learner = await this.learnerService.findByEmail(learnerVerifyAccountDto.email)\r\n    if (!learner) throw new AppException(Errors.LEARNER_NOT_FOUND)\r\n    if (learner.status === LearnerStatus.INACTIVE) throw new AppException(Errors.INACTIVE_ACCOUNT)\r\n    if (learner.status === LearnerStatus.ACTIVE) return new SuccessResponse(true)\r\n\r\n    const otp = await this.otpService.findByCode(learnerVerifyAccountDto.code)\r\n    if (!otp || otp.userId?.toString() !== learner._id?.toString() || otp.role !== UserRole.LEARNER)\r\n      throw new AppException(Errors.WRONG_OTP_CODE)\r\n    if (otp.expiredAt < new Date()) throw new AppException(Errors.OTP_CODE_IS_EXPIRED)\r\n\r\n    await Promise.all([\r\n      this.learnerService.update({ _id: learner._id }, { status: LearnerStatus.ACTIVE }),\r\n      this.otpService.clearOtp(learnerVerifyAccountDto.code),\r\n      this.updateReportWhenLearnerVerified()\r\n    ])\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async resendOtpByLearner(learnerResendOtpDto: LearnerResendOtpDto): Promise<SuccessResponse> {\r\n    const learner = await this.learnerService.findByEmail(learnerResendOtpDto.email)\r\n    if (!learner) throw new AppException(Errors.LEARNER_NOT_FOUND)\r\n    if (learner.status === LearnerStatus.INACTIVE) throw new AppException(Errors.INACTIVE_ACCOUNT)\r\n    if (learner.status === LearnerStatus.ACTIVE) return new SuccessResponse(true)\r\n\r\n    const resendOtpCodeLimit = Number((await this.settingService.findByKey(SettingKey.ResendOtpCodeLimit)).value) || 5\r\n    const otp = await this.otpService.findByUserIdAndRole(learner._id, UserRole.LEARNER)\r\n    if (otp.__v >= resendOtpCodeLimit && moment(otp['updatedAt']).isSame(new Date(), 'day'))\r\n      throw new AppException(Errors.RESEND_OTP_CODE_LIMITED)\r\n\r\n    const code = this.helperService.generateRandomString(6)\r\n    otp.code = code\r\n    otp.expiredAt = new Date(Date.now() + 5 * 60000)\r\n    otp.__v++\r\n    await otp.save()\r\n\r\n    // Send email contain OTP to learner\r\n    this.notificationService.sendMail({\r\n      to: learner.email,\r\n      subject: `[Orchidify] Resend Account Verification`,\r\n      template: 'learner/verify-account',\r\n      context: {\r\n        code,\r\n        name: learner.name,\r\n        expirationMinutes: 5\r\n      }\r\n    })\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async registerByInstructor(instructorRegisterDto: InstructorRegisterDto): Promise<SuccessResponse> {\r\n    const existedInstructor = await this.instructorService.findByEmail(instructorRegisterDto.email)\r\n    if (existedInstructor) throw new AppException(Errors.EMAIL_ALREADY_EXIST)\r\n\r\n    const inProgressingRecruitment = await this.recruitmentService.findOneByApplicationEmailAndStatus(\r\n      instructorRegisterDto.email,\r\n      [RecruitmentStatus.PENDING, RecruitmentStatus.INTERVIEWING, RecruitmentStatus.SELECTED]\r\n    )\r\n    if (inProgressingRecruitment) throw new AppException(Errors.INSTRUCTOR_HAS_IN_PROGRESSING_APPLICATIONS)\r\n\r\n    await this.recruitmentService.create({\r\n      applicationInfo: instructorRegisterDto,\r\n      status: RecruitmentStatus.PENDING,\r\n      histories: [\r\n        {\r\n          status: RecruitmentStatus.PENDING,\r\n          timestamp: new Date()\r\n        }\r\n      ]\r\n    })\r\n\r\n    this.notificationService.sendMail({\r\n      to: instructorRegisterDto.email,\r\n      subject: `[Orchidify] Confirmation of receipt of application`,\r\n      template: 'viewer/register-instructor-success',\r\n      context: {\r\n        name: instructorRegisterDto.name,\r\n        // TODO: save setting\r\n        daysToRespond: 7\r\n      }\r\n    })\r\n\r\n    this.updateReportWhenInstructorRegistered()\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  // =============================================================== //\r\n  //                         Private method\r\n  // =============================================================== //\r\n\r\n  private generateTokens(accessTokenPayload: AccessTokenPayload, refreshTokenPayload: RefreshTokenPayload) {\r\n    return {\r\n      accessToken: this.jwtService.sign(accessTokenPayload, {\r\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\r\n        expiresIn: this.configService.get('JWT_ACCESS_EXPIRATION')\r\n      }),\r\n      refreshToken: this.jwtService.sign(refreshTokenPayload, {\r\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\r\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION')\r\n      })\r\n    }\r\n  }\r\n\r\n  private updateReportWhenLearnerRegistered() {\r\n    // update learner report\r\n    this.reportService.update(\r\n      { type: ReportType.LearnerSum, tag: ReportTag.System },\r\n      {\r\n        $inc: {\r\n          'data.quantity': 1,\r\n          [`data.${LearnerStatus.UNVERIFIED}.quantity`]: 1\r\n        }\r\n      }\r\n    )\r\n\r\n    // update learner sum by month report\r\n    const month = new Date().getMonth() + 1\r\n    const year = new Date().getFullYear()\r\n    this.reportService.update(\r\n      { type: ReportType.LearnerSumByMonth, tag: ReportTag.System, 'data.year': year },\r\n      {\r\n        $inc: {\r\n          [`data.${month}.quantity`]: 1\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  private updateReportWhenLearnerVerified() {\r\n    // update learner report\r\n    this.reportService.update(\r\n      { type: ReportType.LearnerSum, tag: ReportTag.System },\r\n      {\r\n        $inc: {\r\n          [`data.${LearnerStatus.UNVERIFIED}.quantity`]: -1,\r\n          [`data.${LearnerStatus.ACTIVE}.quantity`]: 1\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  private updateReportWhenInstructorRegistered() {\r\n    // update recruitment report\r\n    this.reportService.update(\r\n      { type: ReportType.RecruitmentApplicationSum, tag: ReportTag.System },\r\n      {\r\n        $inc: {\r\n          'data.quantity': 1\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n"]}