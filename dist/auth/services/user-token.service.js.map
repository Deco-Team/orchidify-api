{"version":3,"file":"user-token.service.js","sourceRoot":"/","sources":["auth/services/user-token.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,iFAA+E;AAMlE,QAAA,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAA;AAerD,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAEmB,mBAAyC;QAAzC,wBAAmB,GAAnB,mBAAmB,CAAsB;IACzD,CAAC;IAEG,MAAM,CAAC,kBAAsC,EAAE,OAAiC;QACrF,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;IACrE,CAAC;IAEM,MAAM,CACX,UAAkC,EAClC,OAA+B,EAC/B,OAAkC;QAElC,OAAO,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAChF,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,YAAoB;QAClD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACvD,UAAU,EAAE;gBACV,YAAY;gBACZ,OAAO,EAAE,IAAI;aACd;SACF,CAAC,CAAA;QACF,OAAO,SAAS,CAAA;IAClB,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,YAAoB;QAC5C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAC/D;YACE,YAAY;SACb,EACD;YACE,IAAI,EAAE;gBACJ,OAAO,EAAE,KAAK;aACf;SACF,CACF,CAAA;QACD,OAAO,SAAS,CAAA;IAClB,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,MAAsB,EAAE,IAAc;QACtE,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;YACxC,MAAM;YACN,IAAI;SACL,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AAhDY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,4CAAoB,CAAC,CAAA;;GAFpB,gBAAgB,CAgD5B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { IUserTokenRepository } from '@auth/repositories/user-token.repository'\r\nimport { UserToken } from '@auth/schemas/user-token.schema'\r\nimport { FilterQuery, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreateUserTokenDto } from '@auth/dto/user-token.dto'\r\nimport { UserRole } from '@common/contracts/constant'\r\n\r\nexport const IUserTokenService = Symbol('IUserTokenService')\r\n\r\nexport interface IUserTokenService {\r\n  create(createUserTokenDto: CreateUserTokenDto, options?: SaveOptions | undefined): Promise<UserToken>\r\n  update(\r\n    conditions: FilterQuery<UserToken>,\r\n    payload: UpdateQuery<UserToken>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<UserToken>\r\n  findByRefreshToken(refreshToken: string): Promise<UserToken>\r\n  disableRefreshToken(refreshToken: string): Promise<UserToken>\r\n  clearAllRefreshTokensOfUser(userId: Types.ObjectId, role: UserRole): Promise<void>\r\n}\r\n\r\n@Injectable()\r\nexport class UserTokenService implements IUserTokenService {\r\n  constructor(\r\n    @Inject(IUserTokenRepository)\r\n    private readonly userTokenRepository: IUserTokenRepository\r\n  ) {}\r\n\r\n  public create(createUserTokenDto: CreateUserTokenDto, options?: SaveOptions | undefined): Promise<UserToken> {\r\n    return this.userTokenRepository.create(createUserTokenDto, options)\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<UserToken>,\r\n    payload: UpdateQuery<UserToken>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<UserToken> {\r\n    return this.userTokenRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findByRefreshToken(refreshToken: string): Promise<UserToken> {\r\n    const userToken = await this.userTokenRepository.findOne({\r\n      conditions: {\r\n        refreshToken,\r\n        enabled: true\r\n      }\r\n    })\r\n    return userToken\r\n  }\r\n\r\n  async disableRefreshToken(refreshToken: string): Promise<UserToken> {\r\n    const userToken = await this.userTokenRepository.findOneAndUpdate(\r\n      {\r\n        refreshToken\r\n      },\r\n      {\r\n        $set: {\r\n          enabled: false\r\n        }\r\n      }\r\n    )\r\n    return userToken\r\n  }\r\n\r\n  async clearAllRefreshTokensOfUser(userId: Types.ObjectId, role: UserRole): Promise<void> {\r\n    await this.userTokenRepository.deleteMany({\r\n      userId,\r\n      role\r\n    })\r\n  }\r\n}\r\n"]}