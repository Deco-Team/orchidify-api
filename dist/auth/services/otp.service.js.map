{"version":3,"file":"otp.service.js","sourceRoot":"/","sources":["auth/services/otp.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,mEAAkE;AAKrD,QAAA,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,CAAA;AAezC,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,YAEmB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IAC7C,CAAC;IAEG,MAAM,CAAC,YAA0B,EAAE,OAAiC;QACzE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;IACzD,CAAC;IAEM,MAAM,CACX,UAA4B,EAC5B,OAAyB,EACzB,OAAkC;QAElC,OAAO,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAC1E,CAAC;IAEM,UAAU,CAAC,IAAY;QAC5B,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YAChC,UAAU,EAAE;gBACV,IAAI;aACL;SACF,CAAC,CAAA;IACJ,CAAC;IAED,mBAAmB,CAAC,MAAc,EAAE,IAAc;QAChD,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YAChC,UAAU,EAAE;gBACV,MAAM;gBACN,IAAI;aACL;SACF,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAAY;QACzB,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC;YACvC,IAAI;SACL,CAAC,CAAA;QACF,OAAM;IACR,CAAC;CACF,CAAA;AAzCY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,+BAAc,CAAC,CAAA;;GAFd,UAAU,CAyCtB","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { FilterQuery, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\nimport { IOtpRepository } from '@auth/repositories/otp.repository'\r\nimport { Otp, OtpDocument } from '@auth/schemas/otp.schema'\r\nimport { CreateOtpDto } from '@auth/dto/otp.dto'\r\nimport { UserRole } from '@common/contracts/constant'\r\n\r\nexport const IOtpService = Symbol('IOtpService')\r\n\r\nexport interface IOtpService {\r\n  create(createOtpDto: CreateOtpDto, options?: SaveOptions | undefined): Promise<OtpDocument>\r\n  update(\r\n    conditions: FilterQuery<Otp>,\r\n    payload: UpdateQuery<Otp>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<OtpDocument>\r\n  findByCode(code: string): Promise<OtpDocument>\r\n  findByUserIdAndRole(userId: string, role: UserRole): Promise<OtpDocument>\r\n  clearOtp(code: string): void\r\n}\r\n\r\n@Injectable()\r\nexport class OtpService implements IOtpService {\r\n  constructor(\r\n    @Inject(IOtpRepository)\r\n    private readonly otpRepository: IOtpRepository\r\n  ) {}\r\n\r\n  public create(createOtpDto: CreateOtpDto, options?: SaveOptions | undefined): Promise<OtpDocument> {\r\n    return this.otpRepository.create(createOtpDto, options)\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<Otp>,\r\n    payload: UpdateQuery<Otp>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<OtpDocument> {\r\n    return this.otpRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public findByCode(code: string): Promise<OtpDocument> {\r\n    return this.otpRepository.findOne({\r\n      conditions: {\r\n        code\r\n      }\r\n    })\r\n  }\r\n\r\n  findByUserIdAndRole(userId: string, role: UserRole): Promise<OtpDocument> {\r\n    return this.otpRepository.findOne({\r\n      conditions: {\r\n        userId,\r\n        role\r\n      }\r\n    })\r\n  }\r\n\r\n  async clearOtp(code: string) {\r\n    await this.otpRepository.model.deleteOne({\r\n      code\r\n    })\r\n    return\r\n  }\r\n}\r\n"]}