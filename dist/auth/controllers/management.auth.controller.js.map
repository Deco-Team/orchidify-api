{"version":3,"file":"management.auth.controller.js","sourceRoot":"/","sources":["auth/controllers/management.auth.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+E;AAC/E,6CAAiH;AACjH,2DAA0D;AAC1D,gDAAkE;AAClE,oDAA0E;AAC1E,gDAAwE;AACxE,8DAAqD;AACrD,6DAA0D;AAC1D,wDAAgD;AAChD,2FAA4E;AAKrE,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IACnC,YAEmB,WAAyB;QAAzB,gBAAW,GAAX,WAAW,CAAc;IACzC,CAAC;IAQJ,KAAK,CAAS,QAA4B;QACxC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;IACxD,CAAC;IAOK,AAAN,KAAK,CAAC,MAAM,CAAS,eAAgC;QACnD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;IACvD,CAAC;IAUD,YAAY,CAAQ,GAAG;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAA;IAC7F,CAAC;CACF,CAAA;AApCY,4DAAwB;AAYnC;IANC,IAAA,aAAI,EAAC,OAAO,CAAC;IACb,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,SAAS,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,cAAc,EAAE;KAClF,CAAC;IACD,IAAA,4BAAkB,EAAC,EAAE,IAAI,EAAE,6BAAiB,EAAE,CAAC;IAC/C,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,uBAAuB,EAAE,cAAM,CAAC,gBAAgB,CAAC,CAAC;IACrE,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAW,8BAAkB;;qDAEzC;AAOK;IALL,IAAA,aAAI,EAAC,QAAQ,CAAC;IACd,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,SAAS,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,cAAc,EAAE;KAClF,CAAC;IACD,IAAA,4BAAkB,EAAC,EAAE,IAAI,EAAE,yBAAmB,EAAE,CAAC;IACpC,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAkB,2BAAe;;sDAEpD;AAUD;IARC,IAAA,aAAI,EAAC,SAAS,CAAC;IACf,IAAA,kBAAS,EAAC,6BAAY,CAAC,aAAa,CAAC;IACrC,IAAA,uBAAa,GAAE;IACf,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,SAAS,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,KAAK,KAAK,mBAAQ,CAAC,cAAc,EAAE;KAClF,CAAC;IACD,IAAA,4BAAkB,EAAC,EAAE,IAAI,EAAE,6BAAiB,EAAE,CAAC;IAC/C,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,qBAAqB,CAAC,CAAC;IACnC,WAAA,IAAA,YAAG,GAAE,CAAA;;;;4DAElB;mCAnCU,wBAAwB;IAHpC,IAAA,iBAAO,EAAC,mBAAmB,CAAC;IAC5B,IAAA,mBAAU,EAAC,YAAY,CAAC;IACxB,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAG1C,WAAA,IAAA,eAAM,EAAC,2BAAY,CAAC,CAAA;;GAFZ,wBAAwB,CAoCpC","sourcesContent":["import { Body, Controller, Inject, Post, Req, UseGuards } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiCreatedResponse, ApiOperation, ApiTags } from '@nestjs/swagger'\r\nimport { IAuthService } from '@auth/services/auth.service'\r\nimport { LoginDto, ManagementLoginDto } from '@auth/dto/login.dto'\r\nimport { ErrorResponse, SuccessDataResponse } from '@common/contracts/dto'\r\nimport { RefreshTokenDto, TokenDataResponse } from '@auth/dto/token.dto'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\n\r\n@ApiTags('Auth - Management')\r\n@Controller('management')\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\nexport class ManagementAuthController {\r\n  constructor(\r\n    @Inject(IAuthService)\r\n    private readonly authService: IAuthService\r\n  ) {}\r\n\r\n  @Post('login')\r\n  @ApiOperation({\r\n    summary: `role: ${UserRole.STAFF}, ${UserRole.ADMIN}, ${UserRole.GARDEN_MANAGER}`\r\n  })\r\n  @ApiCreatedResponse({ type: TokenDataResponse })\r\n  @ApiErrorResponse([Errors.WRONG_EMAIL_OR_PASSWORD, Errors.INACTIVE_ACCOUNT])\r\n  login(@Body() loginDto: ManagementLoginDto) {\r\n    return this.authService.login(loginDto, loginDto.role)\r\n  }\r\n\r\n  @Post('logout')\r\n  @ApiOperation({\r\n    summary: `role: ${UserRole.STAFF}, ${UserRole.ADMIN}, ${UserRole.GARDEN_MANAGER}`\r\n  })\r\n  @ApiCreatedResponse({ type: SuccessDataResponse })\r\n  async logout(@Body() refreshTokenDto: RefreshTokenDto) {\r\n    return await this.authService.logout(refreshTokenDto)\r\n  }\r\n\r\n  @Post('refresh')\r\n  @UseGuards(JwtAuthGuard.REFRESH_TOKEN)\r\n  @ApiBearerAuth()\r\n  @ApiOperation({\r\n    summary: `role: ${UserRole.STAFF}, ${UserRole.ADMIN}, ${UserRole.GARDEN_MANAGER}`\r\n  })\r\n  @ApiCreatedResponse({ type: TokenDataResponse })\r\n  @ApiErrorResponse([Errors.REFRESH_TOKEN_INVALID])\r\n  refreshToken(@Req() req) {\r\n    return this.authService.refreshToken(req.user?._id, req.user?.role, req.user?.refreshToken)\r\n  }\r\n}\r\n"]}