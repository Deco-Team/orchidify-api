{"version":3,"file":"management.recruitment.controller.js","sourceRoot":"/","sources":["recruitment/controllers/management.recruitment.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller, Get, UseGuards, Inject, Query, Param, Patch, Req, Body } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse, PaginationQuery, SuccessDataResponse } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { RecruitmentStatus, UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { IRecruitmentService } from '@recruitment/services/recruitment.service'\r\nimport {\r\n  RecruitmentDetailDataResponse,\r\n  RecruitmentListDataResponse,\r\n  QueryRecruitmentDto\r\n} from '@recruitment/dto/view-recruitment.dto'\r\nimport { RECRUITMENT_DETAIL_PROJECTION } from '@recruitment/contracts/constant'\r\nimport { ProcessRecruitmentApplicationDto } from '@recruitment/dto/process-recruitment-application.dto'\r\nimport { RejectClassRequestDto } from '@class-request/dto/reject-class-request.dto'\r\nimport { RejectRecruitmentProcessDto } from '@recruitment/dto/reject-recruitment-process.dto'\r\n\r\n@ApiTags('Recruitment - Management')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Controller('management')\r\nexport class ManagementRecruitmentController {\r\n  constructor(\r\n    @Inject(IRecruitmentService)\r\n    private readonly recruitmentService: IRecruitmentService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] View Recruitment List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: RecruitmentListDataResponse })\r\n  @Roles(UserRole.STAFF)\r\n  @Get()\r\n  async list(@Pagination() pagination: PaginationParams, @Query() queryRecruitmentDto: QueryRecruitmentDto) {\r\n    return await this.recruitmentService.list(pagination, queryRecruitmentDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] View Recruitment Detail`\r\n  })\r\n  @ApiOkResponse({ type: RecruitmentDetailDataResponse })\r\n  @ApiErrorResponse([Errors.RECRUITMENT_NOT_FOUND])\r\n  @Roles(UserRole.STAFF)\r\n  @Get(':id([0-9a-f]{24})')\r\n  async getDetail(@Param('id') recruitmentId: string) {\r\n    const recruitment = await this.recruitmentService.findById(recruitmentId, RECRUITMENT_DETAIL_PROJECTION, [\r\n      {\r\n        path: 'handledBy',\r\n        select: ['name']\r\n      }\r\n    ])\r\n    if (!recruitment) throw new AppException(Errors.RECRUITMENT_NOT_FOUND)\r\n\r\n    return recruitment\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Process Recruitment Application (change status to ${RecruitmentStatus.INTERVIEWING})`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.RECRUITMENT_NOT_FOUND, Errors.RECRUITMENT_STATUS_INVALID])\r\n  @Roles(UserRole.STAFF)\r\n  @Patch(':id([0-9a-f]{24})/process-application')\r\n  async processApplication(\r\n    @Req() req,\r\n    @Param('id') recruitmentId: string,\r\n    @Body() processRecruitmentApplicationDto: ProcessRecruitmentApplicationDto\r\n  ) {\r\n    const user = _.get(req, 'user')\r\n    return this.recruitmentService.processRecruitmentApplication(recruitmentId, processRecruitmentApplicationDto, user)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Process Recruitment Interview (change status to ${RecruitmentStatus.SELECTED})`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([\r\n    Errors.RECRUITMENT_NOT_FOUND,\r\n    Errors.RECRUITMENT_STATUS_INVALID,\r\n    Errors.RECRUITMENT_IS_IN_CHARGED_BY_ANOTHER_STAFF\r\n  ])\r\n  @Roles(UserRole.STAFF)\r\n  @Patch(':id([0-9a-f]{24})/process-interview')\r\n  async processInterview(@Req() req, @Param('id') recruitmentId: string) {\r\n    const user = _.get(req, 'user')\r\n    return this.recruitmentService.processRecruitmentInterview(recruitmentId, user)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Reject Recruitment Process`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([\r\n    Errors.CLASS_REQUEST_NOT_FOUND,\r\n    Errors.CLASS_REQUEST_STATUS_INVALID,\r\n    Errors.RECRUITMENT_IS_IN_CHARGED_BY_ANOTHER_STAFF\r\n  ])\r\n  @Roles(UserRole.STAFF)\r\n  @Patch(':id([0-9a-f]{24})/reject-process')\r\n  async reject(\r\n    @Req() req,\r\n    @Param('id') recruitmentId: string,\r\n    @Body() rejectRecruitmentProcessDto: RejectRecruitmentProcessDto\r\n  ) {\r\n    const user = _.get(req, 'user')\r\n    return this.recruitmentService.rejectRecruitmentProcess(recruitmentId, rejectRecruitmentProcessDto, user)\r\n  }\r\n}\r\n"]}