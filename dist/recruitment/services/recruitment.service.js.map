{"version":3,"file":"recruitment.service.js","sourceRoot":"/","sources":["recruitment/services/recruitment.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RecruitmentStatus } from '@common/contracts/constant'\r\nimport { SuccessResponse, UserAuth } from '@common/contracts/dto'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { Injectable, Inject } from '@nestjs/common'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { IQueueProducerService } from '@queue/services/queue-producer.service'\r\nimport { RECRUITMENT_LIST_PROJECTION } from '@recruitment/contracts/constant'\r\nimport { ProcessRecruitmentApplicationDto } from '@recruitment/dto/process-recruitment-application.dto'\r\nimport { RejectRecruitmentProcessDto } from '@recruitment/dto/reject-recruitment-process.dto'\r\nimport { QueryRecruitmentDto } from '@recruitment/dto/view-recruitment.dto'\r\nimport { IRecruitmentRepository } from '@recruitment/repositories/recruitment.repository'\r\nimport { Recruitment, RecruitmentDocument } from '@recruitment/schemas/recruitment.schema'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport * as moment from 'moment-timezone'\r\nimport { FilterQuery, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\n\r\nexport const IRecruitmentService = Symbol('IRecruitmentService')\r\n\r\nexport interface IRecruitmentService {\r\n  create(createRecruitmentDto: any, options?: SaveOptions | undefined): Promise<RecruitmentDocument>\r\n  findById(recruitmentId: string, projection?: string | Record<string, any>): Promise<RecruitmentDocument>\r\n  findOneByApplicationEmailAndStatus(\r\n    applicationEmail: string,\r\n    status: RecruitmentStatus[]\r\n  ): Promise<RecruitmentDocument>\r\n  findByHandledByAndStatus(handledBy: string, status: RecruitmentStatus[]): Promise<RecruitmentDocument[]>\r\n  update(\r\n    conditions: FilterQuery<Recruitment>,\r\n    payload: UpdateQuery<Recruitment>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<RecruitmentDocument>\r\n  list(pagination: PaginationParams, queryRecruitmentDto: QueryRecruitmentDto)\r\n  processRecruitmentApplication(\r\n    recruitmentId: string,\r\n    processRecruitmentApplicationDto: ProcessRecruitmentApplicationDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  processRecruitmentInterview(recruitmentId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  rejectRecruitmentProcess(\r\n    recruitmentId: string,\r\n    rejectRecruitmentProcessDto: RejectRecruitmentProcessDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  expiredRecruitmentProcess(recruitmentId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n}\r\n\r\n@Injectable()\r\nexport class RecruitmentService implements IRecruitmentService {\r\n  private readonly appLogger = new AppLogger(RecruitmentService.name)\r\n  constructor(\r\n    private readonly helperService: HelperService,\r\n    @Inject(IRecruitmentRepository)\r\n    private readonly recruitmentRepository: IRecruitmentRepository,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    @Inject(IQueueProducerService)\r\n    private readonly queueProducerService: IQueueProducerService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n  ) {}\r\n\r\n  public async create(createRecruitmentDto: any, options?: SaveOptions | undefined) {\r\n    const recruitment = await this.recruitmentRepository.create(createRecruitmentDto, options)\r\n\r\n    this.addAutoExpiredJobWhenCreateRecruitmentApplication(recruitment)\r\n    return recruitment\r\n  }\r\n\r\n  public async findById(recruitmentId: string, projection?: string | Record<string, any>) {\r\n    const recruitment = await this.recruitmentRepository.findOne({\r\n      conditions: {\r\n        _id: recruitmentId\r\n      },\r\n      projection,\r\n      populates: [\r\n        {\r\n          path: 'handledBy',\r\n          select: ['name']\r\n        }\r\n      ]\r\n    })\r\n    return recruitment\r\n  }\r\n\r\n  findOneByApplicationEmailAndStatus(\r\n    applicationEmail: string,\r\n    status: RecruitmentStatus[]\r\n  ): Promise<RecruitmentDocument> {\r\n    return this.recruitmentRepository.findOne({\r\n      conditions: {\r\n        'applicationInfo.email': applicationEmail,\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  findByHandledByAndStatus(handledBy: string, status: RecruitmentStatus[]): Promise<RecruitmentDocument[]> {\r\n    return this.recruitmentRepository.findMany({\r\n      conditions: {\r\n        handledBy: new Types.ObjectId(handledBy),\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<Recruitment>,\r\n    payload: UpdateQuery<Recruitment>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.recruitmentRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryLearnerDto: QueryRecruitmentDto,\r\n    projection = RECRUITMENT_LIST_PROJECTION\r\n  ) {\r\n    const { name, email, status } = queryLearnerDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [\r\n        RecruitmentStatus.PENDING,\r\n        RecruitmentStatus.INTERVIEWING,\r\n        RecruitmentStatus.SELECTED,\r\n        RecruitmentStatus.EXPIRED,\r\n        RecruitmentStatus.REJECTED\r\n      ].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (email) textSearch += ' ' + email.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.recruitmentRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection,\r\n      populate: [\r\n        {\r\n          path: 'handledBy',\r\n          select: ['name']\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  async processRecruitmentApplication(\r\n    recruitmentId: string,\r\n    processRecruitmentApplicationDto: ProcessRecruitmentApplicationDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { meetingUrl } = processRecruitmentApplicationDto\r\n    const { _id, role } = userAuth\r\n\r\n    // validate recruitment\r\n    const recruitment = await this.findById(recruitmentId)\r\n    if (!recruitment) throw new AppException(Errors.RECRUITMENT_NOT_FOUND)\r\n    if (recruitment.status !== RecruitmentStatus.PENDING) throw new AppException(Errors.RECRUITMENT_STATUS_INVALID)\r\n\r\n    const newRecruitment = await this.recruitmentRepository.findOneAndUpdate(\r\n      { _id: recruitmentId },\r\n      {\r\n        $set: {\r\n          status: RecruitmentStatus.INTERVIEWING,\r\n          handledBy: new Types.ObjectId(_id),\r\n          meetingUrl\r\n        },\r\n        $push: {\r\n          histories: {\r\n            status: RecruitmentStatus.INTERVIEWING,\r\n            timestamp: new Date(),\r\n            userId: new Types.ObjectId(_id),\r\n            userRole: role\r\n          }\r\n        }\r\n      },\r\n      { new: true }\r\n    )\r\n\r\n    // send notification\r\n    this.notificationService.sendMail({\r\n      to: recruitment?.applicationInfo?.email,\r\n      subject: `[Orchidify] Mời phỏng vấn vị trí Giảng viên - Orchidify`,\r\n      template: 'viewer/process-recruitment-application',\r\n      context: {\r\n        platform: 'Google Meet',\r\n        meetingUrl: meetingUrl,\r\n        name: recruitment?.applicationInfo?.name\r\n      }\r\n    })\r\n\r\n    this.updateAutoExpiredJobWhenCreateRecruitmentApplication(newRecruitment)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async processRecruitmentInterview(recruitmentId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate recruitment\r\n    const recruitment = await this.findById(recruitmentId)\r\n    if (!recruitment) throw new AppException(Errors.RECRUITMENT_NOT_FOUND)\r\n    if (recruitment.status !== RecruitmentStatus.INTERVIEWING) throw new AppException(Errors.RECRUITMENT_STATUS_INVALID)\r\n\r\n    //BR-18: Staff who verify the CV will be in charge of the recruitment process.\r\n    if (recruitment.handledBy.toString() !== _id)\r\n      throw new AppException(Errors.RECRUITMENT_IS_IN_CHARGED_BY_ANOTHER_STAFF)\r\n\r\n    await this.recruitmentRepository.findOneAndUpdate(\r\n      { _id: recruitmentId },\r\n      {\r\n        $set: {\r\n          status: RecruitmentStatus.SELECTED\r\n        },\r\n        $push: {\r\n          histories: {\r\n            status: RecruitmentStatus.SELECTED,\r\n            timestamp: new Date(),\r\n            userId: new Types.ObjectId(_id),\r\n            userRole: role\r\n          }\r\n        }\r\n      }\r\n    )\r\n    // send notification\r\n    this.notificationService.sendMail({\r\n      to: recruitment?.applicationInfo?.email,\r\n      subject: `[Orchidify] Chúc mừng bạn đã trở thành một phần của Orchidify`,\r\n      template: 'viewer/process-recruitment-interview',\r\n      context: {\r\n        name: recruitment?.applicationInfo?.name\r\n      }\r\n    })\r\n\r\n    this.queueProducerService.removeJob(QueueName.RECRUITMENT, recruitment._id?.toString())\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async rejectRecruitmentProcess(\r\n    recruitmentId: string,\r\n    rejectRecruitmentProcessDto: RejectRecruitmentProcessDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { rejectReason } = rejectRecruitmentProcessDto\r\n    const { _id, role } = userAuth\r\n\r\n    // validate recruitment\r\n    const recruitment = await this.findById(recruitmentId)\r\n    if (!recruitment) throw new AppException(Errors.RECRUITMENT_NOT_FOUND)\r\n    if ([RecruitmentStatus.PENDING, RecruitmentStatus.INTERVIEWING].includes(recruitment.status) === false)\r\n      throw new AppException(Errors.RECRUITMENT_STATUS_INVALID)\r\n\r\n    //BR-18: Staff who verify the CV will be in charge of the recruitment process.\r\n    if (recruitment.status === RecruitmentStatus.INTERVIEWING && recruitment.handledBy.toString() !== _id)\r\n      throw new AppException(Errors.RECRUITMENT_IS_IN_CHARGED_BY_ANOTHER_STAFF)\r\n\r\n    await this.recruitmentRepository.findOneAndUpdate(\r\n      { _id: recruitmentId },\r\n      {\r\n        $set: {\r\n          status: RecruitmentStatus.REJECTED,\r\n          handledBy: new Types.ObjectId(_id),\r\n          rejectReason\r\n        },\r\n        $push: {\r\n          histories: {\r\n            status: RecruitmentStatus.REJECTED,\r\n            timestamp: new Date(),\r\n            userId: new Types.ObjectId(_id),\r\n            userRole: role\r\n          }\r\n        }\r\n      }\r\n    )\r\n    // send notification\r\n    const mailTemplate =\r\n      recruitment.status === RecruitmentStatus.PENDING\r\n        ? 'viewer/reject-recruitment-application.ejs'\r\n        : 'viewer/reject-recruitment-interview.ejs'\r\n    this.notificationService.sendMail({\r\n      to: recruitment?.applicationInfo?.email,\r\n      subject: `[Orchidify] Thông báo về kết quả ứng tuyển giảng viên`,\r\n      template: mailTemplate,\r\n      context: {\r\n        name: recruitment?.applicationInfo?.name\r\n      }\r\n    })\r\n\r\n    await this.queueProducerService.removeJob(QueueName.RECRUITMENT, recruitment._id?.toString())\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async expiredRecruitmentProcess(recruitmentId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { role } = userAuth\r\n\r\n    // validate recruitment\r\n    const recruitment = await this.findById(recruitmentId)\r\n    if (!recruitment) throw new AppException(Errors.RECRUITMENT_NOT_FOUND)\r\n    if ([RecruitmentStatus.PENDING, RecruitmentStatus.INTERVIEWING].includes(recruitment.status) === false)\r\n      throw new AppException(Errors.RECRUITMENT_STATUS_INVALID)\r\n\r\n    await this.recruitmentRepository.findOneAndUpdate(\r\n      { _id: recruitmentId },\r\n      {\r\n        $set: {\r\n          status: RecruitmentStatus.EXPIRED\r\n        },\r\n        $push: {\r\n          histories: {\r\n            status: RecruitmentStatus.EXPIRED,\r\n            timestamp: new Date(),\r\n            userRole: role\r\n          }\r\n        }\r\n      }\r\n    )\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  private async getExpiredAt(\r\n    date: Date,\r\n    status: RecruitmentStatus.PENDING | RecruitmentStatus.INTERVIEWING\r\n  ): Promise<Date> {\r\n    const recruitmentProcessAutoExpiration = (\r\n      await this.settingService.findByKey(SettingKey.RecruitmentProcessAutoExpiration)\r\n    ).value || [7, 7]\r\n    const dateMoment = moment.tz(date, VN_TIMEZONE)\r\n\r\n    let expiredDate: moment.Moment\r\n    // BR-17: Recruitment for instructors must proceed within 14 work days (7 work days for verifying CV, 7 work days for interview and approval).\r\n    if (status === RecruitmentStatus.PENDING) {\r\n      expiredDate = dateMoment.clone().add(Number(recruitmentProcessAutoExpiration[0]) || 7, 'day')\r\n    } else {\r\n      expiredDate = dateMoment.clone().add(Number(recruitmentProcessAutoExpiration[1]) || 7, 'day')\r\n    }\r\n    let expiredAt = expiredDate.clone()\r\n\r\n    // check in weekdays\r\n    let currentDate = dateMoment.clone()\r\n    while (currentDate.isSameOrBefore(expiredDate)) {\r\n      // Sunday: isoWeekday=7\r\n      if (currentDate.clone().isoWeekday() === 7) {\r\n        expiredAt.add(1, 'day')\r\n      }\r\n      currentDate.add(1, 'day')\r\n    }\r\n\r\n    return expiredAt.toDate()\r\n  }\r\n\r\n  private async addAutoExpiredJobWhenCreateRecruitmentApplication(recruitment: Recruitment) {\r\n    try {\r\n      const expiredAt = await this.getExpiredAt(recruitment['createdAt'], RecruitmentStatus.PENDING)\r\n      const delayTime = this.helperService.getDiffTimeByMilliseconds(expiredAt)\r\n\r\n      await this.queueProducerService.addJob(\r\n        QueueName.RECRUITMENT,\r\n        JobName.RecruitmentAutoExpired,\r\n        {\r\n          recruitmentId: recruitment._id,\r\n          expiredAt\r\n        },\r\n        {\r\n          delay: delayTime,\r\n          jobId: recruitment._id.toString()\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this.appLogger.error(JSON.stringify(err))\r\n    }\r\n  }\r\n\r\n  private async updateAutoExpiredJobWhenCreateRecruitmentApplication(recruitment: Recruitment) {\r\n    try {\r\n      // Remove old job\r\n      await this.queueProducerService.removeJob(QueueName.RECRUITMENT, recruitment._id?.toString())\r\n\r\n      // Add new job with new delay time\r\n      const expiredAt = await this.getExpiredAt(recruitment['updatedAt'], RecruitmentStatus.INTERVIEWING)\r\n      const delayTime = this.helperService.getDiffTimeByMilliseconds(expiredAt)\r\n\r\n      await this.queueProducerService.addJob(\r\n        QueueName.RECRUITMENT,\r\n        JobName.RecruitmentAutoExpired,\r\n        {\r\n          recruitmentId: recruitment._id,\r\n          expiredAt\r\n        },\r\n        {\r\n          delay: delayTime,\r\n          jobId: recruitment._id.toString()\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this.appLogger.error(JSON.stringify(err))\r\n    }\r\n  }\r\n}\r\n"]}