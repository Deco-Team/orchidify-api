{"version":3,"file":"payout-request.service.js","sourceRoot":"/","sources":["payout-request/services/payout-request.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as moment from 'moment-timezone'\r\nimport * as _ from 'lodash'\r\nimport { IPayoutRequestRepository } from '@src/payout-request/repositories/payout-request.repository'\r\nimport { PayoutRequest, PayoutRequestDocument } from '@src/payout-request/schemas/payout-request.schema'\r\nimport { Connection, FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreatePayoutRequestDto } from '@payout-request/dto/create-payout-request.dto'\r\nimport { PayoutRequestStatus, StaffStatus, TransactionStatus, UserRole } from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { PAYOUT_REQUEST_LIST_PROJECTION } from '@src/payout-request/contracts/constant'\r\nimport { QueryPayoutRequestDto } from '@src/payout-request/dto/view-payout-request.dto'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { SuccessResponse, UserAuth } from '@common/contracts/dto'\r\nimport { RejectPayoutRequestDto } from '@payout-request/dto/reject-payout-request.dto'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { IQueueProducerService } from '@queue/services/queue-producer.service'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { IInstructorService } from '@instructor/services/instructor.service'\r\nimport { ITransactionService } from '@transaction/services/transaction.service'\r\nimport { BasePayoutDto } from '@transaction/dto/base.transaction.dto'\r\nimport { TransactionType } from '@transaction/contracts/constant'\r\nimport { FCMNotificationDataType } from '@notification/contracts/constant'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { IStaffService } from '@staff/services/staff.service'\r\nimport { ReportTag, ReportType } from '@report/contracts/constant'\r\nimport { IReportService } from '@report/services/report.service'\r\nimport { MarkHasMadePayoutDto } from '@payout-request/dto/mark-has-made-payout.dto'\r\n\r\nexport const IPayoutRequestService = Symbol('IPayoutRequestService')\r\n\r\nexport interface IPayoutRequestService {\r\n  createPayoutRequest(\r\n    createPayoutRequestDto: CreatePayoutRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ): Promise<PayoutRequestDocument>\r\n  findById(\r\n    payoutRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<PayoutRequestDocument>\r\n  update(\r\n    conditions: FilterQuery<PayoutRequest>,\r\n    payload: UpdateQuery<PayoutRequest>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<PayoutRequestDocument>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryPayoutRequestDto: QueryPayoutRequestDto,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  )\r\n  findMany(\r\n    conditions: FilterQuery<PayoutRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<PayoutRequestDocument[]>\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number>\r\n  cancelPayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  expirePayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  approvePayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  rejectPayoutRequest(\r\n    payoutRequestId: string,\r\n    rejectPayoutRequestDto: RejectPayoutRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  markHasMadePayout(\r\n    payoutRequestId: string,\r\n    markHasMadePayoutDto: MarkHasMadePayoutDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  getPayoutUsage({ createdBy, date }: { createdBy: string; date: Date }): Promise<number>\r\n}\r\n\r\n@Injectable()\r\nexport class PayoutRequestService implements IPayoutRequestService {\r\n  private readonly appLogger = new AppLogger(PayoutRequestService.name)\r\n  constructor(\r\n    @Inject(IPayoutRequestRepository)\r\n    private readonly payoutRequestRepository: IPayoutRequestRepository,\r\n    @Inject(IInstructorService)\r\n    private readonly instructorService: IInstructorService,\r\n    @InjectConnection() readonly connection: Connection,\r\n    @Inject(IQueueProducerService)\r\n    private readonly queueProducerService: IQueueProducerService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    private readonly helperService: HelperService,\r\n    @Inject(ITransactionService)\r\n    private readonly transactionService: ITransactionService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n    @Inject(IStaffService)\r\n    private readonly staffService: IStaffService,\r\n    @Inject(IReportService)\r\n    private readonly reportService: IReportService\r\n  ) {}\r\n\r\n  public async createPayoutRequest(createPayoutRequestDto: CreatePayoutRequestDto, options?: SaveOptions | undefined) {\r\n    const { amount, createdBy } = createPayoutRequestDto\r\n    // BR-55: Instructors can create a payout request when balance is greater than 0.\r\n    const instructor = await this.instructorService.findById(createdBy.toString())\r\n    if (instructor.balance < amount) throw new AppException(Errors.NOT_ENOUGH_BALANCE_TO_CREATE_PAYOUT_REQUEST)\r\n\r\n    let payoutRequest: PayoutRequestDocument\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        payoutRequest = await this.payoutRequestRepository.create(createPayoutRequestDto, { session })\r\n\r\n        // BR-59: When a payout request is created, the amount will be deducted from the balance.\r\n        await this.instructorService.update(\r\n          { _id: createdBy },\r\n          {\r\n            $inc: {\r\n              balance: -amount\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    this.addPayoutRequestAutoExpiredJob(payoutRequest)\r\n\r\n    // Send notification to staff\r\n    this.sendNotificationToStaffWhenPayoutRequestIsCreated({ payoutRequest })\r\n\r\n    // update payout request report\r\n    this.reportService.update(\r\n      { type: ReportType.PayoutRequestSum, tag: ReportTag.User, ownerId: new Types.ObjectId(payoutRequest.createdBy) },\r\n      {\r\n        $inc: {\r\n          'data.quantity': 1,\r\n          [`data.${PayoutRequestStatus.PENDING}.quantity`]: 1\r\n        }\r\n      }\r\n    )\r\n\r\n    return payoutRequest\r\n  }\r\n\r\n  public async findById(\r\n    payoutRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const payoutRequest = await this.payoutRequestRepository.findOne({\r\n      conditions: {\r\n        _id: payoutRequestId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return payoutRequest\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<PayoutRequest>,\r\n    payload: UpdateQuery<PayoutRequest>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.payoutRequestRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryPayoutRequestDto: QueryPayoutRequestDto,\r\n    projection = PAYOUT_REQUEST_LIST_PROJECTION,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const { status, createdBy, hasMadePayout } = queryPayoutRequestDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    if (createdBy) {\r\n      filter['createdBy'] = new Types.ObjectId(createdBy)\r\n    }\r\n\r\n    if (hasMadePayout !== undefined) {\r\n      filter['hasMadePayout'] = {\r\n        $exists: hasMadePayout\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [\r\n        PayoutRequestStatus.PENDING,\r\n        PayoutRequestStatus.APPROVED,\r\n        PayoutRequestStatus.CANCELED,\r\n        PayoutRequestStatus.EXPIRED,\r\n        PayoutRequestStatus.REJECTED\r\n      ].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    return this.payoutRequestRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection: ['-histories'],\r\n      populate: populates\r\n    })\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<PayoutRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const payoutRequests = await this.payoutRequestRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return payoutRequests\r\n  }\r\n\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number> {\r\n    const startOfDate = moment(date).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = moment(date).tz(VN_TIMEZONE).endOf('date')\r\n    return this.payoutRequestRepository.model.countDocuments({\r\n      createdBy: new Types.ObjectId(createdBy),\r\n      createdAt: {\r\n        $gte: startOfDate.toDate(),\r\n        $lte: endOfDate.toDate()\r\n      }\r\n    })\r\n  }\r\n\r\n  async cancelPayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate payout request\r\n    const payoutRequest = await this.findById(payoutRequestId)\r\n    if (!payoutRequest || payoutRequest.createdBy.toString() !== _id)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_NOT_FOUND)\r\n    if (payoutRequest.status !== PayoutRequestStatus.PENDING)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update payout request\r\n        await this.update(\r\n          { _id: payoutRequestId },\r\n          {\r\n            $set: {\r\n              status: PayoutRequestStatus.CANCELED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: PayoutRequestStatus.CANCELED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n        await this.instructorService.update(\r\n          { _id: payoutRequest.createdBy },\r\n          {\r\n            $inc: {\r\n              balance: payoutRequest.amount\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    this.queueProducerService.removeJob(QueueName.PAYOUT_REQUEST, payoutRequestId)\r\n\r\n    // update payout request report\r\n    this.reportService.update(\r\n      { type: ReportType.PayoutRequestSum, tag: ReportTag.User, ownerId: new Types.ObjectId(payoutRequest.createdBy) },\r\n      {\r\n        $inc: {\r\n          [`data.${PayoutRequestStatus.PENDING}.quantity`]: -1\r\n        }\r\n      }\r\n    )\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async approvePayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n    // validate payout request\r\n    const payoutRequest = await this.findById(payoutRequestId)\r\n    if (!payoutRequest) throw new AppException(Errors.PAYOUT_REQUEST_NOT_FOUND)\r\n    if (payoutRequest.status !== PayoutRequestStatus.PENDING)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_STATUS_INVALID)\r\n\r\n    const [payoutUsage, payoutAmountLimitPerDay] = await Promise.all([\r\n      this.getPayoutUsage({ createdBy: payoutRequest.createdBy, date: new Date() }),\r\n      this.settingService.findByKey(SettingKey.PayoutAmountLimitPerDay)\r\n    ])\r\n    //BR-57: Daily maximum amount of payout requests is 50,000,000 VND.\r\n    const payoutAmountLimit = Number(payoutAmountLimitPerDay.value) || 50_000_000\r\n    if (payoutUsage + payoutRequest.amount > payoutAmountLimit)\r\n      throw new AppException(Errors.PAYOUT_AMOUNT_LIMIT_PER_DAY)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update payout request\r\n        await this.payoutRequestRepository.findOneAndUpdate(\r\n          { _id: payoutRequestId },\r\n          {\r\n            $set: {\r\n              status: PayoutRequestStatus.APPROVED,\r\n              handledBy: new Types.ObjectId(_id)\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: PayoutRequestStatus.APPROVED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // create new payout transaction\r\n        const payoutPayload = {\r\n          id: payoutRequest._id.toString(),\r\n          code: null,\r\n          createdAt: new Date(),\r\n          status: 'OK'\r\n        }\r\n        const payout: BasePayoutDto = {\r\n          ...payoutPayload,\r\n          histories: [payoutPayload]\r\n        }\r\n        await this.transactionService.create(\r\n          {\r\n            type: TransactionType.PAYOUT,\r\n            amount: payoutRequest.amount,\r\n            debitAccount: { userRole: 'SYSTEM' as UserRole },\r\n            creditAccount: { userId: payoutRequest.createdBy, userRole: UserRole.INSTRUCTOR },\r\n            description: payoutRequest.description,\r\n            status: TransactionStatus.CAPTURED,\r\n            payout\r\n          },\r\n          {\r\n            session\r\n          }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    // send notification to instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu rút tiền của bạn đã được duyệt',\r\n      body: 'Số tiền sẽ được thanh toán sau vài ngày làm việc. Bấm để xem chi tiết.',\r\n      receiverIds: [payoutRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.PAYOUT_REQUEST,\r\n        id: payoutRequestId\r\n      }\r\n    })\r\n\r\n    this.queueProducerService.removeJob(QueueName.PAYOUT_REQUEST, payoutRequestId)\r\n\r\n    // update payout request report\r\n    this.reportService.update(\r\n      { type: ReportType.PayoutRequestSum, tag: ReportTag.User, ownerId: new Types.ObjectId(payoutRequest.createdBy) },\r\n      {\r\n        $inc: {\r\n          [`data.${PayoutRequestStatus.PENDING}.quantity`]: -1\r\n        }\r\n      }\r\n    )\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async rejectPayoutRequest(\r\n    payoutRequestId: string,\r\n    rejectPayoutRequestDto: RejectPayoutRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { rejectReason } = rejectPayoutRequestDto\r\n    const { _id, role } = userAuth\r\n\r\n    // validate payout request\r\n    const payoutRequest = await this.findById(payoutRequestId)\r\n    if (!payoutRequest) throw new AppException(Errors.PAYOUT_REQUEST_NOT_FOUND)\r\n    if (payoutRequest.status !== PayoutRequestStatus.PENDING)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update payout request\r\n        await this.update(\r\n          { _id: payoutRequestId },\r\n          {\r\n            $set: {\r\n              status: PayoutRequestStatus.REJECTED,\r\n              rejectReason,\r\n              handledBy: new Types.ObjectId(_id)\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: PayoutRequestStatus.REJECTED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n        await this.instructorService.update(\r\n          { _id: payoutRequest.createdBy },\r\n          {\r\n            $inc: {\r\n              balance: payoutRequest.amount\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu rút tiền đã bị từ chối',\r\n      body: 'Yêu cầu rút tiền chưa hợp lệ. Bấm để xem chi tiết.',\r\n      receiverIds: [payoutRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.PAYOUT_REQUEST,\r\n        id: payoutRequestId\r\n      }\r\n    })\r\n    this.queueProducerService.removeJob(QueueName.PAYOUT_REQUEST, payoutRequestId)\r\n\r\n    // update payout request report\r\n    this.reportService.update(\r\n      { type: ReportType.PayoutRequestSum, tag: ReportTag.User, ownerId: new Types.ObjectId(payoutRequest.createdBy) },\r\n      {\r\n        $inc: {\r\n          [`data.${PayoutRequestStatus.PENDING}.quantity`]: -1\r\n        }\r\n      }\r\n    )\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async expirePayoutRequest(payoutRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate payout request\r\n    const payoutRequest = await this.findById(payoutRequestId)\r\n    if (!payoutRequest) throw new AppException(Errors.PAYOUT_REQUEST_NOT_FOUND)\r\n    if (payoutRequest.status !== PayoutRequestStatus.PENDING)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update payout request\r\n        await this.update(\r\n          { _id: payoutRequestId },\r\n          {\r\n            $set: {\r\n              status: PayoutRequestStatus.EXPIRED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: PayoutRequestStatus.EXPIRED,\r\n                timestamp: new Date(),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n        await this.instructorService.update(\r\n          { _id: payoutRequest.createdBy },\r\n          {\r\n            $inc: {\r\n              balance: payoutRequest.amount\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu rút tiền đã hết hạn',\r\n      body: 'Yêu cầu rút tiền đã hết hạn. Bấm để xem chi tiết.',\r\n      receiverIds: [payoutRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.PAYOUT_REQUEST,\r\n        id: payoutRequestId\r\n      }\r\n    })\r\n\r\n    // update payout request report\r\n    this.reportService.update(\r\n      { type: ReportType.PayoutRequestSum, tag: ReportTag.User, ownerId: new Types.ObjectId(payoutRequest.createdBy) },\r\n      {\r\n        $inc: {\r\n          [`data.${PayoutRequestStatus.PENDING}.quantity`]: -1\r\n        }\r\n      }\r\n    )\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async markHasMadePayout(\r\n    payoutRequestId: string,\r\n    markHasMadePayoutDto: MarkHasMadePayoutDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { transactionCode, attachment } = markHasMadePayoutDto\r\n    // const { _id, role } = userAuth\r\n\r\n    // validate payout request\r\n    const payoutRequest = await this.findById(payoutRequestId)\r\n    if (!payoutRequest) throw new AppException(Errors.PAYOUT_REQUEST_NOT_FOUND)\r\n    if (payoutRequest.status !== PayoutRequestStatus.APPROVED)\r\n      throw new AppException(Errors.PAYOUT_REQUEST_STATUS_INVALID)\r\n\r\n    if (payoutRequest.hasMadePayout === true) throw new AppException(Errors.REQUEST_ALREADY_HAS_MADE_PAYOUT)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update payout request\r\n        await this.update(\r\n          { _id: payoutRequestId },\r\n          {\r\n            $set: {\r\n              hasMadePayout: true,\r\n              transactionCode,\r\n              attachment\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu rút tiền đã được thanh toán',\r\n      body: 'Yêu cầu rút tiền đã được thanh toán. Bấm để xem chi tiết.',\r\n      receiverIds: [payoutRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.PAYOUT_REQUEST,\r\n        id: payoutRequestId\r\n      }\r\n    })\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async getPayoutUsage({ createdBy, date }) {\r\n    const startOfDate = moment(date).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = moment(date).tz(VN_TIMEZONE).endOf('date')\r\n    const result = await this.payoutRequestRepository.model.aggregate([\r\n      {\r\n        $match: {\r\n          createdBy: new Types.ObjectId(createdBy),\r\n          status: PayoutRequestStatus.APPROVED,\r\n          updatedAt: {\r\n            $gte: startOfDate.toDate(),\r\n            $lte: endOfDate.toDate()\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: '$createdBy',\r\n          totalAmount: { $sum: '$amount' }\r\n        }\r\n      }\r\n    ])\r\n    return _.get(result, '[0].totalAmount', 0)\r\n  }\r\n\r\n  async getExpiredAt(date: Date): Promise<Date> {\r\n    const payoutRequestAutoExpiration = await this.settingService.findByKey(SettingKey.PayoutRequestAutoExpiration)\r\n    const dateMoment = moment.tz(date, VN_TIMEZONE)\r\n    const expiredDate = dateMoment.clone().add(Number(payoutRequestAutoExpiration.value) || 2, 'day')\r\n    let expiredAt = expiredDate.clone()\r\n\r\n    // check in weekdays\r\n    let currentDate = dateMoment.clone()\r\n    while (currentDate.isSameOrBefore(expiredDate)) {\r\n      // Sunday: isoWeekday=7\r\n      if (currentDate.clone().isoWeekday() === 7) {\r\n        expiredAt.add(1, 'day')\r\n      }\r\n      currentDate.add(1, 'day')\r\n    }\r\n\r\n    return expiredAt.toDate()\r\n  }\r\n\r\n  async addPayoutRequestAutoExpiredJob(payoutRequest: PayoutRequest) {\r\n    try {\r\n      const expiredAt = await this.getExpiredAt(payoutRequest['createdAt'])\r\n      const delayTime = this.helperService.getDiffTimeByMilliseconds(expiredAt)\r\n\r\n      await this.queueProducerService.addJob(\r\n        QueueName.PAYOUT_REQUEST,\r\n        JobName.PayoutRequestAutoExpired,\r\n        {\r\n          payoutRequestId: payoutRequest._id,\r\n          expiredAt\r\n        },\r\n        {\r\n          delay: delayTime,\r\n          jobId: payoutRequest._id.toString()\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this.appLogger.error(JSON.stringify(err))\r\n    }\r\n  }\r\n\r\n  private async sendNotificationToStaffWhenPayoutRequestIsCreated({ payoutRequest }) {\r\n    const staffs = await this.staffService.findMany({\r\n      status: StaffStatus.ACTIVE,\r\n      role: UserRole.STAFF\r\n    })\r\n    const staffIds = staffs.map((staff) => staff._id.toString())\r\n    await this.notificationService.sendTopicFirebaseCloudMessaging({\r\n      title: 'Yêu cầu rút tiền được tạo gần đây',\r\n      body: 'Yêu cầu rút tiền được tạo gần đây. Bấm để xem chi tiết.',\r\n      receiverIds: staffIds,\r\n      data: {\r\n        type: FCMNotificationDataType.PAYOUT_REQUEST,\r\n        id: payoutRequest._id.toString()\r\n      },\r\n      topic: 'STAFF_NOTIFICATION_TOPIC'\r\n    })\r\n  }\r\n}\r\n"]}