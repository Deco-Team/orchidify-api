{"version":3,"file":"learner.class.controller.js","sourceRoot":"/","sources":["class/controllers/learner.class.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAkG;AAClG,6CAUwB;AACxB,4BAA2B;AAE3B,oDAAkG;AAClG,2EAAwD;AACxD,8DAAqD;AACrD,qEAA0D;AAC1D,+DAAqD;AACrD,wDAAgD;AAChD,2FAA4E;AAC5E,6DAA6D;AAC7D,uEAAuE;AACvE,iEAAiE;AACjE,mEAAmE;AACnE,uCAAgC;AAChC,6EAAqF;AACrF,8DAA4D;AAC5D,uFAAsF;AACtF,yEAA+D;AAC/D,0DAIkC;AAClC,6EAA4E;AAC5E,oDAAmF;AACnF,kEAAsF;AACtF,8DAA2E;AAC3E,oEAAiF;AACjF,gFAAoF;AACpF,6FAA4F;AAC5F,iFAAqF;AACrF,yCAAyC;AACzC,0CAAyC;AACzC,+EAAsE;AACtE,gEAAyE;AAQlE,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IACjC,YAEmB,YAA2B,EAE3B,cAA+B,EAE/B,iBAAqC,EAErC,mBAAyC,EAEzC,2BAAyD,EAEzD,eAAiC;QAVjC,iBAAY,GAAZ,YAAY,CAAe;QAE3B,mBAAc,GAAd,cAAc,CAAiB;QAE/B,sBAAiB,GAAjB,iBAAiB,CAAoB;QAErC,wBAAmB,GAAnB,mBAAmB,CAAsB;QAEzC,gCAA2B,GAA3B,2BAA2B,CAA8B;QAEzD,oBAAe,GAAf,eAAe,CAAkB;IACjD,CAAC;IAmBE,AAAN,KAAK,CAAC,WAAW,CAAQ,GAAG,EAAe,OAAe,EAAU,cAA8B;QAChG,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAElC,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;YAChE,OAAO,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;YACpC,aAAa,EAAE,cAAc,CAAC,aAAa,IAAI,wBAAa,CAAC,MAAM;YACnE,SAAS,EAAE,GAAG;YACd,WAAW,EAAE,cAAc,CAAC,WAAW;SACxC,CAAC,CAAA;QACF,OAAO,qBAAqB,CAAA;IAC9B,CAAC;IAQK,AAAN,KAAK,CAAC,WAAW,CAAQ,GAAG,EAAgB,UAA4B,EAAW,aAA4B;QAC7G,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAClC,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,GAAG,EAAE,UAAU,EAAE,aAAa,CAAC,CAAA;IAC9F,CAAC;IAQK,AAAN,KAAK,CAAC,SAAS,CAAQ,GAAG,EAAe,OAAe;QACtD,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAElC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACjD,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAChC,EAAE,SAAS,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAC5E,SAAS,EACT;gBACE;oBACE,IAAI,EAAE,OAAO;oBACb,MAAM,EAAE,kDAAuC;oBAC/C,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,QAAQ;4BACd,MAAM,EAAE,CAAC,MAAM,CAAC;yBACjB;wBACD;4BACE,IAAI,EAAE,YAAY;4BAClB,MAAM,EAAE,gDAAqC;yBAC9C;qBACF;iBACF;aACF,CACF;YACD,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B;gBACE,SAAS,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAClC,OAAO,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;aACrC,EACD,qCAA0B,CAC3B;SACF,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,eAAe,CAAC,CAAA;QAEjE,OAAO,EAAE,GAAG,YAAY,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAA;IAC9E,CAAC;IAQK,AAAN,KAAK,CAAC,eAAe,CAAQ,GAAG,EAAoB,OAAe,EAAsB,SAAiB;QACxG,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAA;QAE1F,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAA;QAC9D,OAAO,OAAO,CAAA;IAChB,CAAC;IAQK,AAAN,KAAK,CAAC,mBAAmB,CAChB,GAAG,EACQ,OAAe,EACV,YAAoB;QAE3C,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAC7C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAA;QAEtG,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,oBAAoB,CAAC,CAAA;QAGpE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,0BAA0B,CAAC;YACnF,YAAY,EAAE,UAAU,CAAC,GAAG;YAC5B,SAAS,EAAE,SAAS;SACrB,CAAC,CAAA;QACF,OAAO,EAAE,GAAG,UAAU,EAAE,UAAU,EAAE,CAAA;IACtC,CAAC;IAcK,AAAN,KAAK,CAAC,gBAAgB,CACb,GAAG,EACQ,OAAe,EACzB,6BAA4D;QAEpE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAC7C,MAAM,EAAE,YAAY,EAAE,GAAG,6BAA6B,CAAA;QAEtD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QAC7D,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,eAAe,CAAC,CAAA;QAGhE,MAAM,EAAE,SAAS,EAAE,GAAG,WAAW,CAAA;QACjC,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,oBAAW,CAAC,CAAA;QAcxD,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,0BAA0B,CAAC;YAC1F,YAAY;YACZ,SAAS;SACV,CAAC,CAAA;QACF,IAAI,iBAAiB;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,oBAAoB,CAAC,CAAA;QAE1E,6BAA6B,CAAC,OAAO,GAAG,OAAO,CAAA;QAC/C,6BAA6B,CAAC,SAAS,GAAG,SAAS,CAAA;QACnD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAA;QAE/F,OAAO,IAAI,gBAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;IACvC,CAAC;CACF,CAAA;AA7LY,wDAAsB;AAiC3B;IAjBL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,cAAc;KACxB,CAAC;IACD,IAAA,wBAAc,EAAC,oDAA+B,EAAE,gDAA6B,CAAC;IAC9E,IAAA,4BAAkB,EAAC;QAClB,MAAM,EAAE,EAAE,KAAK,EAAE,IAAA,cAAI,EAAC,oDAA+B,EAAE,gDAA6B,CAAC,EAAE;KACxF,CAAC;IACD,IAAA,yCAAgB,EAAC;QAChB,cAAM,CAAC,kBAAkB;QACzB,cAAM,CAAC,gBAAgB;QACvB,cAAM,CAAC,eAAe;QACtB,cAAM,CAAC,oBAAoB;QAC3B,cAAM,CAAC,mBAAmB;QAC1B,cAAM,CAAC,qBAAqB;QAC5B,cAAM,CAAC,uBAAuB;KAC/B,CAAC;IACD,IAAA,aAAI,EAAC,0BAA0B,CAAC;IACd,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;IAAmB,WAAA,IAAA,aAAI,GAAE,CAAA;;qDAAiB,iCAAc;;yDAUjG;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,oBAAoB;KAC9B,CAAC;IACD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,qBAAe,EAAE,CAAC;IACnC,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,mDAAkC,EAAE,CAAC;IAC3D,IAAA,YAAG,EAAC,YAAY,CAAC;IACC,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,iCAAU,GAAE,CAAA;IAAgC,WAAA,IAAA,cAAK,GAAE,CAAA;;qDAAgB,8BAAa;;yDAG9G;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,sBAAsB;KAChC,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,qDAAoC,EAAE,CAAC;IAC7D,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,eAAe,CAAC,CAAC;IAC1C,IAAA,YAAG,EAAC,8BAA8B,CAAC;IACnB,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;uDAoCvC;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,wBAAwB;KAClC,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,gDAA6B,EAAE,CAAC;IACtD,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAC;IAC5C,IAAA,YAAG,EAAC,qEAAqE,CAAC;IACpD,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,cAAK,EAAC,SAAS,CAAC,CAAA;IAAmB,WAAA,IAAA,cAAK,EAAC,WAAW,CAAC,CAAA;;;;6DAMvF;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,2BAA2B;KACrC,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,sDAAgC,EAAE,CAAC;IACzD,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,oBAAoB,CAAC,CAAC;IAC/C,IAAA,YAAG,EAAC,2EAA2E,CAAC;IAE9E,WAAA,IAAA,YAAG,GAAE,CAAA;IACL,WAAA,IAAA,cAAK,EAAC,SAAS,CAAC,CAAA;IAChB,WAAA,IAAA,cAAK,EAAC,cAAc,CAAC,CAAA;;;;iEAavB;AAcK;IAZL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,mBAAmB;KAC7B,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,oBAAc,EAAE,CAAC;IACvC,IAAA,yCAAgB,EAAC;QAChB,cAAM,CAAC,eAAe;QACtB,cAAM,CAAC,mCAAmC;QAC1C,cAAM,CAAC,oBAAoB;QAC3B,cAAM,CAAC,sCAAsC;QAC7C,cAAM,CAAC,oBAAoB;KAC5B,CAAC;IACD,IAAA,aAAI,EAAC,0CAA0C,CAAC;IAE9C,WAAA,IAAA,YAAG,GAAE,CAAA;IACL,WAAA,IAAA,cAAK,EAAC,SAAS,CAAC,CAAA;IAChB,WAAA,IAAA,aAAI,GAAE,CAAA;;qDAAgC,yDAA6B;;8DAmCrE;iCA5LU,sBAAsB;IANlC,IAAA,iBAAO,EAAC,iBAAiB,CAAC;IAC1B,IAAA,uBAAa,GAAE;IACf,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAC9C,IAAA,kBAAS,EAAC,6BAAY,CAAC,YAAY,EAAE,wBAAU,CAAC;IAChD,IAAA,uBAAK,EAAC,mBAAQ,CAAC,OAAO,CAAC;IACvB,IAAA,mBAAU,EAAC,SAAS,CAAC;IAGjB,WAAA,IAAA,eAAM,EAAC,6BAAa,CAAC,CAAA;IAErB,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;IAEvB,WAAA,IAAA,eAAM,EAAC,uCAAkB,CAAC,CAAA;IAE1B,WAAA,IAAA,eAAM,EAAC,4CAAoB,CAAC,CAAA;IAE5B,WAAA,IAAA,eAAM,EAAC,4DAA4B,CAAC,CAAA;IAEpC,WAAA,IAAA,eAAM,EAAC,mCAAgB,CAAC,CAAA;;GAZhB,sBAAsB,CA6LlC","sourcesContent":["import { Controller, UseGuards, Inject, Param, Req, Post, Body, Get, Query } from '@nestjs/common'\r\nimport {\r\n  ApiBadRequestResponse,\r\n  ApiBearerAuth,\r\n  ApiCreatedResponse,\r\n  ApiExtraModels,\r\n  ApiOkResponse,\r\n  ApiOperation,\r\n  ApiQuery,\r\n  ApiTags,\r\n  refs\r\n} from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse, IDDataResponse, IDResponse, PaginationQuery } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { IAssignmentService } from '@class/services/assignment.service'\r\nimport { ISessionService } from '@class/services/session.service'\r\nimport { PaymentMethod } from '@src/transaction/contracts/constant'\r\nimport { Types } from 'mongoose'\r\nimport { CreateMomoPaymentDataResponse } from '@src/transaction/dto/momo-payment.dto'\r\nimport { EnrollClassDto } from '@class/dto/enroll-class.dto'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport {\r\n  LearnerViewMyClassDetailDataResponse,\r\n  LearnerViewMyClassListDataResponse,\r\n  QueryClassDto\r\n} from '@class/dto/view-class.dto'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { LEARNER_VIEW_MY_CLASS_DETAIL_PROJECTION } from '@class/contracts/constant'\r\nimport { MY_CLASS_INSTRUCTOR_DETAIL_PROJECTION } from '@instructor/contracts/constant'\r\nimport { ViewSessionDetailDataResponse } from '@class/dto/view-session.dto'\r\nimport { ViewAssignmentDetailDataResponse } from '@class/dto/view-assignment.dto'\r\nimport { CreateAssignmentSubmissionDto } from '@class/dto/assignment-submission.dto'\r\nimport { IAssignmentSubmissionService } from '@class/services/assignment-submission.service'\r\nimport { CreateStripePaymentDataResponse } from '@transaction/dto/stripe-payment.dto'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport * as moment from 'moment-timezone'\r\nimport { IFeedbackService } from '@feedback/services/feedback.service'\r\nimport { FEEDBACK_DETAIL_PROJECTION } from '@feedback/contracts/constant'\r\n\r\n@ApiTags('Class - Learner')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Roles(UserRole.LEARNER)\r\n@Controller('learner')\r\nexport class LearnerClassController {\r\n  constructor(\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @Inject(ISessionService)\r\n    private readonly sessionService: ISessionService,\r\n    @Inject(IAssignmentService)\r\n    private readonly assignmentService: IAssignmentService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService,\r\n    @Inject(IAssignmentSubmissionService)\r\n    private readonly assignmentSubmissionService: IAssignmentSubmissionService,\r\n    @Inject(IFeedbackService)\r\n    private readonly feedbackService: IFeedbackService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `Enroll Class`\r\n  })\r\n  @ApiExtraModels(CreateStripePaymentDataResponse, CreateMomoPaymentDataResponse)\r\n  @ApiCreatedResponse({\r\n    schema: { anyOf: refs(CreateStripePaymentDataResponse, CreateMomoPaymentDataResponse) }\r\n  })\r\n  @ApiErrorResponse([\r\n    Errors.UNVERIFIED_ACCOUNT,\r\n    Errors.INACTIVE_ACCOUNT,\r\n    Errors.CLASS_NOT_FOUND,\r\n    Errors.CLASS_STATUS_INVALID,\r\n    Errors.CLASS_LEARNER_LIMIT,\r\n    Errors.LEARNER_CLASS_EXISTED,\r\n    Errors.CLASS_TIMESHEET_INVALID\r\n  ])\r\n  @Post('enroll/:id([0-9a-f]{24})')\r\n  async enrollClass(@Req() req, @Param('id') classId: string, @Body() enrollClassDto: EnrollClassDto) {\r\n    const { _id } = _.get(req, 'user')\r\n\r\n    const createPaymentResponse = await this.classService.enrollClass({\r\n      classId: new Types.ObjectId(classId),\r\n      paymentMethod: enrollClassDto.paymentMethod || PaymentMethod.STRIPE,\r\n      learnerId: _id,\r\n      requestType: enrollClassDto.requestType\r\n    })\r\n    return createPaymentResponse\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View My Class List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: LearnerViewMyClassListDataResponse })\r\n  @Get('my-classes')\r\n  async myClassList(@Req() req, @Pagination() pagination: PaginationParams, @Query() queryClassDto: QueryClassDto) {\r\n    const { _id } = _.get(req, 'user')\r\n    return await this.learnerClassService.listMyClassesByLearner(_id, pagination, queryClassDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View My Class Detail`\r\n  })\r\n  @ApiOkResponse({ type: LearnerViewMyClassDetailDataResponse })\r\n  @ApiErrorResponse([Errors.CLASS_NOT_FOUND])\r\n  @Get('my-classes/:id([0-9a-f]{24})')\r\n  async getDetail(@Req() req, @Param('id') classId: string) {\r\n    const { _id } = _.get(req, 'user')\r\n\r\n    const [learnerClass, feedback] = await Promise.all([\r\n      this.learnerClassService.findOneBy(\r\n        { learnerId: new Types.ObjectId(_id), classId: new Types.ObjectId(classId) },\r\n        undefined,\r\n        [\r\n          {\r\n            path: 'class',\r\n            select: LEARNER_VIEW_MY_CLASS_DETAIL_PROJECTION,\r\n            populate: [\r\n              {\r\n                path: 'garden',\r\n                select: ['name']\r\n              },\r\n              {\r\n                path: 'instructor',\r\n                select: MY_CLASS_INSTRUCTOR_DETAIL_PROJECTION\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      ),\r\n      this.feedbackService.findOneBy(\r\n        {\r\n          learnerId: new Types.ObjectId(_id),\r\n          classId: new Types.ObjectId(classId)\r\n        },\r\n        FEEDBACK_DETAIL_PROJECTION\r\n      )\r\n    ])\r\n\r\n    if (!learnerClass) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n    return { ...learnerClass?.toObject()['class'], hasSentFeedback: !!feedback }\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View My Session Detail`\r\n  })\r\n  @ApiOkResponse({ type: ViewSessionDetailDataResponse })\r\n  @ApiErrorResponse([Errors.SESSION_NOT_FOUND])\r\n  @Get('my-classes/:classId([0-9a-f]{24})/sessions/:sessionId([0-9a-f]{24})')\r\n  async getLessonDetail(@Req() req, @Param('classId') classId: string, @Param('sessionId') sessionId: string) {\r\n    const { _id: learnerId } = _.get(req, 'user')\r\n    const session = await this.sessionService.findMySession({ sessionId, classId, learnerId })\r\n\r\n    if (!session) throw new AppException(Errors.SESSION_NOT_FOUND)\r\n    return session\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View My Assignment Detail`\r\n  })\r\n  @ApiOkResponse({ type: ViewAssignmentDetailDataResponse })\r\n  @ApiErrorResponse([Errors.ASSIGNMENT_NOT_FOUND])\r\n  @Get('my-classes/:classId([0-9a-f]{24})/assignments/:assignmentId([0-9a-f]{24})')\r\n  async getAssignmentDetail(\r\n    @Req() req,\r\n    @Param('classId') classId: string,\r\n    @Param('assignmentId') assignmentId: string\r\n  ) {\r\n    const { _id: learnerId } = _.get(req, 'user')\r\n    const assignment = await this.assignmentService.findMyAssignment({ assignmentId, classId, learnerId })\r\n\r\n    if (!assignment) throw new AppException(Errors.ASSIGNMENT_NOT_FOUND)\r\n\r\n    // get my submission\r\n    const submission = await this.assignmentSubmissionService.findMyAssignmentSubmission({\r\n      assignmentId: assignment._id,\r\n      learnerId: learnerId\r\n    })\r\n    return { ...assignment, submission }\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `Submit Assignment`\r\n  })\r\n  @ApiOkResponse({ type: IDDataResponse })\r\n  @ApiErrorResponse([\r\n    Errors.CLASS_NOT_FOUND,\r\n    Errors.ASSIGNMENT_SUBMISSION_NOT_START_YET,\r\n    Errors.ASSIGNMENT_NOT_FOUND,\r\n    Errors.ASSIGNMENT_SUBMISSION_DEADLINE_IS_OVER,\r\n    Errors.ASSIGNMENT_SUBMITTED\r\n  ])\r\n  @Post(':classId([0-9a-f]{24})/submit-assignment')\r\n  async submitAssignment(\r\n    @Req() req,\r\n    @Param('classId') classId: string,\r\n    @Body() createAssignmentSubmissionDto: CreateAssignmentSubmissionDto\r\n  ) {\r\n    const { _id: learnerId } = _.get(req, 'user')\r\n    const { assignmentId } = createAssignmentSubmissionDto\r\n\r\n    const courseClass = await this.classService.findById(classId)\r\n    if (!courseClass) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n    // BR-70: Learners are only allowed to submit assignments when the class starts.\r\n    const { startDate } = courseClass\r\n    const classStartDate = moment(startDate).tz(VN_TIMEZONE)\r\n    // if (classStartDate.isAfter(moment().tz(VN_TIMEZONE)))\r\n    //   throw new AppException(Errors.ASSIGNMENT_SUBMISSION_NOT_START_YET)\r\n\r\n    // const assignment = await this.assignmentService.findMyAssignment({ assignmentId, classId, learnerId })\r\n    // if (!assignment) throw new AppException(Errors.ASSIGNMENT_NOT_FOUND)\r\n\r\n    // // BR-71: Learners are only allowed to submit assignments before the deadline.\r\n    // if (assignment.deadline) {\r\n    //   const assignmentDeadline = moment(assignment.deadline).tz(VN_TIMEZONE)\r\n    //   if (assignmentDeadline.isAfter(moment().tz(VN_TIMEZONE)))\r\n    //     throw new AppException(Errors.ASSIGNMENT_SUBMISSION_DEADLINE_IS_OVER)\r\n    // }\r\n\r\n    const existedSubmission = await this.assignmentSubmissionService.findMyAssignmentSubmission({\r\n      assignmentId,\r\n      learnerId\r\n    })\r\n    if (existedSubmission) throw new AppException(Errors.ASSIGNMENT_SUBMITTED)\r\n\r\n    createAssignmentSubmissionDto.classId = classId\r\n    createAssignmentSubmissionDto.learnerId = learnerId\r\n    const submission = await this.assignmentSubmissionService.create(createAssignmentSubmissionDto)\r\n\r\n    return new IDResponse(submission._id)\r\n  }\r\n}\r\n"]}