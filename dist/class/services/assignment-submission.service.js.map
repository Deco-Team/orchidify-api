{"version":3,"file":"assignment-submission.service.js","sourceRoot":"/","sources":["class/services/assignment-submission.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { AssignmentSubmission, AssignmentSubmissionDocument } from '@src/class/schemas/assignment-submission.schema'\r\nimport { FilterQuery, PopulateOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreateAssignmentSubmissionDto } from '@class/dto/assignment-submission.dto'\r\nimport { IAssignmentSubmissionRepository } from '@class/repositories/assignment-submission.repository'\r\nimport { SubmissionStatus } from '@common/contracts/constant'\r\nimport { ILearnerClassRepository } from '@class/repositories/learner-class.repository'\r\nimport { QueryOptions } from 'mongoose'\r\n\r\nexport const IAssignmentSubmissionService = Symbol('IAssignmentSubmissionService')\r\n\r\nexport interface IAssignmentSubmissionService {\r\n  create(\r\n    createAssignmentSubmissionDto: CreateAssignmentSubmissionDto,\r\n    options?: SaveOptions | undefined\r\n  ): Promise<AssignmentSubmission>\r\n  update(\r\n    conditions: FilterQuery<AssignmentSubmission>,\r\n    payload: UpdateQuery<AssignmentSubmission>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<AssignmentSubmission>\r\n  findById(\r\n    classId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<AssignmentSubmission>\r\n  findMyAssignmentSubmission(params: { assignmentId: string; learnerId: string }): Promise<AssignmentSubmission>\r\n  list(querySubmissionDto: { classId: string; assignmentId: string })\r\n  findMany(\r\n    conditions: FilterQuery<AssignmentSubmissionDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<AssignmentSubmission[]>\r\n}\r\n\r\n@Injectable()\r\nexport class AssignmentSubmissionService implements IAssignmentSubmissionService {\r\n  constructor(\r\n    @Inject(IAssignmentSubmissionRepository)\r\n    private readonly assignmentSubmissionRepository: IAssignmentSubmissionRepository,\r\n    @Inject(ILearnerClassRepository)\r\n    private readonly learnerClassRepository: ILearnerClassRepository\r\n  ) {}\r\n\r\n  public async create(createAssignmentSubmissionDto: CreateAssignmentSubmissionDto, options?: SaveOptions | undefined) {\r\n    const { assignmentId, learnerId, classId } = createAssignmentSubmissionDto\r\n\r\n    const assignmentSubmission = await this.assignmentSubmissionRepository.create(\r\n      {\r\n        ...createAssignmentSubmissionDto,\r\n        assignmentId: new Types.ObjectId(assignmentId),\r\n        learnerId: new Types.ObjectId(learnerId),\r\n        classId: new Types.ObjectId(classId),\r\n        status: SubmissionStatus.SUBMITTED\r\n      },\r\n      options\r\n    )\r\n    return assignmentSubmission\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<AssignmentSubmission>,\r\n    payload: UpdateQuery<AssignmentSubmission>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.assignmentSubmissionRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findById(\r\n    submissionId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const submission = await this.assignmentSubmissionRepository.findOne({\r\n      conditions: {\r\n        _id: submissionId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return submission\r\n  }\r\n\r\n  public async findMyAssignmentSubmission(params: { assignmentId: string; learnerId: string }) {\r\n    const { assignmentId, learnerId } = params\r\n\r\n    const assignmentSubmission = await this.assignmentSubmissionRepository.findOne({\r\n      conditions: {\r\n        assignmentId: new Types.ObjectId(assignmentId),\r\n        learnerId: new Types.ObjectId(learnerId)\r\n      }\r\n    })\r\n\r\n    return assignmentSubmission\r\n  }\r\n\r\n  async list(querySubmissionDto: { classId: string; assignmentId: string }) {\r\n    const { classId, assignmentId } = querySubmissionDto\r\n    const submissions = await this.learnerClassRepository.model.aggregate([\r\n      {\r\n        $match: {\r\n          classId: new Types.ObjectId(classId)\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          learnerId: 1,\r\n          classId: 1\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'assignment-submissions',\r\n          localField: 'classId',\r\n          foreignField: 'classId',\r\n          as: 'submissions',\r\n          let: {\r\n            learnerId: '$learnerId',\r\n            classId: '$classId'\r\n          },\r\n          pipeline: [\r\n            {\r\n              $match: {\r\n                $expr: {\r\n                  $and: [\r\n                    {\r\n                      $eq: ['$learnerId', '$$learnerId']\r\n                    },\r\n                    {\r\n                      $eq: ['$classId', '$$classId']\r\n                    },\r\n                    {\r\n                      $eq: ['$assignmentId', new Types.ObjectId(assignmentId)]\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'learners',\r\n          localField: 'learnerId',\r\n          foreignField: '_id',\r\n          as: 'learners',\r\n          pipeline: [\r\n            {\r\n              $project: {\r\n                name: 1,\r\n                email: 1,\r\n                avatar: 1,\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $addFields: {\r\n          learner: {\r\n            $arrayElemAt: ['$learners', 0]\r\n          },\r\n          submission: {\r\n            $arrayElemAt: ['$submissions', 0]\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          submissions: 0,\r\n          learners: 0\r\n        }\r\n      }\r\n    ])\r\n    return { docs: submissions }\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<AssignmentSubmissionDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const submissions = await this.assignmentSubmissionRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return submissions\r\n  }\r\n}\r\n"]}