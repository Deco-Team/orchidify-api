{"version":3,"file":"assignment.service.js","sourceRoot":"/","sources":["class/services/assignment.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport * as moment from 'moment-timezone'\r\nimport { IClassRepository } from '@src/class/repositories/class.repository'\r\nimport { Assignment } from '@src/class/schemas/assignment.schema'\r\nimport { Types } from 'mongoose'\r\nimport { UpdateAssignmentDto } from '@class/dto/assignment.dto'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { Session } from '@class/schemas/session.schema'\r\nimport { VN_TIMEZONE } from '@src/config'\r\n\r\nexport const IAssignmentService = Symbol('IAssignmentService')\r\n\r\nexport interface IAssignmentService {\r\n  findOneBy(params: { assignmentId: string; classId: string; instructorId?: string }): Promise<Assignment>\r\n  findMyAssignment(params: { assignmentId: string; classId: string; learnerId: string }): Promise<Assignment>\r\n  updateAssignment(params: {\r\n    assignmentId: string\r\n    classId: string\r\n    instructorId?: string\r\n    updateAssignmentDto: UpdateAssignmentDto\r\n  }): Promise<void>\r\n}\r\n\r\n@Injectable()\r\nexport class AssignmentService implements IAssignmentService {\r\n  constructor(\r\n    @Inject(IClassRepository)\r\n    private readonly classRepository: IClassRepository\r\n  ) {}\r\n\r\n  public async findOneBy(params: { assignmentId: string; classId: string; instructorId?: string }) {\r\n    const { assignmentId, classId, instructorId } = params\r\n\r\n    const conditions = { _id: classId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      options: { lean: true }\r\n    })\r\n\r\n    let assignment: Assignment\r\n    for (let session of courseClass.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      if (assignment) {\r\n        assignment['sessionNumber'] = session.sessionNumber\r\n        break\r\n      }\r\n    }\r\n    if (!assignment) return null\r\n\r\n    return assignment\r\n  }\r\n\r\n  public async findMyAssignment(params: { assignmentId: string; classId: string; learnerId: string }) {\r\n    const { assignmentId, classId, learnerId } = params\r\n\r\n    const conditions = { _id: classId }\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      populates: [\r\n        {\r\n          path: 'learnerClass',\r\n          select: ['learnerId'],\r\n          match: {\r\n            learnerId: new Types.ObjectId(learnerId)\r\n          }\r\n        }\r\n      ],\r\n      options: { lean: true }\r\n    })\r\n    if ((_.get(courseClass, 'learnerClass.learnerId') as string)?.toString() !== learnerId) return null\r\n\r\n    let assignment: Assignment\r\n    for (let session of courseClass.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      if (assignment) {\r\n        assignment['sessionNumber'] = session.sessionNumber\r\n        break\r\n      }\r\n    }\r\n    if (!assignment) return null\r\n\r\n    return assignment\r\n  }\r\n\r\n  async updateAssignment(params: {\r\n    assignmentId: string\r\n    classId: string\r\n    instructorId?: string\r\n    updateAssignmentDto: UpdateAssignmentDto\r\n  }): Promise<void> {\r\n    const { assignmentId, classId, instructorId, updateAssignmentDto } = params\r\n\r\n    const conditions = { _id: classId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: '+sessions',\r\n      options: { lean: true }\r\n    })\r\n\r\n    let assignment: Assignment\r\n    let classSession: Session\r\n    for (let session of courseClass.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      classSession = session\r\n      if (assignment !== undefined) break\r\n    }\r\n    if (!assignment) throw new AppException(Errors.ASSIGNMENT_NOT_FOUND)\r\n\r\n    const { deadline } = updateAssignmentDto\r\n    const { startDate, duration, weekdays } = courseClass\r\n    const startOfDate = moment(startDate).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = startOfDate.clone().add(duration, 'week').startOf('date')\r\n\r\n    const classDates = [] as Date[]\r\n    let currentDate = startOfDate.clone()\r\n    while (currentDate.isSameOrBefore(endOfDate)) {\r\n      for (let weekday of weekdays) {\r\n        const classDate = currentDate.clone().isoWeekday(weekday)\r\n        if (classDate.isSameOrAfter(startOfDate) && classDate.isBefore(endOfDate)) {\r\n          classDates.push(classDate.toDate())\r\n        }\r\n      }\r\n      currentDate.add(1, 'week')\r\n    }\r\n    const classEndOfDate = moment(classDates[classDates.length - 1])\r\n      .tz(VN_TIMEZONE)\r\n      .endOf('date')\r\n    const sessionStartDate = moment(classDates[classSession.sessionNumber - 1])\r\n      .tz(VN_TIMEZONE)\r\n      .startOf('date')\r\n\r\n    const assignmentDeadline = moment(deadline).tz(VN_TIMEZONE).endOf('date')\r\n    if (assignmentDeadline.isAfter(classEndOfDate) || assignmentDeadline.isBefore(sessionStartDate))\r\n      throw new AppException(Errors.ASSIGNMENT_DEADLINE_INVALID)\r\n\r\n    classSession.assignments = classSession.assignments.map((assignment) => {\r\n      if (assignment._id.toString() === assignmentId) {\r\n        return { ...assignment, deadline: assignmentDeadline.toDate() }\r\n      }\r\n      return assignment\r\n    })\r\n\r\n    await this.classRepository.findOneAndUpdate(\r\n      { _id: new Types.ObjectId(classId) },\r\n      {\r\n        $set: {\r\n          'sessions.$[i].assignments': classSession.assignments\r\n        }\r\n      },\r\n      {\r\n        arrayFilters: [\r\n          {\r\n            'i._id': new Types.ObjectId(classSession._id)\r\n          }\r\n        ]\r\n      }\r\n    )\r\n  }\r\n}\r\n"]}