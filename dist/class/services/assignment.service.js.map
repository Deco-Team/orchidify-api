{"version":3,"file":"assignment.service.js","sourceRoot":"/","sources":["class/services/assignment.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,4BAA2B;AAC3B,uEAA2E;AAE3E,uCAAgC;AAEnB,QAAA,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAA;AAQvD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEmB,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;IACjD,CAAC;IAEG,KAAK,CAAC,SAAS,CAAC,MAAwE;QAC7F,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA;QAEtD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA;QACnC,IAAI,YAAY;YAAE,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;QAE/E,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACrD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QAEF,IAAI,UAAsB,CAAA;QAC1B,KAAK,IAAI,OAAO,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;YACzC,UAAU,GAAG,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,CAAA;YACnG,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,aAAa,CAAA;gBACnD,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAA;QAE5B,OAAO,UAAU,CAAA;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,MAAoE;QAChG,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA;QAEnD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA;QAEnC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACrD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,cAAc;oBACpB,MAAM,EAAE,CAAC,WAAW,CAAC;iBACtB;aACF;YACD,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QACF,IAAK,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,wBAAwB,CAAY,EAAE,QAAQ,EAAE,KAAK,SAAS;YAAE,OAAO,IAAI,CAAA;QAEnG,IAAI,UAAsB,CAAA;QAC1B,KAAK,IAAI,OAAO,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;YACzC,UAAU,GAAG,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,CAAA;YACnG,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,aAAa,CAAA;gBACnD,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAA;QAE5B,OAAO,UAAU,CAAA;IACnB,CAAC;CACF,CAAA;AA7DY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,mCAAgB,CAAC,CAAA;;GAFhB,iBAAiB,CA6D7B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IClassRepository } from '@src/class/repositories/class.repository'\r\nimport { Assignment } from '@src/class/schemas/assignment.schema'\r\nimport { Types } from 'mongoose'\r\n\r\nexport const IAssignmentService = Symbol('IAssignmentService')\r\n\r\nexport interface IAssignmentService {\r\n  findOneBy(params: { assignmentId: string; classId: string; instructorId?: string }): Promise<Assignment>\r\n  findMyAssignment(params: { assignmentId: string; classId: string; learnerId: string }): Promise<Assignment>\r\n}\r\n\r\n@Injectable()\r\nexport class AssignmentService implements IAssignmentService {\r\n  constructor(\r\n    @Inject(IClassRepository)\r\n    private readonly classRepository: IClassRepository\r\n  ) {}\r\n\r\n  public async findOneBy(params: { assignmentId: string; classId: string; instructorId?: string }) {\r\n    const { assignmentId, classId, instructorId } = params\r\n\r\n    const conditions = { _id: classId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      options: { lean: true }\r\n    })\r\n    \r\n    let assignment: Assignment\r\n    for (let session of courseClass.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      if (assignment) {\r\n        assignment['sessionNumber'] = session.sessionNumber\r\n        break\r\n      }\r\n    }\r\n    if (!assignment) return null\r\n\r\n    return assignment\r\n  }\r\n\r\n  public async findMyAssignment(params: { assignmentId: string; classId: string; learnerId: string }) {\r\n    const { assignmentId, classId, learnerId } = params\r\n\r\n    const conditions = { _id: classId }\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      populates: [\r\n        {\r\n          path: 'learnerClass',\r\n          select: ['learnerId']\r\n        }\r\n      ],\r\n      options: { lean: true }\r\n    })\r\n    if ((_.get(courseClass, 'learnerClass.learnerId') as string)?.toString() !== learnerId) return null\r\n\r\n    let assignment: Assignment\r\n    for (let session of courseClass.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      if (assignment) {\r\n        assignment['sessionNumber'] = session.sessionNumber\r\n        break\r\n      }\r\n    }\r\n    if (!assignment) return null\r\n\r\n    return assignment\r\n  }\r\n}\r\n"]}