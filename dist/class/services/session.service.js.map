{"version":3,"file":"session.service.js","sourceRoot":"/","sources":["class/services/session.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,4BAA2B;AAC3B,uEAA2E;AAE3E,uCAAgC;AAChC,mEAA8D;AAEjD,QAAA,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAQjD,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAEmB,eAAiC,EAEjC,mBAAyC;QAFzC,oBAAe,GAAf,eAAe,CAAkB;QAEjC,wBAAmB,GAAnB,mBAAmB,CAAsB;IACzD,CAAC;IAEG,KAAK,CAAC,SAAS,CAAC,MAAqE;QAC1F,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA;QACnD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA;QACnC,IAAI,YAAY;YAAE,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;QAE/E,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACrD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QAEF,MAAM,YAAY,GAAG,WAAW,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,CAAA;QACvG,IAAI,YAAY,KAAK,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAEpC,OAAO,WAAW,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAA;IAC5C,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,MAAiE;QAC1F,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA;QAChD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA;QAEnC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACrD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,cAAc;oBACpB,MAAM,EAAE,CAAC,WAAW,CAAC;oBACrB,KAAK,EAAE;wBACL,SAAS,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;qBACzC;iBACF;aACF;YACD,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QACF,IAAK,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,wBAAwB,CAAY,EAAE,QAAQ,EAAE,KAAK,SAAS;YAAE,OAAO,IAAI,CAAA;QAEnG,MAAM,YAAY,GAAG,WAAW,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,CAAA;QACvG,IAAI,YAAY,KAAK,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAEpC,OAAO,WAAW,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAA;IAC5C,CAAC;CACF,CAAA;AAlDY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,mCAAgB,CAAC,CAAA;IAExB,WAAA,IAAA,eAAM,EAAC,4CAAoB,CAAC,CAAA;;GAJpB,cAAc,CAkD1B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IClassRepository } from '@src/class/repositories/class.repository'\r\nimport { Session } from '@class/schemas/session.schema'\r\nimport { Types } from 'mongoose'\r\nimport { ILearnerClassService } from './learner-class.service'\r\n\r\nexport const ISessionService = Symbol('ISessionService')\r\n\r\nexport interface ISessionService {\r\n  findOneBy(params: { sessionId: string; classId: string; instructorId?: string }): Promise<Session>\r\n  findMySession(params: { sessionId: string; classId: string; learnerId: string }): Promise<Session>\r\n}\r\n\r\n@Injectable()\r\nexport class SessionService implements ISessionService {\r\n  constructor(\r\n    @Inject(IClassRepository)\r\n    private readonly classRepository: IClassRepository,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService\r\n  ) {}\r\n\r\n  public async findOneBy(params: { sessionId: string; classId: string; instructorId?: string }) {\r\n    const { sessionId, classId, instructorId } = params\r\n    const conditions = { _id: classId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      options: { lean: true }\r\n    })\r\n\r\n    const sessionIndex = courseClass?.sessions.findIndex((session) => session._id.toString() === sessionId)\r\n    if (sessionIndex === -1) return null\r\n\r\n    return courseClass?.sessions[sessionIndex]\r\n  }\r\n\r\n  public async findMySession(params: { sessionId: string; classId: string; learnerId: string }) {\r\n    const { sessionId, classId, learnerId } = params\r\n    const conditions = { _id: classId }\r\n    \r\n    const courseClass = await this.classRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      populates: [\r\n        {\r\n          path: 'learnerClass',\r\n          select: ['learnerId'],\r\n          match: {\r\n            learnerId: new Types.ObjectId(learnerId)\r\n          }\r\n        }\r\n      ],\r\n      options: { lean: true }\r\n    })\r\n    if ((_.get(courseClass, 'learnerClass.learnerId') as string)?.toString() !== learnerId) return null\r\n\r\n    const sessionIndex = courseClass?.sessions.findIndex((session) => session._id.toString() === sessionId)\r\n    if (sessionIndex === -1) return null\r\n\r\n    return courseClass?.sessions[sessionIndex]\r\n  }\r\n}\r\n"]}