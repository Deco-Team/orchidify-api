{"version":3,"file":"instructor.attendance.controller.js","sourceRoot":"/","sources":["attendance/controllers/instructor.attendance.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA2F;AAC3F,0CAAyC;AACzC,6CAOwB;AACxB,4BAA2B;AAE3B,oDAA2F;AAC3F,2EAAwD;AACxD,8DAAuE;AACvE,qEAA0D;AAC1D,+DAAqD;AACrD,yEAA+D;AAC/D,wDAAgD;AAChD,2FAA4E;AAC5E,uEAA4E;AAC5E,oEAAgF;AAChF,oEAA+E;AAC/E,uGAA6F;AAC7F,uCAAgC;AAChC,sFAA4E;AAC5E,oDAA2E;AAC3E,yCAAyC;AAQlC,IAAM,8BAA8B,GAApC,MAAM,8BAA8B;IACzC,YAEmB,iBAAqC,EAErC,sBAA+C,EAE/C,mBAAyC;QAJzC,sBAAiB,GAAjB,iBAAiB,CAAoB;QAErC,2BAAsB,GAAtB,sBAAsB,CAAyB;QAE/C,wBAAmB,GAAnB,mBAAmB,CAAsB;IACzD,CAAC;IAQE,AAAN,KAAK,CAAC,IAAI,CAAQ,GAAG,EAAmB,MAAc;QACpD,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAEhD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC;YAClE,WAAW,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YACvC,oBAAoB,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD,CAAC,CAAA;QACF,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,cAAc,CAAC,CAAA;QAEnE,MAAM,IAAI,GAAG,eAAe,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,CAAA;QAClF,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,cAAc,CAAC,CAAA;QAExD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAE7B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAC5D;gBACE,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,EACD,CAAC,MAAM,EAAE,WAAW,CAAC,EACrB;gBACE;oBACE,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;iBAClC;aACF,CACF,CAAA;YACD,OAAO;gBACL,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;oBAC1C,GAAG,YAAY,CAAC,QAAQ,EAAE;oBAC1B,MAAM,EAAE,2BAAgB,CAAC,OAAO;iBACjC,CAAC,CAAC;gBACH,IAAI;aACL,CAAA;QACH,CAAC;aAAM,CAAC;YAEN,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CACvD;gBACE,MAAM,EAAE,IAAI,CAAC,GAAG;aACjB,EACD,qCAA0B,EAC1B;gBACE;oBACE,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;iBAClC;aACF,CACF,CAAA;YACD,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAA;QACpC,CAAC;IACH,CAAC;IAaK,AAAN,KAAK,CAAC,cAAc,CACX,GAAG,EACO,MAAc,EACvB,yBAAoD;QAE5D,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAChD,MAAM,EAAE,WAAW,EAAE,GAAG,yBAAyB,CAAA;QAEjD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC;YAClE,WAAW,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YACvC,oBAAoB,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD,CAAC,CAAA;QACF,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,cAAc,CAAC,CAAA;QAEnE,MAAM,IAAI,GAAG,eAAe,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,CAAA;QAClF,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,cAAc,CAAC,CAAA;QAExD,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,oBAAW,CAAC,CAAA;QAE1C,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,oBAAW,CAAC,CAAA;QACtD,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,2BAA2B,CAAC,CAAA;QAG/F,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,uBAAuB,CAAC,CAAA;QAGxF,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAC5D;YACE,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,EACD,CAAC,KAAK,EAAE,WAAW,CAAC,CACrB,CAAA;QACD,MAAM,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAA;QAC/F,MAAM,kBAAkB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAA;QAC7G,MAAM,qBAAqB,GAAG,IAAI,GAAG,CAAC;YACpC,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;SAC9E,CAAC,CAAA;QAEF,IAAI,kBAAkB,CAAC,MAAM,KAAK,qBAAqB,CAAC,IAAI;YAC1D,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,6BAA6B,CAAC,CAAA;QAE9D,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC7B,IAAI,kBAAkB,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM;gBACtD,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,6BAA6B,CAAC,CAAA;YAC9D,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;YAG3F,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CACtC,EAAE,WAAW,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAC3C,EAAE,IAAI,EAAE,EAAE,4BAA4B,EAAE,IAAI,EAAE,EAAE,CACjD,CAAA;QACH,CAAC;aAAM,CAAC;YAEN,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QAC7F,CAAC;QAED,OAAO,IAAI,qBAAe,CAAC,IAAI,CAAC,CAAA;IAClC,CAAC;CACF,CAAA;AAzIY,wEAA8B;AAgBnC;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,sBAAsB;KAChC,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,gDAA0B,EAAE,CAAC;IACnD,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,cAAc,CAAC,CAAC;IACzC,IAAA,YAAG,EAAC,uBAAuB,CAAC;IACjB,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;;;;0DAiDtC;AAaK;IAXL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,4BAAkB,EAAC,EAAE,IAAI,EAAE,yBAAmB,EAAE,CAAC;IACjD,IAAA,yCAAgB,EAAC;QAChB,cAAM,CAAC,cAAc;QACrB,cAAM,CAAC,6BAA6B;QACpC,cAAM,CAAC,2BAA2B;QAClC,cAAM,CAAC,uBAAuB;KAC/B,CAAC;IACD,IAAA,aAAI,EAAC,uBAAuB,CAAC;IAE3B,WAAA,IAAA,YAAG,GAAE,CAAA;IACL,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;IACf,WAAA,IAAA,aAAI,GAAE,CAAA;;qDAA4B,+CAAyB;;oEAuD7D;yCAxIU,8BAA8B;IAN1C,IAAA,iBAAO,EAAC,yBAAyB,CAAC;IAClC,IAAA,uBAAa,GAAE;IACf,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAC9C,IAAA,kBAAS,EAAC,6BAAY,CAAC,YAAY,EAAE,wBAAU,CAAC;IAChD,IAAA,uBAAK,EAAC,mBAAQ,CAAC,UAAU,CAAC;IAC1B,IAAA,mBAAU,EAAC,YAAY,CAAC;IAGpB,WAAA,IAAA,eAAM,EAAC,uCAAkB,CAAC,CAAA;IAE1B,WAAA,IAAA,eAAM,EAAC,kDAAuB,CAAC,CAAA;IAE/B,WAAA,IAAA,eAAM,EAAC,4CAAoB,CAAC,CAAA;;GANpB,8BAA8B,CAyI1C","sourcesContent":["import { Controller, Get, UseGuards, Inject, Param, Req, Post, Body } from '@nestjs/common'\r\nimport * as moment from 'moment-timezone'\r\nimport {\r\n  ApiBadRequestResponse,\r\n  ApiBearerAuth,\r\n  ApiCreatedResponse,\r\n  ApiOkResponse,\r\n  ApiOperation,\r\n  ApiTags\r\n} from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse, SuccessDataResponse, SuccessResponse } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { AttendanceStatus, UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { IAttendanceService } from '@attendance/services/attendance.service'\r\nimport { AttendanceListDataResponse } from '@attendance/dto/view-attendance.dto'\r\nimport { TakeMultipleAttendanceDto } from '@attendance/dto/take-attendance.dto'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { Types } from 'mongoose'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { ATTENDANCE_LIST_PROJECTION } from '@attendance/contracts/constant'\r\nimport { VN_TIMEZONE } from '@src/config'\r\n\r\n@ApiTags('Attendance - Instructor')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Roles(UserRole.INSTRUCTOR)\r\n@Controller('instructor')\r\nexport class InstructorAttendanceController {\r\n  constructor(\r\n    @Inject(IAttendanceService)\r\n    private readonly attendanceService: IAttendanceService,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `View Attendance List`\r\n  })\r\n  @ApiOkResponse({ type: AttendanceListDataResponse })\r\n  @ApiErrorResponse([Errors.SLOT_NOT_FOUND])\r\n  @Get(':slotId([0-9a-f]{24})')\r\n  async list(@Req() req, @Param('slotId') slotId: string) {\r\n    const { _id: instructorId } = _.get(req, 'user')\r\n\r\n    const gardenTimesheet = await this.gardenTimesheetService.findOneBy({\r\n      'slots._id': new Types.ObjectId(slotId),\r\n      'slots.instructorId': new Types.ObjectId(instructorId)\r\n    })\r\n    if (!gardenTimesheet) throw new AppException(Errors.SLOT_NOT_FOUND)\r\n\r\n    const slot = gardenTimesheet?.slots.find((slot) => slot._id.toString() === slotId)\r\n    if (!slot) throw new AppException(Errors.SLOT_NOT_FOUND)\r\n\r\n    if (!slot.hasTakenAttendance) {\r\n      // fetch learners class\r\n      const learnerClasses = await this.learnerClassService.findMany(\r\n        {\r\n          classId: slot.classId\r\n        },\r\n        ['-_id', 'learnerId'],\r\n        [\r\n          {\r\n            path: 'learner',\r\n            select: ['_id', 'name', 'avatar']\r\n          }\r\n        ]\r\n      )\r\n      return {\r\n        docs: learnerClasses.map((learnerClass) => ({\r\n          ...learnerClass.toObject(),\r\n          status: AttendanceStatus.NOT_YET\r\n        })),\r\n        slot\r\n      }\r\n    } else {\r\n      // fetch attendances\r\n      const attendances = await this.attendanceService.findMany(\r\n        {\r\n          slotId: slot._id\r\n        },\r\n        ATTENDANCE_LIST_PROJECTION,\r\n        [\r\n          {\r\n            path: 'learner',\r\n            select: ['_id', 'name', 'avatar']\r\n          }\r\n        ]\r\n      )\r\n      return { docs: attendances, slot }\r\n    }\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `Take Attendance`\r\n  })\r\n  @ApiCreatedResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([\r\n    Errors.SLOT_NOT_FOUND,\r\n    Errors.NUMBER_OF_ATTENDANCES_INVALID,\r\n    Errors.NOT_TIME_TO_TAKE_ATTENDANCE,\r\n    Errors.TAKE_ATTENDANCE_IS_OVER\r\n  ])\r\n  @Post(':slotId([0-9a-f]{24})')\r\n  async takeAttendance(\r\n    @Req() req,\r\n    @Param('slotId') slotId: string,\r\n    @Body() takeMultipleAttendanceDto: TakeMultipleAttendanceDto\r\n  ) {\r\n    const { _id: instructorId } = _.get(req, 'user')\r\n    const { attendances } = takeMultipleAttendanceDto\r\n\r\n    const gardenTimesheet = await this.gardenTimesheetService.findOneBy({\r\n      'slots._id': new Types.ObjectId(slotId),\r\n      'slots.instructorId': new Types.ObjectId(instructorId)\r\n    })\r\n    if (!gardenTimesheet) throw new AppException(Errors.SLOT_NOT_FOUND)\r\n\r\n    const slot = gardenTimesheet?.slots.find((slot) => slot._id.toString() === slotId)\r\n    if (!slot) throw new AppException(Errors.SLOT_NOT_FOUND)\r\n\r\n    const nowMoment = moment().tz(VN_TIMEZONE)\r\n    // BR-46: Instructors can take attendance when the slots start.\r\n    const startOfSlot = moment(slot.start).tz(VN_TIMEZONE)\r\n    if (nowMoment.isBefore(startOfSlot)) throw new AppException(Errors.NOT_TIME_TO_TAKE_ATTENDANCE)\r\n\r\n    // BR-47: Instructors can only update the attendance until the end of the day\r\n    const endOfDate = startOfSlot.clone().endOf('date')\r\n    if (nowMoment.isAfter(endOfDate)) throw new AppException(Errors.TAKE_ATTENDANCE_IS_OVER)\r\n\r\n    // check learner in class\r\n    const learnerClasses = await this.learnerClassService.findMany(\r\n      {\r\n        classId: slot.classId\r\n      },\r\n      ['_id', 'learnerId']\r\n    )\r\n    const classLearnerIds = learnerClasses.map((learnerClass) => learnerClass.learnerId.toString())\r\n    const attendanceLearners = attendances.filter((attendance) => classLearnerIds.includes(attendance.learnerId))\r\n    const attendanceLearnersSet = new Set([\r\n      ...attendanceLearners.map((attendanceLearner) => attendanceLearner.learnerId)\r\n    ])\r\n\r\n    if (attendanceLearners.length !== attendanceLearnersSet.size)\r\n      throw new AppException(Errors.NUMBER_OF_ATTENDANCES_INVALID)\r\n\r\n    if (!slot.hasTakenAttendance) {\r\n      if (attendanceLearners.length !== classLearnerIds.length)\r\n        throw new AppException(Errors.NUMBER_OF_ATTENDANCES_INVALID)\r\n      await this.attendanceService.bulkWrite(slotId, attendanceLearners, slot.classId.toString())\r\n\r\n      // update slot hasTakenAttendance true\r\n      await this.gardenTimesheetService.update(\r\n        { 'slots._id': new Types.ObjectId(slotId) },\r\n        { $set: { 'slots.$.hasTakenAttendance': true } }\r\n      )\r\n    } else {\r\n      // take attendance just for updated learners\r\n      await this.attendanceService.bulkWrite(slotId, attendanceLearners, slot.classId.toString())\r\n    }\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n}\r\n"]}