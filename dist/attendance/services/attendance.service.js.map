{"version":3,"file":"attendance.service.js","sourceRoot":"/","sources":["attendance/services/attendance.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IAttendanceRepository } from '@attendance/repositories/attendance.repository'\r\nimport { Attendance, AttendanceDocument } from '@attendance/schemas/attendance.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { TakeAttendanceDto } from '@attendance/dto/take-attendance.dto'\r\nimport { QueryAttendanceDto } from '@attendance/dto/view-attendance.dto'\r\nimport { ATTENDANCE_LIST_PROJECTION } from '@attendance/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\n\r\nexport const IAttendanceService = Symbol('IAttendanceService')\r\n\r\nexport interface IAttendanceService {\r\n  create(takeAttendanceDto: TakeAttendanceDto, options?: SaveOptions | undefined): Promise<AttendanceDocument>\r\n  findById(\r\n    attendanceId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<AttendanceDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<Attendance>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<AttendanceDocument>\r\n  findMany(\r\n    conditions: FilterQuery<AttendanceDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<AttendanceDocument[]>\r\n  update(\r\n    conditions: FilterQuery<Attendance>,\r\n    payload: UpdateQuery<Attendance>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<AttendanceDocument>\r\n  list(\r\n    queryAttendanceDto: QueryAttendanceDto,\r\n    projection?: string | Record<string, any>,\r\n    populate?: Array<PopulateOptions>\r\n  )\r\n  bulkWrite(slotId: string, takeAttendanceDto: TakeAttendanceDto[])\r\n}\r\n\r\n@Injectable()\r\nexport class AttendanceService implements IAttendanceService {\r\n  private readonly appLogger = new AppLogger(AttendanceService.name)\r\n  constructor(\r\n    @Inject(IAttendanceRepository)\r\n    private readonly attendanceRepository: IAttendanceRepository\r\n  ) {}\r\n\r\n  public async create(takeAttendanceDto: TakeAttendanceDto, options?: SaveOptions | undefined) {\r\n    return await this.attendanceRepository.create({ ...takeAttendanceDto }, options)\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<Attendance>,\r\n    payload: UpdateQuery<Attendance>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return await this.attendanceRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  bulkWrite(slotId: string, takeAttendanceDto: TakeAttendanceDto[]) {\r\n    const operations = []\r\n    for (const attendance of takeAttendanceDto) {\r\n      operations.push({\r\n        updateOne: {\r\n          filter: { learnerId: new Types.ObjectId(attendance.learnerId), slotId: new Types.ObjectId(slotId) },\r\n          update: {\r\n            $set: { ...attendance, learnerId: new Types.ObjectId(attendance.learnerId) }\r\n          },\r\n          upsert: true\r\n        }\r\n      })\r\n    }\r\n    return this.attendanceRepository.model.bulkWrite(operations)\r\n  }\r\n\r\n  public async findById(\r\n    attendanceId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const attendance = await this.attendanceRepository.findOne({\r\n      conditions: {\r\n        _id: attendanceId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return attendance\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<Attendance>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const attendance = await this.attendanceRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return attendance\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<AttendanceDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const attendances = await this.attendanceRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return attendances\r\n  }\r\n\r\n  async list(\r\n    queryCourseDto: QueryAttendanceDto,\r\n    projection = ATTENDANCE_LIST_PROJECTION,\r\n    populate?: Array<PopulateOptions>\r\n  ) {\r\n    const { slotId } = queryCourseDto\r\n    const filter: Record<string, any> = {}\r\n    if (slotId) {\r\n      filter['slotId'] = slotId\r\n    }\r\n\r\n    // const validStatus = status?.filter((status) =>\r\n    //   [AttendanceStatus.ACTIVE, AttendanceStatus.INACTIVE].includes(status)\r\n    // )\r\n    // if (validStatus?.length > 0) {\r\n    //   filter['status'] = {\r\n    //     $in: validStatus\r\n    //   }\r\n    // }\r\n\r\n    return this.attendanceRepository.model.paginate(filter, {\r\n      // ...pagination,\r\n      projection,\r\n      populate\r\n    })\r\n  }\r\n}\r\n"]}