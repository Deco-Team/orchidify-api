{"version":3,"file":"management.garden-manager.controller.js","sourceRoot":"/","sources":["garden-manager/controllers/management.garden-manager.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller, Get, UseGuards, Inject, Put, Body, Post, Query, Param, Patch } from '@nestjs/common'\r\nimport {\r\n  ApiBadRequestResponse,\r\n  ApiBearerAuth,\r\n  ApiCreatedResponse,\r\n  ApiOkResponse,\r\n  ApiOperation,\r\n  ApiQuery,\r\n  ApiTags\r\n} from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport {\r\n  ErrorResponse,\r\n  IDDataResponse,\r\n  IDResponse,\r\n  PaginationQuery,\r\n  SuccessDataResponse,\r\n  SuccessResponse\r\n} from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { GardenManagerStatus, UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { IGardenManagerService } from '@garden-manager/services/garden-manager.service'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { CreateGardenManagerDto } from '@garden-manager/dto/create-garden-manager.dto'\r\nimport { UpdateGardenManagerDto } from '@garden-manager/dto/update-garden-manager.dto'\r\nimport {\r\n  GardenManagerDetailDataResponse,\r\n  GardenManagerListDataResponse,\r\n  QueryGardenManagerDto\r\n} from '@garden-manager/dto/view-garden-manager.dto'\r\nimport { GARDEN_MANAGER_DETAIL_PROJECTION } from '@garden-manager/contracts/constant'\r\nimport { IUserTokenService } from '@auth/services/user-token.service'\r\nimport { IGardenService } from '@garden/services/garden.service'\r\nimport { Types } from 'mongoose'\r\n\r\n@ApiTags('Garden Manager')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Controller()\r\nexport class ManagementGardenManagerController {\r\n  constructor(\r\n    @Inject(IGardenManagerService)\r\n    private readonly gardenManagerService: IGardenManagerService,\r\n    @Inject(IUserTokenService)\r\n    private readonly userTokenService: IUserTokenService,\r\n    @Inject(IGardenService)\r\n    private readonly gardenService: IGardenService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] View Garden Manager List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: GardenManagerListDataResponse })\r\n  @Roles(UserRole.STAFF)\r\n  @Get()\r\n  async list(@Pagination() pagination: PaginationParams, @Query() queryGardenManagerDto: QueryGardenManagerDto) {\r\n    return await this.gardenManagerService.list(pagination, queryGardenManagerDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] View Garden Manager Detail`\r\n  })\r\n  @ApiOkResponse({ type: GardenManagerDetailDataResponse })\r\n  @ApiErrorResponse([Errors.GARDEN_MANAGER_NOT_FOUND])\r\n  @Roles(UserRole.STAFF)\r\n  @Get(':id([0-9a-f]{24})')\r\n  async getDetail(@Param('id') gardenManagerId: string) {\r\n    const gardenManager = await this.gardenManagerService.findById(gardenManagerId, GARDEN_MANAGER_DETAIL_PROJECTION, [\r\n      {\r\n        path: 'gardens',\r\n        perDocumentLimit: 10,\r\n        select: ['name', '-gardenManagerId']\r\n      }\r\n    ])\r\n\r\n    if (!gardenManager) throw new AppException(Errors.GARDEN_MANAGER_NOT_FOUND)\r\n    return gardenManager\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Add Garden Manager`\r\n  })\r\n  @ApiCreatedResponse({ type: IDDataResponse })\r\n  @ApiErrorResponse([Errors.EMAIL_ALREADY_EXIST])\r\n  @Roles(UserRole.STAFF)\r\n  @Post()\r\n  async create(@Body() createGardenManagerDto: CreateGardenManagerDto) {\r\n    const existedGardenManager = await this.gardenManagerService.findByEmail(createGardenManagerDto.email)\r\n    if (existedGardenManager) throw new AppException(Errors.EMAIL_ALREADY_EXIST)\r\n    const gardenManager = await this.gardenManagerService.create(createGardenManagerDto)\r\n    return new IDResponse(gardenManager._id)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Update Garden Manager`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.GARDEN_MANAGER_NOT_FOUND])\r\n  @Roles(UserRole.STAFF)\r\n  @Put(':id([0-9a-f]{24})')\r\n  async update(@Param('id') gardenManagerId: string, @Body() updateGardenManagerDto: UpdateGardenManagerDto) {\r\n    const gardenManager = await this.gardenManagerService.update({ _id: gardenManagerId }, updateGardenManagerDto)\r\n\r\n    if (!gardenManager) throw new AppException(Errors.GARDEN_MANAGER_NOT_FOUND)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Deactivate Garden Manager`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.GARDEN_MANAGER_IS_ASSIGNED_TO_GARDEN])\r\n  @Roles(UserRole.STAFF)\r\n  @Patch('/:id([0-9a-f]{24})/deactivate')\r\n  async deactivate(@Param('id') gardenManagerId: string) {\r\n    // BR-30: If the garden manager is assigned to a garden, the garden manager cannot be deactivated.\r\n    const gardens = await this.gardenService.findManyByGardenManagerId(gardenManagerId)\r\n    if (gardens.length > 0) throw new AppException(Errors.GARDEN_MANAGER_IS_ASSIGNED_TO_GARDEN)\r\n\r\n    await Promise.all([\r\n      this.gardenManagerService.update(\r\n        {\r\n          _id: gardenManagerId\r\n        },\r\n        { status: GardenManagerStatus.INACTIVE }\r\n      ),\r\n      this.userTokenService.clearAllRefreshTokensOfUser(new Types.ObjectId(gardenManagerId), UserRole.GARDEN_MANAGER)\r\n    ])\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.STAFF}] Activate Garden Manager`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @Roles(UserRole.STAFF)\r\n  @Patch('/:id([0-9a-f]{24})/active')\r\n  async activate(@Param('id') gardenManagerId: string) {\r\n    await this.gardenManagerService.update(\r\n      {\r\n        _id: gardenManagerId\r\n      },\r\n      { status: GardenManagerStatus.ACTIVE }\r\n    )\r\n    return new SuccessResponse(true)\r\n  }\r\n}\r\n"]}