{"version":3,"file":"garden-manager.service.js","sourceRoot":"/","sources":["garden-manager/services/garden-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { IGardenManagerRepository } from '@garden-manager/repositories/garden-manager.repository'\r\nimport { GardenManager, GardenManagerDocument } from '@garden-manager/schemas/garden-manager.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { IAuthUserService } from '@auth/services/auth.service'\r\nimport { CreateGardenManagerDto } from '@garden-manager/dto/create-garden-manager.dto'\r\nimport { QueryGardenManagerDto } from '@garden-manager/dto/view-garden-manager.dto'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { GARDEN_MANAGER_LIST_PROJECTION } from '@garden-manager/contracts/constant'\r\nimport { GardenManagerStatus } from '@common/contracts/constant'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { NotificationAdapter } from '@common/adapters/notification.adapter'\r\n\r\nexport const IGardenManagerService = Symbol('IGardenManagerService')\r\n\r\nexport interface IGardenManagerService extends IAuthUserService {\r\n  create(gardenManager: CreateGardenManagerDto, options?: SaveOptions | undefined): Promise<GardenManagerDocument>\r\n  findById(\r\n    gardenManagerId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenManagerDocument>\r\n  findByEmail(email: string, projection?: string | Record<string, any>): Promise<GardenManagerDocument>\r\n  update(\r\n    conditions: FilterQuery<GardenManager>,\r\n    payload: UpdateQuery<GardenManager>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<GardenManagerDocument>\r\n  list(pagination: PaginationParams, queryGardenManagerDto: QueryGardenManagerDto)\r\n}\r\n\r\n@Injectable()\r\nexport class GardenManagerService implements IGardenManagerService {\r\n  constructor(\r\n    @Inject(IGardenManagerRepository)\r\n    private readonly gardenManagerRepository: IGardenManagerRepository,\r\n    private readonly helperService: HelperService,\r\n    private readonly notificationAdapter: NotificationAdapter\r\n  ) {}\r\n\r\n  public async create(createGardenManagerDto: CreateGardenManagerDto, options?: SaveOptions | undefined) {\r\n    const password = this.helperService.generateRandomString(10, 'abcdefghijklmnopqrstuvwxyz0123456789')\r\n    const hashPassword = await this.helperService.hashPassword(password)\r\n    createGardenManagerDto['password'] = hashPassword\r\n    const gardenManager = await this.gardenManagerRepository.create(createGardenManagerDto, options)\r\n\r\n    this.notificationAdapter.sendMail({\r\n      to: gardenManager.email,\r\n      subject: `[Orchidify] Login Information`,\r\n      template: 'management/add-garden-manager',\r\n      context: {\r\n        email: gardenManager.email,\r\n        name: gardenManager.name,\r\n        password\r\n      }\r\n    })\r\n    return gardenManager\r\n  }\r\n\r\n  public async findById(\r\n    gardenManagerId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const gardenManager = await this.gardenManagerRepository.findOne({\r\n      conditions: {\r\n        _id: gardenManagerId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return gardenManager\r\n  }\r\n\r\n  public async findByEmail(email: string, projection?: string | Record<string, any>) {\r\n    const gardenManager = await this.gardenManagerRepository.findOne({\r\n      conditions: {\r\n        email\r\n      },\r\n      projection\r\n    })\r\n    return gardenManager\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<GardenManager>,\r\n    payload: UpdateQuery<GardenManager>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.gardenManagerRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryGardenManagerDto: QueryGardenManagerDto,\r\n    projection = GARDEN_MANAGER_LIST_PROJECTION\r\n  ) {\r\n    const { name, email, status } = queryGardenManagerDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [GardenManagerStatus.ACTIVE, GardenManagerStatus.INACTIVE].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (email) textSearch += ' ' + email.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.gardenManagerRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n}\r\n"]}