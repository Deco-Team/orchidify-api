{"version":3,"file":"garden-manager.schema.js","sourceRoot":"/","sources":["garden-manager/schemas/garden-manager.schema.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+CAA8D;AAE9D,iDAAgD;AAChD,yDAA6C;AAC7C,8DAAgE;AAiBzD,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAAY,EAAW;QACrB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA;IACf,CAAC;CAqBF,CAAA;AAxBY,sCAAa;AAKxB;IADC,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC;;0CACjC;AAGX;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CAC3B;AAGZ;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CAC1B;AAGb;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;;+CACtC;AAGhB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;kDACpB;AAMnB;IAJC,IAAA,eAAI,EAAC;QACJ,IAAI,EAAE,8BAAmB;QACzB,OAAO,EAAE,8BAAmB,CAAC,MAAM;KACpC,CAAC;;6CACyB;wBAvBhB,aAAa;IAbzB,IAAA,iBAAM,EAAC;QACN,UAAU,EAAE,iBAAiB;QAC7B,UAAU,EAAE;YACV,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB;QACD,MAAM,EAAE;YACN,SAAS,CAAC,GAAG,EAAE,GAAG;gBAChB,OAAO,GAAG,CAAC,GAAG,CAAA;YAChB,CAAC;YACD,QAAQ,EAAE,IAAI;SACf;KACF,CAAC;;GACW,aAAa,CAwBzB;AAEY,QAAA,mBAAmB,GAAG,wBAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAA;AAE9E,2BAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AAEpC,2BAAmB,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAA;AACvC,2BAAmB,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAA;AAE1D,2BAAmB,CAAC,OAAO,CAAC,SAAS,EAAE;IACrC,GAAG,EAAE,QAAQ;IACb,UAAU,EAAE,KAAK;IACjB,YAAY,EAAE,iBAAiB;CAChC,CAAC,CAAA","sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\r\nimport { HydratedDocument, Types } from 'mongoose'\r\nimport * as paginate from 'mongoose-paginate-v2'\r\nimport { Transform } from 'class-transformer'\r\nimport { GardenManagerStatus } from '@common/contracts/constant'\r\n\r\nexport type GardenManagerDocument = HydratedDocument<GardenManager>\r\n\r\n@Schema({\r\n  collection: 'garden-managers',\r\n  timestamps: {\r\n    createdAt: true,\r\n    updatedAt: true\r\n  },\r\n  toJSON: {\r\n    transform(doc, ret) {\r\n      delete ret.__v\r\n    },\r\n    virtuals: true\r\n  }\r\n})\r\nexport class GardenManager {\r\n  constructor(id?: string) {\r\n    this._id = id\r\n  }\r\n  @Transform(({ value }) => value?.toString())\r\n  _id: string\r\n\r\n  @Prop({ type: String, required: true })\r\n  name: string\r\n\r\n  @Prop({ type: String, required: true })\r\n  email: string\r\n\r\n  @Prop({ type: String, required: true, select: false })\r\n  password: string\r\n\r\n  @Prop({ type: String, required: true })\r\n  idCardPhoto: string\r\n\r\n  @Prop({\r\n    enum: GardenManagerStatus,\r\n    default: GardenManagerStatus.ACTIVE\r\n  })\r\n  status: GardenManagerStatus\r\n}\r\n\r\nexport const GardenManagerSchema = SchemaFactory.createForClass(GardenManager)\r\n\r\nGardenManagerSchema.plugin(paginate)\r\n\r\nGardenManagerSchema.index({ email: 1 })\r\nGardenManagerSchema.index({ name: 'text', email: 'text' })\r\n\r\nGardenManagerSchema.virtual('gardens', {\r\n  ref: 'Garden',\r\n  localField: '_id',\r\n  foreignField: 'gardenManagerId'\r\n})\r\n"]}