{"version":3,"file":"staff.service.js","sourceRoot":"/","sources":["staff/services/staff.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAuthUserService } from '@auth/services/auth.service'\r\nimport { StaffStatus, UserRole } from '@common/contracts/constant'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { Injectable, Inject } from '@nestjs/common'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { ReportTag, ReportType } from '@report/contracts/constant'\r\nimport { IReportService } from '@report/services/report.service'\r\nimport { STAFF_LIST_PROJECTION } from '@staff/contracts/constant'\r\nimport { CreateStaffDto } from '@staff/dto/create-staff.dto'\r\nimport { QueryStaffDto } from '@staff/dto/view-staff.dto'\r\nimport { IStaffRepository } from '@staff/repositories/staff.repository'\r\nimport { Staff, StaffDocument } from '@staff/schemas/staff.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\n\r\nexport const IStaffService = Symbol('IStaffService')\r\n\r\nexport interface IStaffService extends IAuthUserService {\r\n  create(createStaffDto: CreateStaffDto, options?: SaveOptions | undefined): Promise<StaffDocument>\r\n  findById(\r\n    staffId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<StaffDocument>\r\n  findByEmail(email: string, projection?: string | Record<string, any>): Promise<StaffDocument>\r\n  update(\r\n    conditions: FilterQuery<Staff>,\r\n    payload: UpdateQuery<Staff>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<StaffDocument>\r\n  list(pagination: PaginationParams, queryStaffDto: QueryStaffDto)\r\n  findMany(\r\n    conditions: FilterQuery<StaffDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<StaffDocument[]>\r\n}\r\n\r\n@Injectable()\r\nexport class StaffService implements IStaffService {\r\n  constructor(\r\n    private readonly helperService: HelperService,\r\n    @Inject(IStaffRepository)\r\n    private readonly staffRepository: IStaffRepository,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n    @Inject(IReportService)\r\n    private readonly reportService: IReportService\r\n  ) {}\r\n\r\n  public async create(createStaffDto: CreateStaffDto, options?: SaveOptions | undefined) {\r\n    const password = this.helperService.generateRandomString(10, 'abcdefghijklmnopqrstuvwxyz0123456789')\r\n    const hashPassword = await this.helperService.hashPassword(password)\r\n    createStaffDto['password'] = hashPassword\r\n\r\n    const staffCode = await this.generateStaffCode()\r\n\r\n    createStaffDto['staffCode'] = staffCode\r\n    const staff = await this.staffRepository.create(createStaffDto, options)\r\n\r\n    this.notificationService.sendMail({\r\n      to: staff.email,\r\n      subject: `[Orchidify] Thông tin đăng nhập`,\r\n      template: 'management/add-staff',\r\n      context: {\r\n        email: staff.email,\r\n        name: staff.name,\r\n        password\r\n      }\r\n    })\r\n\r\n    // update staff report\r\n    this.reportService.update(\r\n      { type: ReportType.StaffSum, tag: ReportTag.System },\r\n      {\r\n        $inc: {\r\n          'data.quantity': 1,\r\n          [`data.${StaffStatus.ACTIVE}.quantity`]: 1\r\n        }\r\n      }\r\n    )\r\n    return staff\r\n  }\r\n\r\n  public async findById(\r\n    staffId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const staff = await this.staffRepository.findOne({\r\n      conditions: {\r\n        _id: staffId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return staff\r\n  }\r\n\r\n  public async findByEmail(email: string, projection?: string | Record<string, any>) {\r\n    const staff = await this.staffRepository.findOne({\r\n      conditions: {\r\n        email\r\n      },\r\n      projection\r\n    })\r\n    return staff\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<Staff>,\r\n    payload: UpdateQuery<StaffDocument>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.staffRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(pagination: PaginationParams, QueryStaffDto: QueryStaffDto, projection = STAFF_LIST_PROJECTION) {\r\n    const { name, email, status } = QueryStaffDto\r\n    const filter: Record<string, any> = {\r\n      role: UserRole.STAFF\r\n    }\r\n\r\n    const validStatus = status?.filter((status) => [StaffStatus.ACTIVE, StaffStatus.INACTIVE].includes(status))\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (email) textSearch += ' ' + email.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.staffRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<StaffDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const staffs = await this.staffRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return staffs\r\n  }\r\n\r\n  private async generateStaffCode(length = 6, startTime = Date.now()) {\r\n    const staffCode = 'OCP' + this.helperService.generateRandomString(length)\r\n    const staff = await this.staffRepository.findOne({\r\n      conditions: {\r\n        staffCode\r\n      }\r\n    })\r\n\r\n    const elapsedTime = Date.now() - startTime\r\n    if (!staff) return staffCode\r\n    const isRetry = elapsedTime < 60 * 1000\r\n    if (isRetry) return await this.generateStaffCode(length, startTime)\r\n    throw new AppException(Errors.INTERNAL_SERVER_ERROR)\r\n  }\r\n}\r\n"]}