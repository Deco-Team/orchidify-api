{"version":3,"file":"management.staff.controller.js","sourceRoot":"/","sources":["staff/controllers/management.staff.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller, Get, UseGuards, Inject, Put, Body, Post, Query, Param, Patch } from '@nestjs/common'\r\nimport {\r\n  ApiBadRequestResponse,\r\n  ApiBearerAuth,\r\n  ApiCreatedResponse,\r\n  ApiOkResponse,\r\n  ApiOperation,\r\n  ApiQuery,\r\n  ApiTags\r\n} from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport {\r\n  ErrorResponse,\r\n  IDDataResponse,\r\n  IDResponse,\r\n  PaginationQuery,\r\n  SuccessDataResponse,\r\n  SuccessResponse\r\n} from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { StaffStatus, RecruitmentStatus, UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { QueryStaffDto, StaffDetailDataResponse, StaffListDataResponse } from '@staff/dto/view-staff.dto'\r\nimport { IUserTokenService } from '@auth/services/user-token.service'\r\nimport { Types } from 'mongoose'\r\nimport { IStaffService } from '@staff/services/staff.service'\r\nimport { CreateStaffDto } from '@staff/dto/create-staff.dto'\r\nimport { UpdateStaffDto } from '@staff/dto/update-staff.dto'\r\nimport { IRecruitmentService } from '@recruitment/services/recruitment.service'\r\nimport { STAFF_DETAIL_PROJECTION } from '@staff/contracts/constant'\r\n\r\n@ApiTags('Staff')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Controller()\r\nexport class ManagementStaffController {\r\n  constructor(\r\n    @Inject(IStaffService)\r\n    private readonly staffService: IStaffService,\r\n    @Inject(IUserTokenService)\r\n    private readonly userTokenService: IUserTokenService,\r\n    @Inject(IRecruitmentService)\r\n    private readonly recruitmentService: IRecruitmentService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] View Staff List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: StaffListDataResponse })\r\n  @Roles(UserRole.ADMIN)\r\n  @Get()\r\n  async list(@Pagination() pagination: PaginationParams, @Query() queryStaffDto: QueryStaffDto) {\r\n    return await this.staffService.list(pagination, queryStaffDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] View Staff Detail`\r\n  })\r\n  @ApiOkResponse({ type: StaffDetailDataResponse })\r\n  @ApiErrorResponse([Errors.STAFF_NOT_FOUND])\r\n  @Roles(UserRole.ADMIN)\r\n  @Get(':id([0-9a-f]{24})')\r\n  async getDetail(@Param('id') staffId: string) {\r\n    const staff = await this.staffService.findById(staffId, STAFF_DETAIL_PROJECTION)\r\n\r\n    if (!staff || staff.role !== UserRole.STAFF) throw new AppException(Errors.STAFF_NOT_FOUND)\r\n    return staff\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] Add Staff`\r\n  })\r\n  @ApiCreatedResponse({ type: IDDataResponse })\r\n  @ApiErrorResponse([Errors.EMAIL_ALREADY_EXIST])\r\n  @Roles(UserRole.ADMIN)\r\n  @Post()\r\n  async create(@Body() createStaffDto: CreateStaffDto) {\r\n    const existedStaff = await this.staffService.findByEmail(createStaffDto.email)\r\n    if (existedStaff) throw new AppException(Errors.EMAIL_ALREADY_EXIST)\r\n      \r\n    const staff = await this.staffService.create(createStaffDto)\r\n    return new IDResponse(staff._id)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] Update Staff`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.STAFF_NOT_FOUND])\r\n  @Roles(UserRole.ADMIN)\r\n  @Put(':id([0-9a-f]{24})')\r\n  async update(@Param('id') staffId: string, @Body() updateStaffDto: UpdateStaffDto) {\r\n    const staff = await this.staffService.update({ _id: staffId, role: UserRole.STAFF }, updateStaffDto)\r\n\r\n    if (!staff) throw new AppException(Errors.STAFF_NOT_FOUND)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] Deactivate Staff`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.STAFF_IS_ASSIGNED_TO_RECRUITMENT_PROCESS])\r\n  @Roles(UserRole.ADMIN)\r\n  @Patch('/:id([0-9a-f]{24})/deactivate')\r\n  async deactivate(@Param('id') staffId: string) {\r\n    // BR-69: If the staff is assigned to a recruitment process, the staff cannot be deactivated.\r\n    const recruitments = await this.recruitmentService.findByHandledByAndStatus(staffId, [\r\n      RecruitmentStatus.INTERVIEWING,\r\n      RecruitmentStatus.SELECTED\r\n    ])\r\n    if (recruitments.length > 0) {\r\n      throw new AppException(Errors.STAFF_IS_ASSIGNED_TO_RECRUITMENT_PROCESS)\r\n    }\r\n\r\n    await Promise.all([\r\n      this.staffService.update(\r\n        {\r\n          _id: staffId,\r\n          role: UserRole.STAFF\r\n        },\r\n        { status: StaffStatus.INACTIVE }\r\n      ),\r\n      this.userTokenService.clearAllRefreshTokensOfUser(new Types.ObjectId(staffId), UserRole.STAFF)\r\n    ])\r\n\r\n    // TODO: remove fcmToken, inactive user device for staff when deactive\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `[${UserRole.ADMIN}] Activate Staff`\r\n  })\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @Roles(UserRole.ADMIN)\r\n  @Patch('/:id([0-9a-f]{24})/active')\r\n  async activate(@Param('id') staffId: string) {\r\n    await this.staffService.update(\r\n      {\r\n        _id: staffId,\r\n        role: UserRole.STAFF\r\n      },\r\n      { status: StaffStatus.ACTIVE }\r\n    )\r\n    return new SuccessResponse(true)\r\n  }\r\n}\r\n"]}