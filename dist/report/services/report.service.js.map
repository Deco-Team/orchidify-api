{"version":3,"file":"report.service.js","sourceRoot":"/","sources":["report/services/report.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,yEAA0E;AAM7D,QAAA,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAA;AA+B/C,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAEmB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IACnD,CAAC;IAEG,KAAK,CAAC,QAAQ,CACnB,QAAgB,EAChB,UAAyC,EACzC,SAAkC;QAElC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,UAAU,EAAE;gBACV,GAAG,EAAE,QAAQ;aACd;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK,CAAC,UAAU,CACrB,IAAgB,EAChB,UAAyC,EACzC,SAAkC;QAElC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,UAAU,EAAE;gBACV,IAAI;aACL;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK,CAAC,OAAO,CAClB,UAA+B,EAC/B,UAAyC,EACzC,SAAkC;QAElC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,CAAC,UAA+B,EAAE,OAA4B,EAAE,OAAkC;QAC7G,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAC7E,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,UAAuC,EACvC,UAAgC,EAChC,SAAkC;QAElC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;YACnD,UAAU;YACV,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;CACF,CAAA;AAjEY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,qCAAiB,CAAC,CAAA;;GAFjB,aAAa,CAiEzB","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { IReportRepository } from '@report/repositories/report.repository'\r\nimport { Report, ReportDocument } from '@report/schemas/report.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\nimport * as _ from 'lodash'\r\nimport { ReportType } from '@report/contracts/constant'\r\n\r\nexport const IReportService = Symbol('IReportService')\r\n\r\nexport interface IReportService {\r\n  findById(\r\n    reportId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ReportDocument>\r\n  findByType(\r\n    type: ReportType,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ReportDocument>\r\n  findOne(\r\n    conditions: FilterQuery<Report>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ReportDocument>\r\n  update(\r\n    conditions: FilterQuery<Report>,\r\n    payload: UpdateQuery<Report>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<ReportDocument>\r\n  findMany(\r\n    conditions: FilterQuery<ReportDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ReportDocument[]>\r\n}\r\n\r\n@Injectable()\r\nexport class ReportService implements IReportService {\r\n  constructor(\r\n    @Inject(IReportRepository)\r\n    private readonly reportRepository: IReportRepository\r\n  ) {}\r\n\r\n  public async findById(\r\n    reportId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const report = await this.reportRepository.findOne({\r\n      conditions: {\r\n        _id: reportId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return report\r\n  }\r\n\r\n  public async findByType(\r\n    type: ReportType,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const report = await this.reportRepository.findOne({\r\n      conditions: {\r\n        type\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return report\r\n  }\r\n\r\n  public async findOne(\r\n    conditions: FilterQuery<Report>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const report = await this.reportRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return report\r\n  }\r\n\r\n  public update(conditions: FilterQuery<Report>, payload: UpdateQuery<Report>, options?: QueryOptions | undefined) {\r\n    return this.reportRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<ReportDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const reports = await this.reportRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return reports\r\n  }\r\n}\r\n"]}