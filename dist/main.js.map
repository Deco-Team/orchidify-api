{"version":3,"file":"main.js","sourceRoot":"/","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["import { NestFactory } from '@nestjs/core'\r\nimport { AppModule } from './app.module'\r\nimport { useContainer } from 'class-validator'\r\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger'\r\nimport { AppLogger } from '@src/common/services/app-logger.service'\r\nimport { TransformInterceptor } from '@common/interceptors/transform.interceptor'\r\nimport { AppExceptionFilter } from '@common/exceptions/app-exception.filter'\r\nimport { AppValidationPipe } from '@common/pipes/app-validate.pipe'\r\nimport { TrimRequestBodyPipe } from '@common/pipes/trim-req-body.pipe'\r\nimport {\r\n  init as sentryInit,\r\n  Integrations as SentryIntegrations,\r\n  Handlers as SentryHandlers,\r\n  autoDiscoverNodePerformanceMonitoringIntegrations\r\n} from '@sentry/node'\r\nimport { nodeProfilingIntegration } from '@sentry/profiling-node'\r\nimport { DiscordService } from '@common/services/discord.service'\r\nimport { json } from 'express'\r\nimport mongoose from 'mongoose'\r\nimport * as express from 'express';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    rawBody: true\r\n  })\r\n\r\n  // Sentry\r\n  if (process.env.NODE_ENV === 'production') {\r\n    sentryInit({\r\n      dsn: process.env.SENTRY_DSN,\r\n      integrations: [\r\n        // Automatically instrument Node.js libraries and frameworks\r\n        ...autoDiscoverNodePerformanceMonitoringIntegrations(),\r\n        // enable HTTP calls tracing\r\n        new SentryIntegrations.Http({ tracing: true }),\r\n        nodeProfilingIntegration()\r\n      ],\r\n      // Performance Monitoring\r\n      tracesSampleRate: 1.0, //  Capture 100% of the transactions\r\n      // Set sampling rate for profiling - this is relative to tracesSampleRate\r\n      profilesSampleRate: 1.0\r\n    })\r\n    app.use(SentryHandlers.requestHandler())\r\n    app.use(SentryHandlers.tracingHandler())\r\n  }\r\n\r\n  const logger = app.get(AppLogger)\r\n  const discordService = app.get(DiscordService)\r\n  app.useLogger(logger)\r\n  app.useGlobalInterceptors(new TransformInterceptor())\r\n  app.useGlobalFilters(new AppExceptionFilter(logger, discordService))\r\n  const globalPipes = [new TrimRequestBodyPipe(), new AppValidationPipe()]\r\n  app.useGlobalPipes(...globalPipes)\r\n\r\n  // Adding custom validator decorator\r\n  useContainer(app.select(AppModule), { fallbackOnErrors: true })\r\n\r\n  // add api-docs\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const config = new DocumentBuilder()\r\n      .setTitle('Orchidify Swagger')\r\n      .setDescription('Orchidify API documentation')\r\n      .setVersion(process.env.npm_package_version || '1.0.0')\r\n      .addBearerAuth()\r\n      .addBearerAuth(\r\n        {\r\n          type: 'http',\r\n          in: 'header',\r\n          scheme: 'bearer'\r\n        },\r\n        'RefreshToken'\r\n      )\r\n      .addSecurity('bearer', {\r\n        type: 'http',\r\n        scheme: 'bearer'\r\n      })\r\n      .build()\r\n    const document = SwaggerModule.createDocument(app, config)\r\n    SwaggerModule.setup('api-docs', app, document, {\r\n      swaggerOptions: {\r\n        persistAuthorization: true\r\n      }\r\n    })\r\n  }\r\n\r\n  if (process.env.NODE_ENV === 'local') {\r\n    mongoose.set('debug', true)\r\n  }\r\n\r\n  // Example: process.env.CORS_VALID_ORIGINS=localhost,ngrok-free => parse to [ /localhost/, /ngrok-free/ ]\r\n  const origins = process.env.CORS_VALID_ORIGINS?.split(',').map((origin) => new RegExp(origin)) || [\r\n    /localhost/,\r\n    /ngrok-free/,\r\n    /orchidify.tech/\r\n  ]\r\n  app.use('/transactions/payment/webhook/stripe', express.raw({ type: \"*/*\" }));\r\n  app.use('/media/upload/base64', json({ limit: '60mb' }))\r\n  app.use(json({ limit: '500kb' }))\r\n  app.enableCors({ origin: origins })\r\n\r\n  const port = process.env.PORT || 5000\r\n  await app.listen(port)\r\n  logger.debug(`ðŸš• ==>> Orchidify Server is running on port ${port} <<== ðŸš–`)\r\n}\r\nbootstrap()\r\n"]}