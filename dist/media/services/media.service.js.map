{"version":3,"file":"media.service.js","sourceRoot":"/","sources":["media/services/media.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAiE;AACjE,2CAA8C;AAG9C,4BAA2B;AAE3B,yEAA+D;AAC/D,wDAAgD;AAChD,iFAA+D;AAGxD,IAAM,YAAY,oBAAlB,MAAM,YAAY;IAEvB,YACmB,aAA4B,EACpB,UAAsC;QAD9C,kBAAa,GAAb,aAAa,CAAe;QACH,eAAU,GAAV,UAAU,CAAW;QAHhD,cAAS,GAAG,IAAI,8BAAS,CAAC,cAAY,CAAC,IAAI,CAAC,CAAA;IAI1D,CAAC;IACJ,YAAY;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QACnD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;IACrD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,oBAA0C;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAA;QACzD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC;YAC7C,GAAG,oBAAoB;YACvB,SAAS;SACV,CAAC,CAAA;QACF,OAAO,EAAE,GAAG,oBAAoB,EAAE,SAAS,EAAE,SAAS,EAAE,CAAA;IAC1D,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,uBAAgD;QAC3E,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAClD,yBAAyB,uBAAuB,CAAC,QAAQ,EAAE,EAC3D;gBACE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;aAC3C,CACF,CAAA;YACD,OAAO,MAAM,CAAA;QACf,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YACzB,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,kBAAkB,CAAC,CAAA;QACnD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,cAA8B;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAA;IAChH,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,MAAgB;QAC1C,MAAM,cAAc,GAAG,EAAE,CAAA;QACzB,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;QAC7D,CAAC,CAAC,CAAA;QAEF,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;QACzD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAA;QACnD,OAAO,eAAe,CAAA;IACxB,CAAC;CACF,CAAA;AAjDY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,eAAM,EAAC,eAAe,CAAC,CAAA;qCADQ,sBAAa;GAHpC,YAAY,CAiDxB","sourcesContent":["import { Inject, Injectable, OnModuleInit } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { SignApiOptions, v2 } from 'cloudinary'\r\nimport { GenerateSignedUrlDto } from '@media/dto/generate-signed-url.dto'\r\nimport * as _ from 'lodash'\r\nimport { UploadMediaViaBase64Dto } from '@media/dto/upload-media-via-base64.dto'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\n\r\n@Injectable()\r\nexport class MediaService implements OnModuleInit {\r\n  private readonly appLogger = new AppLogger(MediaService.name)\r\n  constructor(\r\n    private readonly configService: ConfigService,\r\n    @Inject('CLOUDINARY_V2') private readonly cloudinary: typeof v2\r\n  ) {}\r\n  onModuleInit() {\r\n    const config = this.configService.get('cloudinary')\r\n    this.cloudinary.config({ ...config, secure: true })\r\n  }\r\n\r\n  public async create(generateSignedUrlDto: GenerateSignedUrlDto) {\r\n    const timestamp = Math.round(new Date().getTime() / 1000)\r\n    const signature = await this.generateSignedUrl({\r\n      ...generateSignedUrlDto,\r\n      timestamp\r\n    })\r\n    return { ...generateSignedUrlDto, timestamp, signature }\r\n  }\r\n\r\n  public async uploadViaBase64(uploadMediaViaBase64Dto: UploadMediaViaBase64Dto) {\r\n    try {\r\n      const result = await this.cloudinary.uploader.upload(\r\n        `data:image/png;base64,${uploadMediaViaBase64Dto.contents}`,\r\n        {\r\n          ..._.pick(['type', 'public_id', 'folder'])\r\n        }\r\n      )\r\n      return result\r\n    } catch (err) {\r\n      this.appLogger.error(err)\r\n      throw new AppException(Errors.UPLOAD_MEDIA_ERROR)\r\n    }\r\n  }\r\n\r\n  private async generateSignedUrl(params_to_sign: SignApiOptions) {\r\n    return this.cloudinary.utils.api_sign_request(params_to_sign, this.configService.get('cloudinary.api_secret'))\r\n  }\r\n\r\n  public async uploadMultiple(images: string[]) {\r\n    const uploadPromises = []\r\n    images.forEach((image) => {\r\n      uploadPromises.push(this.cloudinary.uploader.upload(image))\r\n    })\r\n\r\n    const uploadResponses = await Promise.all(uploadPromises)\r\n    this.appLogger.log(JSON.stringify(uploadResponses))\r\n    return uploadResponses\r\n  }\r\n}\r\n"]}