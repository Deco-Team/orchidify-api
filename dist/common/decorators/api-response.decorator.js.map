{"version":3,"file":"api-response.decorator.js","sourceRoot":"/","sources":["common/decorators/api-response.decorator.ts"],"names":[],"mappings":";;;AAAA,2CAAgD;AAChD,6CAA6C;AAC7C,mCAAsC;AAGtC,SAAgB,gBAAgB,CAAC,cAAgC;IAC/D,MAAM,UAAU,GAAgE,EAAE,CAAA;IAElF,MAAM,SAAS,GAAG,IAAI,GAAG,EAA2B,CAAA;IACpD,cAAc,EAAE,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;QACxC,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;QACtD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,CAAA;QAC1D,CAAC;;YAAM,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC/B,UAAU,CAAC,IAAI,CACb,IAAA,qBAAW,EAAC;YACV,MAAM,EAAE,GAAG;YACX,WAAW,EAAE,GAAG,CAAC,QAAQ,EAAE;YAC3B,OAAO,EAAE;gBACP,kBAAkB,EAAE;oBAClB,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;wBACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,CAAA;wBACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,IAAA,aAAK,EAAC,MAAM,EAAE,YAAY,CAAC,EAAE,CAAA;wBAC3D,OAAO,IAAI,CAAA;oBACb,CAAC,EAAE,EAAE,CAAC;iBACP;aACF;SACF,CAAC,CACH,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO,IAAA,wBAAe,EAAC,GAAG,UAAU,CAAC,CAAA;AACvC,CAAC;AA9BD,4CA8BC","sourcesContent":["import { applyDecorators } from '@nestjs/common'\r\nimport { ApiResponse } from '@nestjs/swagger'\r\nimport { omit as _omit } from 'lodash'\r\nimport { ErrorResponse } from '@common/exceptions/app.exception'\r\n\r\nexport function ApiErrorResponse(errorResponses?: ErrorResponse[] ) {\r\n  const decorators: Array<ClassDecorator | MethodDecorator | PropertyDecorator> = []\r\n\r\n  const errorsMap = new Map<number, ErrorResponse[]>()\r\n  errorResponses?.forEach((errorResponse) => {\r\n    const errors = errorsMap.get(errorResponse.httpStatus)\r\n    if (!errors) {\r\n      errorsMap.set(errorResponse.httpStatus, [errorResponse])\r\n    } else errors.push(errorResponse)\r\n  })\r\n\r\n  errorsMap.forEach((value, key) => {\r\n    decorators.push(\r\n      ApiResponse({\r\n        status: key,\r\n        description: key.toString(),\r\n        content: {\r\n          'application/json': {\r\n            examples: value.reduce((list, schema) => {\r\n              list[schema.error] = { value: schema }\r\n              list[schema.error] = { value: _omit(schema, 'httpStatus') }\r\n              return list\r\n            }, {})\r\n          }\r\n        }\r\n      })\r\n    )\r\n  })\r\n\r\n  return applyDecorators(...decorators)\r\n}\r\n"]}