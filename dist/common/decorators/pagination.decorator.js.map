{"version":3,"file":"pagination.decorator.js","sourceRoot":"/","sources":["common/decorators/pagination.decorator.ts"],"names":[],"mappings":";;;AAAA,2CAAuE;AACvE,4BAA2B;AAQ3B,MAAM,aAAa,GAAG,EAAE,CAAA;AAEjB,MAAM,gBAAgB,GAAuC,CAAC,OAAO,EAAE,EAAE;IAC9E,MAAM,gBAAgB,GAAG;QACvB,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI;QACxB,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK;QAC1B,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI;KACzB,CAAA;IACD,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7F,gBAAgB,CAAC,KAAK;QACpB,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,GAAG;YAC1E,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC;YAChC,CAAC,CAAC,aAAa,CAAA;IACnB,IAAI,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;QACrC,gBAAgB,CAAC,IAAI,GAAG;YACtB,SAAS,EAAE,CAAC,CAAC;SACd,CAAA;IACH,CAAC;SAAM,CAAC;QACN,MAAM,MAAM,GAAG,EAAE,CAAA;QACjB,MAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACnD,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI;gBAAE,OAAM;YACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAA;YAC/D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;QAC1B,CAAC;QACD,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAA;IAChC,CAAC;IACD,OAAO,gBAAgB,CAAA;AACzB,CAAC,CAAA;AA7BY,QAAA,gBAAgB,oBA6B5B;AAmBY,QAAA,UAAU,GAAG,IAAA,6BAAoB,EAAC,CAAC,IAAa,EAAE,GAAqB,EAAE,EAAE;IACtF,MAAM,OAAO,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAA;IAC/C,OAAO,IAAA,wBAAgB,EAAC,OAAO,CAAC,CAAA;AAClC,CAAC,CAAC,CAAA","sourcesContent":["import { ExecutionContext, createParamDecorator } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\n\r\nexport interface PaginationParams {\r\n  page: number\r\n  limit: number\r\n  sort: Record<string, any>\r\n}\r\n\r\nconst DEFAULT_LIMIT = 10\r\n\r\nexport const handlePagination: (request: any) => PaginationParams = (request) => {\r\n  const paginationParams = {\r\n    page: request.query.page,\r\n    limit: request.query.limit,\r\n    sort: request.query.sort\r\n  }\r\n  paginationParams.page = Number(paginationParams.page) > 0 ? Number(paginationParams.page) : 1\r\n  paginationParams.limit =\r\n    Number(paginationParams.limit) >= 1 && Number(paginationParams.limit) <= 100\r\n      ? Number(paginationParams.limit)\r\n      : DEFAULT_LIMIT\r\n  if (_.isEmpty(paginationParams.sort)) {\r\n    paginationParams.sort = {\r\n      createdAt: -1\r\n    }\r\n  } else {\r\n    const result = {}\r\n    const sortFields = paginationParams.sort.split('_')\r\n    sortFields.forEach((item) => {\r\n      if (!item) return\r\n      const sortType = item.indexOf('.asc') !== -1 ? '.asc' : '.desc'\r\n      result[item.replace(sortType, '')] = sortType === '.asc' ? 1 : -1\r\n    })\r\n    if (_.isEmpty(result)) {\r\n      result['createdAt'] = -1\r\n    }\r\n    paginationParams.sort = result\r\n  }\r\n  return paginationParams\r\n}\r\n\r\n/**\r\n * How to use\r\n - In controller: \r\n  @ApiQuery({ type: PaginationQuery })\r\n  @Get()\r\n  async list(\r\n    @Pagination() paginationParams: PaginationParams,\r\n    @Query() filterDto: FilterDto,\r\n  ) {\r\n    return await this.service.list(filterDto, paginationParams);\r\n  }\r\n\r\n  - In service:\r\n  async list(filterDto, paginationParams) {\r\n    return await this.service.list(filterDto, paginationParams);\r\n  }\r\n */\r\nexport const Pagination = createParamDecorator((data: unknown, ctx: ExecutionContext) => {\r\n  const request = ctx.switchToHttp().getRequest()\r\n  return handlePagination(request)\r\n})\r\n"]}