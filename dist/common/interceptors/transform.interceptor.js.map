{"version":3,"file":"transform.interceptor.js","sourceRoot":"/","sources":["common/interceptors/transform.interceptor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA2F;AAC3F,+BAAsC;AAO/B,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAA,UAAG,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IACtD,CAAC;CACF,CAAA;AAJY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;GACA,oBAAoB,CAIhC","sourcesContent":["import { NestInterceptor, ExecutionContext, CallHandler, Injectable } from '@nestjs/common'\r\nimport { Observable, map } from 'rxjs'\r\n\r\nexport interface Response<T> {\r\n  data: T\r\n}\r\n\r\n@Injectable()\r\nexport class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\r\n    return next.handle().pipe(map((data) => ({ data })))\r\n  }\r\n}\r\n"]}