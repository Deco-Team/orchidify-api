{"version":3,"file":"helper.service.js","sourceRoot":"/","sources":["common/services/helper.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { createHmac } from 'crypto'\r\nimport * as bcrypt from 'bcrypt'\r\nimport { Connection, ClientSession } from 'mongoose'\r\nimport { Weekday } from '@common/contracts/constant'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport * as moment from 'moment-timezone'\r\nimport * as fs from 'fs'\r\nimport * as path from 'path'\r\nimport * as ejs from 'ejs'\r\nimport * as playwright from 'playwright'\r\nimport { AppLogger } from './app-logger.service'\r\n\r\nexport type GeneratePDFResponse = {\r\n  status: boolean\r\n  certificatePath: string\r\n  metadata: object\r\n  error?: string\r\n}\r\n\r\n@Injectable()\r\nexport class HelperService {\r\n  private readonly appLogger = new AppLogger(HelperService.name)\r\n  constructor(@InjectConnection() private readonly connection: Connection) {}\r\n\r\n  async executeCommandsInTransaction(\r\n    fn: (session: ClientSession, data?: Record<string, any>) => Promise<any>,\r\n    data?: Record<string, any>\r\n  ): Promise<any> {\r\n    let result: any\r\n    const session = await this.connection.startSession()\r\n    await session.withTransaction(async () => {\r\n      result = await fn(session, data)\r\n    })\r\n    return result\r\n  }\r\n\r\n  createSignature(rawData: string, key: string) {\r\n    const signature = createHmac('sha256', key).update(rawData).digest('hex')\r\n    return signature\r\n  }\r\n\r\n  generateRandomString = (length = 6, characters = '0123456789') => {\r\n    let randomString = ''\r\n    for (let i = 0; i < length; i++) {\r\n      const randomIndex = Math.floor(Math.random() * characters.length)\r\n      randomString += characters.charAt(randomIndex)\r\n    }\r\n    return randomString\r\n  }\r\n\r\n  async hashPassword(password: string): Promise<string> {\r\n    const salt = await bcrypt.genSalt()\r\n    const hash = await bcrypt.hash(password, salt)\r\n    return hash\r\n  }\r\n\r\n  async comparePassword(password: string, hash: string): Promise<boolean> {\r\n    return await bcrypt.compare(password, hash)\r\n  }\r\n\r\n  validateWeekdays(weekdays: Weekday[]): boolean {\r\n    if (!weekdays || weekdays.length !== 2) {\r\n      return false\r\n    }\r\n\r\n    const validWeekdayTuples = [\r\n      [Weekday.MONDAY, Weekday.THURSDAY],\r\n      [Weekday.TUESDAY, Weekday.FRIDAY],\r\n      [Weekday.WEDNESDAY, Weekday.SATURDAY]\r\n    ]\r\n\r\n    return validWeekdayTuples.some((tuple) => weekdays[0] === tuple[0] && weekdays[1] === tuple[1])\r\n  }\r\n\r\n  convertDataToPaging({\r\n    docs,\r\n    totalDocs,\r\n    limit,\r\n    page\r\n  }: {\r\n    docs: Array<any>\r\n    totalDocs: number\r\n    limit: number\r\n    page: number\r\n  }) {\r\n    const totalPages = totalDocs < limit ? 1 : Math.ceil(totalDocs / limit)\r\n    return {\r\n      docs,\r\n      totalDocs,\r\n      limit,\r\n      page,\r\n      totalPages,\r\n      pagingCounter: null,\r\n      hasPrevPage: page > totalPages,\r\n      hasNextPage: page < totalPages,\r\n      prevPage: page - 1 === 0 ? null : page - 1,\r\n      nextPage: page < totalPages ? page + 1 : null\r\n    }\r\n  }\r\n\r\n  getDiffTimeByMilliseconds(date: Date): number {\r\n    const diffTime = moment.tz(date, VN_TIMEZONE).diff(moment().tz(VN_TIMEZONE), 'milliseconds')\r\n    return diffTime > 0 ? diffTime : 0\r\n  }\r\n\r\n  async generatePDF(params: {\r\n    data: {\r\n      learnerName: string\r\n      courseTitle: string\r\n      dateCompleted: string\r\n      certificateCode: string\r\n      instructorName: string\r\n      instructorSignature?: string\r\n    }\r\n    templatePath?: string\r\n    certificatePath?: string\r\n    metadata?: object\r\n  }): Promise<GeneratePDFResponse> {\r\n    const {\r\n      data,\r\n      templatePath = './templates/learner/certificate.ejs',\r\n      certificatePath = 'certs/certificate.pdf',\r\n      metadata = {}\r\n    } = params\r\n    this.appLogger.debug(`[generatePDF]: templatePath=${templatePath}, data=${JSON.stringify(data)}`)\r\n    try {\r\n      const fileName = path.resolve(__dirname, '../../', templatePath)\r\n      // Compile EJS template\r\n      const templateContent = fs.readFileSync(fileName, 'utf-8')\r\n      const compiledTemplate = ejs.compile(templateContent, { async: true })\r\n\r\n      // Render HTML content using the template\r\n      const htmlContent = await compiledTemplate(data)\r\n\r\n      // Launch browser\r\n      const browser = await playwright.chromium.launch()\r\n\r\n      // Create a new browser context\r\n      const context = await browser.newContext()\r\n\r\n      // Create a new page\r\n      const page = await context.newPage()\r\n\r\n      // Set HTML content directly using setContent\r\n      await page.setContent(htmlContent)\r\n\r\n      // Generate PDF from HTML\r\n      await page.pdf({\r\n        path: certificatePath, // Specify the path to save the PDF file\r\n        format: 'A4', // Specify the page format,\r\n\r\n        printBackground: true,\r\n        preferCSSPageSize: true,\r\n        margin: {\r\n          top: '10mm',\r\n          bottom: '10mm',\r\n          left: '0',\r\n          right: '0',\r\n        }\r\n      })\r\n\r\n      // Close the browser\r\n      await browser.close()\r\n\r\n      this.appLogger.log(`[generatePDF]: PDF file generated successfully.`)\r\n      return { status: true, certificatePath, metadata }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[generatePDF]: error templatePath=${templatePath}, data=${JSON.stringify(data)}, error=${error}`\r\n      )\r\n      return { error: error.name, status: false, certificatePath, metadata }\r\n    }\r\n  }\r\n}\r\n"]}