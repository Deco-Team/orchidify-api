{"version":3,"file":"index.js","sourceRoot":"/","sources":["common/repositories/index.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference types=\"mongoose-paginate-v2\" />\r\nimport {\r\n  Document,\r\n  QueryOptions,\r\n  SaveOptions,\r\n  FilterQuery,\r\n  UpdateQuery,\r\n  PaginateModel,\r\n  PaginateOptions,\r\n  IfAny,\r\n  Require_id,\r\n  UpdateWriteOpResult,\r\n  MongooseQueryOptions\r\n} from 'mongoose'\r\nimport { AppException, ErrorResponse } from '@common/exceptions/app.exception'\r\nimport { PopulateOptions } from 'mongoose'\r\nimport { Errors } from '@common/contracts/error'\r\n\r\nexport abstract class AbstractRepository<T extends Document> {\r\n  model: PaginateModel<T>\r\n  constructor(model: PaginateModel<T>) {\r\n    this.model = model\r\n  }\r\n\r\n  findOne({\r\n    conditions,\r\n    projection,\r\n    populates,\r\n    options\r\n  }: {\r\n    conditions: FilterQuery<T>\r\n    projection?: Record<string, any> | string\r\n    populates?: Array<PopulateOptions>\r\n    options?: QueryOptions\r\n  }): Promise<T | undefined> {\r\n    const query = this.model.findOne(conditions, projection, options)\r\n    query.populate(populates)\r\n    return query.exec()\r\n  }\r\n\r\n  async firstOrFail({\r\n    conditions,\r\n    projection,\r\n    options,\r\n    populates,\r\n    error\r\n  }: {\r\n    conditions: FilterQuery<T>\r\n    projection?: Record<string, any> | string\r\n    populates?: Array<PopulateOptions>\r\n    options?: QueryOptions\r\n    error?: ErrorResponse\r\n  }): Promise<T> {\r\n    const entity = await this.findOne({\r\n      conditions,\r\n      projection,\r\n      populates,\r\n      options\r\n    })\r\n    if (entity) {\r\n      return entity\r\n    }\r\n    if (!error) {\r\n      error = Errors.OBJECT_NOT_FOUND\r\n    }\r\n    throw new AppException(error)\r\n  }\r\n\r\n  findMany({\r\n    conditions,\r\n    projection,\r\n    populates,\r\n    sort,\r\n    options\r\n  }: {\r\n    conditions: FilterQuery<T>\r\n    projection?: Record<string, any>\r\n    populates?: Array<PopulateOptions>\r\n    sort?: Record<string, any>\r\n    options?: QueryOptions\r\n  }): Promise<Array<T>> {\r\n    const query = this.model.find(conditions, projection, options)\r\n    query.populate(populates)\r\n    if (sort) {\r\n      query.sort(sort)\r\n    }\r\n    return query.exec()\r\n  }\r\n\r\n  paginate(\r\n    conditions: FilterQuery<T>,\r\n    options?: PaginateOptions\r\n  ): Promise<\r\n    import('mongoose').PaginateResult<\r\n      import('mongoose').IfAny<\r\n        T,\r\n        any,\r\n        Document<unknown, PaginateOptions, T> & Omit<import('mongoose').Require_id<T>, never>\r\n      >\r\n    >\r\n  > {\r\n    return this.model.paginate(conditions, options)\r\n  }\r\n\r\n  async create(payload: Record<string, any>, options?: SaveOptions | undefined): Promise<T> {\r\n    const entity = new this.model(payload)\r\n    await entity.save(options)\r\n    return entity\r\n  }\r\n\r\n  async updateOneOrFail(conditions: FilterQuery<T>, payload: object, options?: SaveOptions): Promise<T> {\r\n    const data = await this.firstOrFail({ conditions })\r\n    data.set(payload)\r\n    return data.save(options)\r\n  }\r\n\r\n  findOneAndUpdate(\r\n    conditions: FilterQuery<T>,\r\n    payload: UpdateQuery<T>,\r\n    options?: QueryOptions\r\n  ): Promise<\r\n    import('mongoose').IfAny<T, any, Document<unknown, {}, T> & Omit<import('mongoose').Require_id<T>, never>>\r\n  > {\r\n    return this.model.findOneAndUpdate(conditions, payload, options).exec()\r\n  }\r\n\r\n  updateMany(\r\n    conditions: FilterQuery<T>,\r\n    payload: UpdateQuery<T>,\r\n    options?: (import('mongodb').UpdateOptions & Omit<MongooseQueryOptions<T>, 'lean'>) | null\r\n  ): Promise<UpdateWriteOpResult> {\r\n    return this.model.updateMany(conditions, payload, options).exec()\r\n  }\r\n\r\n  findOneAndDelete(\r\n    conditions: FilterQuery<T>,\r\n    options?: QueryOptions\r\n  ): Promise<IfAny<T, any, Document<unknown, {}, T> & Omit<Require_id<T>, never>>> {\r\n    return this.model.findOneAndDelete(conditions, options).exec()\r\n  }\r\n\r\n  deleteMany(\r\n    conditions: FilterQuery<T>,\r\n    options?: (import('mongodb').DeleteOptions & Omit<MongooseQueryOptions<T>, 'lean' | 'timestamps'>) | null\r\n  ): Promise<import('mongodb').DeleteResult> {\r\n    return this.model.deleteMany(conditions, options).exec()\r\n  }\r\n}\r\n"]}