{"version":3,"file":"app-exception.filter.js","sourceRoot":"/","sources":["common/exceptions/app-exception.filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArgumentsHost, Catch, HttpException, HttpStatus, LoggerService } from '@nestjs/common'\r\nimport { BaseExceptionFilter } from '@nestjs/core'\r\nimport * as _ from 'lodash'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { captureException as sentryCaptureException } from '@sentry/node'\r\nimport { DiscordService } from '@common/services/discord.service'\r\nimport { Errors } from '@common/contracts/error'\r\n\r\n@Catch()\r\nexport class AppExceptionFilter extends BaseExceptionFilter {\r\n  private appLogger: LoggerService\r\n  private discordService: DiscordService\r\n  constructor(logger: LoggerService, discordService?: DiscordService) {\r\n    super()\r\n    this.appLogger = logger\r\n    if (discordService) this.discordService = discordService\r\n  }\r\n\r\n  catch(exception: any, host: ArgumentsHost): void {\r\n    const ctx = host.switchToHttp()\r\n    const response = ctx.getResponse()\r\n    const { error, httpStatus, message, data } = this._parseError(exception)\r\n    if (httpStatus === HttpStatus.INTERNAL_SERVER_ERROR) {\r\n      response.status(httpStatus).json({\r\n        error: Errors.INTERNAL_SERVER_ERROR.error,\r\n        message: Errors.INTERNAL_SERVER_ERROR.message,\r\n        data: {\r\n          result: data\r\n        }\r\n      })\r\n    } else {\r\n      response.status(httpStatus).json({\r\n        error,\r\n        message,\r\n        data: {\r\n          result: data\r\n        }\r\n      })\r\n    }\r\n\r\n    if (httpStatus === HttpStatus.INTERNAL_SERVER_ERROR && process.env.NODE_ENV !== 'local') {\r\n      // Sentry\r\n      sentryCaptureException(exception)\r\n\r\n      // Discord Bot\r\n      if (this.discordService)\r\n        this.discordService.sendMessage({\r\n          fields: [\r\n            {\r\n              name: `${ctx.getRequest().method} ${ctx.getRequest().url}`,\r\n              value: `${httpStatus} ${JSON.stringify(ctx.getRequest().body)}`\r\n            },\r\n            {\r\n              name: 'Error',\r\n              value: error\r\n            },\r\n            {\r\n              name: 'Message',\r\n              value: message\r\n            },\r\n            {\r\n              name: 'Data',\r\n              value: `${JSON.stringify(data).slice(0, 200)}...`\r\n            },\r\n            {\r\n              name: 'stackTrace',\r\n              value: `${JSON.stringify(exception.stack).slice(0, 200)}...`\r\n            }\r\n          ]\r\n        })\r\n    }\r\n    // if (process.env.NODE_ENV !== 'test') {\r\n    //   this.appLogger.error(message, httpStatus, exception.stack)\r\n    // }\r\n    if (!(process.env.NODE_ENV === 'test' && process.env.COVERAGE)) {\r\n      this.appLogger.error(message, httpStatus, exception.stack)\r\n    }\r\n  }\r\n  private _parseError(exception) {\r\n    let error = ''\r\n    let message = ''\r\n    let data = {}\r\n    let httpStatus = HttpStatus.INTERNAL_SERVER_ERROR\r\n    if (exception instanceof AppException) {\r\n      error = exception.error\r\n      httpStatus = exception.httpStatus\r\n      message = exception.message\r\n      data = exception.data\r\n    }\r\n    if (exception instanceof HttpException) {\r\n      httpStatus = exception.getStatus()\r\n      const responseData = exception.getResponse()\r\n      if (typeof responseData === 'string') {\r\n        message = responseData\r\n      } else {\r\n        message = 'internal error'\r\n        if (typeof _.get(responseData, 'message') === 'string') {\r\n          message = _.get(responseData, 'message')\r\n        }\r\n        if (typeof _.get(responseData, 'error') === 'string') {\r\n          error = _.get(responseData, 'error')\r\n        }\r\n        data = responseData\r\n      }\r\n    }\r\n    if (message === '') {\r\n      const error = exception\r\n      message = error.message\r\n    }\r\n    return {\r\n      error,\r\n      httpStatus,\r\n      message,\r\n      data\r\n    }\r\n  }\r\n}\r\n"]}