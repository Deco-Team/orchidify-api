{"version":3,"file":"certificate.service.js","sourceRoot":"/","sources":["certificate/services/certificate.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,wDAAgD;AAEhD,yEAA+D;AAC/D,yEAA+D;AAC/D,2CAAmD;AACnD,oDAA6E;AAG7E,mFAAyF;AAEzF,uCAAsG;AAEzF,QAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAA;AAmBzD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEmB,qBAA6C,EAC7C,aAA4B;QAD5B,0BAAqB,GAArB,qBAAqB,CAAwB;QAC7C,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IAEG,KAAK,CAAC,MAAM,CAAC,oBAA0C,EAAE,OAAiC;QAC/F,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAA;QAC5D,oBAAoB,CAAC,MAAM,CAAC,GAAG,eAAe,CAAA;QAE9C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAA;QAC1F,OAAO,WAAW,CAAA;IACpB,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,aAAqB,EACrB,UAAyC,EACzC,SAAkC;QAElC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;YAC3D,UAAU,EAAE;gBACV,GAAG,EAAE,aAAa;aACnB;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,WAAW,CAAA;IACpB,CAAC;IAEM,MAAM,CACX,UAAoC,EACpC,OAAyC,EACzC,OAAkC;QAElC,OAAO,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAClF,CAAC;IAED,KAAK,CAAC,IAAI,CACR,UAA4B,EAC5B,mBAAwC,EACxC,UAAU,GAAG,sCAA2B;QAExC,MAAM,EAAE,OAAO,EAAE,GAAG,mBAAmB,CAAA;QACvC,MAAM,MAAM,GAAwB;YAClC,OAAO,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;SACrC,CAAA;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACvD,GAAG,UAAU;YACb,UAAU;SACX,CAAC,CAAA;IACJ,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE;QACrE,MAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;QACnE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC;YAC3D,UAAU,EAAE;gBACV,IAAI;aACL;SACF,CAAC,CAAA;QAEF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;QAC1C,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAA;QAC7B,MAAM,OAAO,GAAG,WAAW,GAAG,EAAE,GAAG,IAAI,CAAA;QACvC,IAAI,OAAO;YAAE,OAAO,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;QACzE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,qBAAqB,CAAC,CAAA;IACtD,CAAC;CACF,CAAA;AApEY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,+CAAsB,CAAC,CAAA;6CAEC,8BAAa;GAJpC,kBAAkB,CAoE9B","sourcesContent":["import { NotificationAdapter } from '@common/adapters/notification.adapter'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { Injectable, Inject } from '@nestjs/common'\r\nimport { CERTIFICATE_LIST_PROJECTION } from '@certificate/contracts/constant'\r\nimport { CreateCertificateDto } from '@certificate/dto/create-certificate.dto'\r\nimport { QueryCertificateDto } from '@certificate/dto/view-certificate.dto'\r\nimport { ICertificateRepository } from '@certificate/repositories/certificate.repository'\r\nimport { Certificate, CertificateDocument } from '@certificate/schemas/certificate.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\n\r\nexport const ICertificateService = Symbol('ICertificateService')\r\n\r\nexport interface ICertificateService {\r\n  create(createCertificateDto: CreateCertificateDto, options?: SaveOptions | undefined): Promise<CertificateDocument>\r\n  findById(\r\n    certificateId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<CertificateDocument>\r\n  update(\r\n    conditions: FilterQuery<Certificate>,\r\n    payload: UpdateQuery<Certificate>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<CertificateDocument>\r\n  list(pagination: PaginationParams, queryCertificateDto: QueryCertificateDto)\r\n  generateCertificateCode(length?: number, startTime?: number): string\r\n}\r\n\r\n@Injectable()\r\nexport class CertificateService implements ICertificateService {\r\n  constructor(\r\n    @Inject(ICertificateRepository)\r\n    private readonly certificateRepository: ICertificateRepository,\r\n    private readonly helperService: HelperService\r\n  ) {}\r\n\r\n  public async create(createCertificateDto: CreateCertificateDto, options?: SaveOptions | undefined) {\r\n    const certificateCode = await this.generateCertificateCode()\r\n    createCertificateDto['code'] = certificateCode\r\n\r\n    const certificate = await this.certificateRepository.create(createCertificateDto, options)\r\n    return certificate\r\n  }\r\n\r\n  public async findById(\r\n    certificateId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const certificate = await this.certificateRepository.findOne({\r\n      conditions: {\r\n        _id: certificateId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return certificate\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<Certificate>,\r\n    payload: UpdateQuery<CertificateDocument>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.certificateRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryCertificateDto: QueryCertificateDto,\r\n    projection = CERTIFICATE_LIST_PROJECTION\r\n  ) {\r\n    const { ownerId } = queryCertificateDto\r\n    const filter: Record<string, any> = {\r\n      ownerId: new Types.ObjectId(ownerId)\r\n    }\r\n\r\n    return this.certificateRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n\r\n  public async generateCertificateCode(length = 8, startTime = Date.now()) {\r\n    const code = 'OC' + this.helperService.generateRandomString(length)\r\n    const certificate = await this.certificateRepository.findOne({\r\n      conditions: {\r\n        code\r\n      }\r\n    })\r\n\r\n    const elapsedTime = Date.now() - startTime\r\n    if (!certificate) return code\r\n    const isRetry = elapsedTime < 60 * 1000\r\n    if (isRetry) return await this.generateCertificateCode(length, startTime)\r\n    throw new AppException(Errors.INTERNAL_SERVER_ERROR)\r\n  }\r\n}\r\n"]}