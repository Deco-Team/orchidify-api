{"version":3,"file":"learner.certificate.controller.js","sourceRoot":"/","sources":["certificate/controllers/learner.certificate.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAsF;AACtF,6CAAsH;AACtH,4BAA2B;AAE3B,oDAAsE;AACtE,2EAAwD;AACxD,8DAAqD;AACrD,qEAA0D;AAC1D,+DAAqD;AACrD,yEAA+E;AAC/E,uFAAsF;AACtF,sEAI8C;AAC9C,2FAA4E;AAC5E,wDAAgD;AAChD,oDAA+E;AAC/E,yEAA+D;AAQxD,IAAM,4BAA4B,GAAlC,MAAM,4BAA4B;IACvC,YAEmB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IACvD,CAAC;IAQE,AAAN,KAAK,CAAC,IAAI,CAAQ,GAAG,EAAgB,UAA4B,EAAW,aAAkC;QAC5G,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAClC,aAAa,CAAC,OAAO,GAAG,GAAG,CAAA;QAC3B,UAAU,CAAC,KAAK,GAAG,EAAE,CAAA;QACrB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,CAAA;IACtE,CAAC;IAQK,AAAN,KAAK,CAAC,SAAS,CAAQ,GAAG,EAAe,aAAqB;QAC5D,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAClC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,EAAE,wCAA6B,CAAC,CAAA;QAExG,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,GAAG;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,qBAAqB,CAAC,CAAA;QAChH,OAAO,WAAW,CAAA;IACpB,CAAC;CACF,CAAA;AAhCY,oEAA4B;AAYjC;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,yBAAyB;KACnC,CAAC;IACD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,qBAAe,EAAE,CAAC;IACnC,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,kDAA2B,EAAE,CAAC;IACpD,IAAA,YAAG,GAAE;IACM,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,iCAAU,GAAE,CAAA;IAAgC,WAAA,IAAA,cAAK,GAAE,CAAA;;qDAAgB,0CAAmB;;wDAK7G;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,2BAA2B;KACrC,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,oDAA6B,EAAE,CAAC;IACtD,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,qBAAqB,CAAC,CAAC;IAChD,IAAA,YAAG,EAAC,mBAAmB,CAAC;IACR,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,cAAK,EAAC,IAAI,CAAC,CAAA;;;;6DAMvC;uCA/BU,4BAA4B;IANxC,IAAA,iBAAO,EAAC,uBAAuB,CAAC;IAChC,IAAA,uBAAa,GAAE;IACf,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAC9C,IAAA,kBAAS,EAAC,6BAAY,CAAC,YAAY,EAAE,wBAAU,CAAC;IAChD,IAAA,uBAAK,EAAC,mBAAQ,CAAC,OAAO,CAAC;IACvB,IAAA,mBAAU,EAAC,UAAU,CAAC;IAGlB,WAAA,IAAA,eAAM,EAAC,yCAAmB,CAAC,CAAA;;GAFnB,4BAA4B,CAgCxC","sourcesContent":["import { Controller, Get, Inject, Param, Query, Req, UseGuards } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse, PaginationQuery } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { ICertificateService } from '@certificate/services/certificate.service'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport {\r\n  CertificateDetailDataResponse,\r\n  CertificateListDataResponse,\r\n  QueryCertificateDto\r\n} from '@certificate/dto/view-certificate.dto'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { CERTIFICATE_DETAIL_PROJECTION } from '@certificate/contracts/constant'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\n\r\n@ApiTags('Certificate - Learner')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Roles(UserRole.LEARNER)\r\n@Controller('learners')\r\nexport class LearnerCertificateController {\r\n  constructor(\r\n    @Inject(ICertificateService)\r\n    private readonly certificateService: ICertificateService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `View Certification List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: CertificateListDataResponse })\r\n  @Get()\r\n  async list(@Req() req, @Pagination() pagination: PaginationParams, @Query() queryStaffDto: QueryCertificateDto) {\r\n    const { _id } = _.get(req, 'user')\r\n    queryStaffDto.ownerId = _id\r\n    pagination.limit = 99\r\n    return await this.certificateService.list(pagination, queryStaffDto)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View Certification Detail`\r\n  })\r\n  @ApiOkResponse({ type: CertificateDetailDataResponse })\r\n  @ApiErrorResponse([Errors.CERTIFICATE_NOT_FOUND])\r\n  @Get(':id([0-9a-f]{24})')\r\n  async getDetail(@Req() req, @Param('id') certificateId: string) {\r\n    const { _id } = _.get(req, 'user')\r\n    const certificate = await this.certificateService.findById(certificateId, CERTIFICATE_DETAIL_PROJECTION)\r\n\r\n    if (!certificate || certificate.ownerId.toString() !== _id) throw new AppException(Errors.CERTIFICATE_NOT_FOUND)\r\n    return certificate\r\n  }\r\n}\r\n"]}