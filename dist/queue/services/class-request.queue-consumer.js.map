{"version":3,"file":"class-request.queue-consumer.js","sourceRoot":"/","sources":["queue/services/class-request.queue-consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as moment from 'moment-timezone'\r\nimport { IClassRequestService } from '@class-request/services/class-request.service'\r\nimport { ClassRequestStatus, ClassRequestType, UserRole } from '@common/contracts/constant'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { Processor, WorkerHost } from '@nestjs/bullmq'\r\nimport { Inject } from '@nestjs/common'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { Job } from 'bullmq'\r\nimport { VN_TIMEZONE } from '@src/config'\r\n\r\n@Processor(QueueName.CLASS_REQUEST)\r\nexport class ClassRequestQueueConsumer extends WorkerHost {\r\n  private readonly appLogger = new AppLogger(ClassRequestQueueConsumer.name)\r\n  constructor(\r\n    @Inject(IClassRequestService)\r\n    private readonly classRequestService: IClassRequestService\r\n  ) {\r\n    super()\r\n  }\r\n\r\n  async process(job: Job<any>): Promise<any> {\r\n    this.appLogger.log(`[process] Processing job id=${job.id}`)\r\n    try {\r\n      switch (job.name) {\r\n        case JobName.ClassRequestAutoExpired: {\r\n          return await this.updateStatusToExpired(job)\r\n        }\r\n        default:\r\n      }\r\n      this.appLogger.log('[process] Job processed successfully')\r\n    } catch (error) {\r\n      this.appLogger.error(error)\r\n      throw error // Re-queue job in case of failure\r\n    }\r\n  }\r\n\r\n  async updateStatusToExpired(job: Job) {\r\n    this.appLogger.debug(`[updateStatusToExpired]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`)\r\n    \r\n    // check expired time\r\n    const { expiredAt } = job.data\r\n    const isExpired = moment.tz(VN_TIMEZONE).isSameOrAfter(moment.tz(expiredAt, VN_TIMEZONE))\r\n    if (!isExpired) return 'Class Request not expired yet'\r\n\r\n    try {\r\n      this.appLogger.log(`[updateStatusToExpired]: Start update status... id=${job.id}`)\r\n      const classRequest = await this.classRequestService.findById(job.id)\r\n      if (!classRequest) return Errors.CLASS_REQUEST_NOT_FOUND.error\r\n\r\n      if (classRequest.type === ClassRequestType.PUBLISH_CLASS) {\r\n        await this.classRequestService.expirePublishClassRequest(job.id, { role: 'SYSTEM' as UserRole })\r\n      } else if(classRequest.type === ClassRequestType.CANCEL_CLASS) {\r\n        await this.classRequestService.expireCancelClassRequest(job.id, { role: 'SYSTEM' as UserRole })\r\n      }\r\n\r\n      this.appLogger.log(`[updateStatusToExpired]: End update status... id=${job.id}`)\r\n      return true\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[updateStatusToExpired]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n}\r\n"]}