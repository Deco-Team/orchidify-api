{"version":3,"file":"class.queue-consumer.js","sourceRoot":"/","sources":["queue/services/class.queue-consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as moment from 'moment-timezone'\r\nimport { ClassStatus, SlotNumber, SlotStatus, UserRole } from '@common/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { Processor, WorkerHost } from '@nestjs/bullmq'\r\nimport { Inject } from '@nestjs/common'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { Job } from 'bullmq'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\n\r\n@Processor(QueueName.CLASS)\r\nexport class ClassQueueConsumer extends WorkerHost {\r\n  private readonly appLogger = new AppLogger(ClassQueueConsumer.name)\r\n  constructor(\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService\r\n  ) {\r\n    super()\r\n  }\r\n\r\n  async process(job: Job<any>): Promise<any> {\r\n    this.appLogger.log(`[process] Processing job id=${job.id}`)\r\n    try {\r\n      switch (job.name) {\r\n        case JobName.UpdateClassStatusInProgress: {\r\n          return await this.updateClassStatusInProgress(job)\r\n        }\r\n        case JobName.UpdateClassProgressEndSlot: {\r\n          return await this.updateClassProgressEndSlot(job)\r\n        }\r\n        case JobName.ClassAutoCompleted: {\r\n          return await this.completeClassAutomatically(job)\r\n        }\r\n        default:\r\n      }\r\n      this.appLogger.log('[process] Job processed successfully')\r\n    } catch (error) {\r\n      this.appLogger.error(error)\r\n      throw error // Re-queue job in case of failure\r\n    }\r\n  }\r\n\r\n  async updateClassStatusInProgress(job: Job) {\r\n    this.appLogger.debug(\r\n      `[updateClassStatusInProgress]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`\r\n    )\r\n\r\n    try {\r\n      this.appLogger.log(`[updateClassStatusInProgress]: Start update class status... id=${job.id}`)\r\n      const courseClasses = await this.classService.findManyByStatus([ClassStatus.PUBLISHED])\r\n      if (courseClasses.length === 0) return 'No PUBLISHED status class'\r\n\r\n      const nowMoment = moment().tz(VN_TIMEZONE).startOf('date')\r\n      const updateClassStatusPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        const startOfDate = moment(courseClass.startDate).tz(VN_TIMEZONE).startOf('date')\r\n        if (startOfDate.isSameOrBefore(nowMoment)) {\r\n          updateClassStatusPromises.push(\r\n            this.classService.update(\r\n              { _id: courseClass._id },\r\n              {\r\n                $set: { status: ClassStatus.IN_PROGRESS },\r\n                $push: {\r\n                  histories: {\r\n                    status: ClassStatus.IN_PROGRESS,\r\n                    timestamp: new Date(),\r\n                    userRole: 'SYSTEM' as UserRole\r\n                  }\r\n                }\r\n              }\r\n            )\r\n          )\r\n        }\r\n      })\r\n      await Promise.all(updateClassStatusPromises)\r\n\r\n      this.appLogger.log(`[updateClassStatusInProgress]: End update status... id=${job.id}`)\r\n      return { status: true, numbersOfUpdatedClass: updateClassStatusPromises.length }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[updateClassStatusInProgress]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async updateClassProgressEndSlot(job: Job) {\r\n    const { slotNumber } = job.data\r\n    this.appLogger.debug(\r\n      `[updateClassProgressEndSlot]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`\r\n    )\r\n\r\n    try {\r\n      this.appLogger.log(`[updateClassProgressEndSlot]: Start update class progress... id=${job.id}`)\r\n\r\n      const startOfDate = moment().tz(VN_TIMEZONE).startOf('date')\r\n      let start, end: Date\r\n      switch (slotNumber) {\r\n        case SlotNumber.ONE:\r\n          start = startOfDate.clone().add(7, 'hour').toDate()\r\n          end = startOfDate.clone().add(9, 'hour').toDate()\r\n          break\r\n        case SlotNumber.TWO:\r\n          start = startOfDate.clone().add(9, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(11, 'hour').add(30, 'minute').toDate()\r\n          break\r\n        case SlotNumber.THREE:\r\n          start = startOfDate.clone().add(13, 'hour').toDate()\r\n          end = startOfDate.clone().add(15, 'hour').toDate()\r\n          break\r\n        case SlotNumber.FOUR:\r\n          start = startOfDate.clone().add(15, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(17, 'hour').add(30, 'minute').toDate()\r\n          break\r\n      }\r\n\r\n      const timesheets = await this.gardenTimesheetService.findMany({\r\n        'slots.start': start,\r\n        'slots.end': end\r\n      })\r\n\r\n      const classIds = new Set()\r\n      for (const timesheet of timesheets) {\r\n        for (const slot of timesheet.slots) {\r\n          if (slot.status === SlotStatus.NOT_AVAILABLE && slot.slotNumber === slotNumber) {\r\n            classIds.add(slot.classId)\r\n          }\r\n        }\r\n      }\r\n      const courseClasses = await this.classService.findMany({\r\n        _id: {\r\n          $in: [...classIds]\r\n        }\r\n      })\r\n\r\n      const updateClassProgressPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        const completed = courseClass.progress.completed + 1\r\n        const total = courseClass.progress.total\r\n        const percentage = Math.round((completed / total) * 100)\r\n        updateClassProgressPromises.push(\r\n          this.classService.update(\r\n            { _id: courseClass._id },\r\n            {\r\n              $set: { progress: { completed, total, percentage } }\r\n            }\r\n          )\r\n        )\r\n      })\r\n      await Promise.all(updateClassProgressPromises)\r\n\r\n      this.appLogger.log(`[updateClassProgressEndSlot]: End update class progress... id=${job.id}`)\r\n      return { status: true, numbersOfUpdatedClass: classIds.size }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[updateClassProgressEndSlot]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async completeClassAutomatically(job: Job) {\r\n    this.appLogger.debug(\r\n      `[completeClassAutomatically]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`\r\n    )\r\n\r\n    try {\r\n      this.appLogger.log(`[completeClassAutomatically]: Start complete class ... id=${job.id}`)\r\n\r\n      const startOfDate = moment().tz(VN_TIMEZONE).startOf('date')\r\n      const classAutoCompleteAfterDay =\r\n        Number((await this.settingService.findByKey(SettingKey.ClassAutoCompleteAfterDay)).value) || 5\r\n\r\n      const courseClasses = await this.classService.findMany({\r\n        status: ClassStatus.IN_PROGRESS\r\n      })\r\n\r\n      const completeClassPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        const { startDate, duration, weekdays } = courseClass\r\n        const classEndTime = this.classService.getClassEndTime({ startDate, duration, weekdays })\r\n\r\n        if (\r\n          classEndTime.isBefore(startOfDate) &&\r\n          classEndTime.clone().add(classAutoCompleteAfterDay, 'day').isSameOrAfter(startOfDate)\r\n        ) {\r\n          completeClassPromises.push(this.classService.completeClass(courseClass._id, { role: 'SYSTEM' as UserRole }))\r\n        }\r\n      })\r\n      await Promise.all(completeClassPromises)\r\n\r\n      this.appLogger.log(`[completeClassAutomatically]: End complete class... id=${job.id}`)\r\n      return { status: true, numbersOfCompletedClass: completeClassPromises.length }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[completeClassAutomatically]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n}\r\n"]}