{"version":3,"file":"class.queue-consumer.js","sourceRoot":"/","sources":["queue/services/class.queue-consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as moment from 'moment-timezone'\r\nimport { AttendanceStatus, ClassStatus, SlotNumber, SlotStatus, UserRole } from '@common/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { Processor, WorkerHost } from '@nestjs/bullmq'\r\nimport { Inject } from '@nestjs/common'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { Job } from 'bullmq'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { Class } from '@class/schemas/class.schema'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { GeneratePDFResponse, HelperService } from '@common/services/helper.service'\r\nimport * as _ from 'lodash'\r\nimport * as fs from 'fs'\r\nimport { MediaService } from '@media/services/media.service'\r\nimport { ICertificateService } from '@certificate/services/certificate.service'\r\nimport * as path from 'path'\r\nimport { UploadApiResponse } from 'cloudinary'\r\nimport { IAttendanceService } from '@attendance/services/attendance.service'\r\nimport { IAssignmentSubmissionService } from '@class/services/assignment-submission.service'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { FCMNotificationDataType } from '@notification/contracts/constant'\r\nimport { Types } from 'mongoose'\r\nimport { IGardenService } from '@garden/services/garden.service'\r\nimport { ReportTag, ReportType } from '@report/contracts/constant'\r\nimport { IReportService } from '@report/services/report.service'\r\n\r\n@Processor(QueueName.CLASS)\r\nexport class ClassQueueConsumer extends WorkerHost {\r\n  private readonly appLogger = new AppLogger(ClassQueueConsumer.name)\r\n  constructor(\r\n    private readonly helperService: HelperService,\r\n    private readonly mediaService: MediaService,\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService,\r\n    @Inject(ICertificateService)\r\n    private readonly certificateService: ICertificateService,\r\n    @Inject(IAttendanceService)\r\n    private readonly attendanceService: IAttendanceService,\r\n    @Inject(IAssignmentSubmissionService)\r\n    private readonly assignmentSubmissionService: IAssignmentSubmissionService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n    @Inject(IGardenService)\r\n    private readonly gardenService: IGardenService,\r\n    @Inject(IReportService)\r\n    private readonly reportService: IReportService\r\n  ) {\r\n    super()\r\n  }\r\n\r\n  async process(job: Job<any>): Promise<any> {\r\n    this.appLogger.log(`[process] Processing job id=${job.id}`)\r\n    try {\r\n      switch (job.name) {\r\n        case JobName.UpdateClassStatus: {\r\n          return await this.updateClassStatus(job)\r\n        }\r\n        case JobName.UpdateClassProgressEndSlot: {\r\n          return await this.updateClassProgressEndSlot(job)\r\n        }\r\n        case JobName.ClassAutoCompleted: {\r\n          return await this.completeClassAutomatically(job)\r\n        }\r\n        case JobName.SendClassCertificate: {\r\n          return await this.sendClassCertificate(job)\r\n        }\r\n        case JobName.RemindClassStartSlot: {\r\n          return await this.remindClassStartSlot(job)\r\n        }\r\n        case JobName.RemindClassStartSoon: {\r\n          return await this.remindClassStartSoon(job)\r\n        }\r\n        default:\r\n      }\r\n      this.appLogger.log('[process] Job processed successfully')\r\n    } catch (error) {\r\n      this.appLogger.error(error)\r\n      throw error // Re-queue job in case of failure\r\n    }\r\n  }\r\n\r\n  async updateClassStatus(job: Job) {\r\n    this.appLogger.debug(`[updateClassStatus]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`)\r\n\r\n    try {\r\n      this.appLogger.log(`[updateClassStatus]: Start update class status... id=${job.id}`)\r\n      const courseClasses = await this.classService.findManyByStatus([ClassStatus.PUBLISHED])\r\n      if (courseClasses.length === 0) return 'No PUBLISHED status class'\r\n\r\n      const nowMoment = moment().tz(VN_TIMEZONE).startOf('date')\r\n      const updateClassStatusPromises = []\r\n      const updateClassToInProgress = []\r\n      const updateClassToCanceled = []\r\n      const updateClassReportPromises = []\r\n      const classAutoCancelMinLearners =\r\n        Number((await this.settingService.findByKey(SettingKey.ClassAutoCancelMinLearners)).value) || 5\r\n\r\n      for await (const courseClass of courseClasses) {\r\n        const startOfDate = moment(courseClass.startDate).tz(VN_TIMEZONE).startOf('date')\r\n        if (startOfDate.isSameOrBefore(nowMoment)) {\r\n          // BR-42: If there are not enough 5 learners when the class starts, the class will be cancelled, learners will be refunded 100%.\r\n          const learnerQuantity = courseClass.learnerQuantity\r\n          if (learnerQuantity < classAutoCancelMinLearners) {\r\n            updateClassToCanceled.push(courseClass._id)\r\n            updateClassStatusPromises.push(\r\n              this.classService.cancelClass(\r\n                courseClass._id,\r\n                { cancelReason: 'System cancel' },\r\n                { role: 'SYSTEM' as UserRole }\r\n              )\r\n            )\r\n          } else {\r\n            updateClassToInProgress.push(courseClass._id)\r\n            updateClassStatusPromises.push(\r\n              this.classService.update(\r\n                { _id: courseClass._id },\r\n                {\r\n                  $set: { status: ClassStatus.IN_PROGRESS },\r\n                  $push: {\r\n                    histories: {\r\n                      status: ClassStatus.IN_PROGRESS,\r\n                      timestamp: new Date(),\r\n                      userRole: 'SYSTEM' as UserRole\r\n                    }\r\n                  }\r\n                }\r\n              )\r\n            )\r\n            // update class report\r\n            updateClassReportPromises.push(\r\n              this.reportService.update(\r\n                {\r\n                  type: ReportType.ClassSum,\r\n                  tag: ReportTag.User,\r\n                  ownerId: new Types.ObjectId(courseClass.instructorId)\r\n                },\r\n                {\r\n                  $inc: {\r\n                    [`data.${ClassStatus.PUBLISHED}.quantity`]: -1,\r\n                    [`data.${ClassStatus.IN_PROGRESS}.quantity`]: 1\r\n                  }\r\n                }\r\n              )\r\n            )\r\n          }\r\n        }\r\n      }\r\n      await Promise.all(updateClassStatusPromises)\r\n      await Promise.all(updateClassReportPromises)\r\n      // update class report\r\n      this.reportService.update(\r\n        { type: ReportType.ClassSum, tag: ReportTag.System },\r\n        {\r\n          $inc: {\r\n            [`data.${ClassStatus.PUBLISHED}.quantity`]: -updateClassToInProgress.length,\r\n            [`data.${ClassStatus.IN_PROGRESS}.quantity`]: updateClassToInProgress.length\r\n          }\r\n        }\r\n      )\r\n\r\n      this.appLogger.log(`[updateClassStatus]: End update status... id=${job.id}`)\r\n      return { status: true, updateClassToInProgress, updateClassToCanceled }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[updateClassStatus]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async updateClassProgressEndSlot(job: Job) {\r\n    const { slotNumber } = job.data\r\n    this.appLogger.debug(\r\n      `[updateClassProgressEndSlot]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`\r\n    )\r\n\r\n    try {\r\n      this.appLogger.log(`[updateClassProgressEndSlot]: Start update class progress... id=${job.id}`)\r\n\r\n      const startOfDate = moment().tz(VN_TIMEZONE).startOf('date')\r\n      let start, end: Date\r\n      switch (slotNumber) {\r\n        case SlotNumber.ONE:\r\n          start = startOfDate.clone().add(7, 'hour').toDate()\r\n          end = startOfDate.clone().add(9, 'hour').toDate()\r\n          break\r\n        case SlotNumber.TWO:\r\n          start = startOfDate.clone().add(9, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(11, 'hour').add(30, 'minute').toDate()\r\n          break\r\n        case SlotNumber.THREE:\r\n          start = startOfDate.clone().add(13, 'hour').toDate()\r\n          end = startOfDate.clone().add(15, 'hour').toDate()\r\n          break\r\n        case SlotNumber.FOUR:\r\n          start = startOfDate.clone().add(15, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(17, 'hour').add(30, 'minute').toDate()\r\n          break\r\n      }\r\n\r\n      const timesheets = await this.gardenTimesheetService.findMany({\r\n        'slots.start': start,\r\n        'slots.end': end\r\n      })\r\n\r\n      const classIds = new Set()\r\n      for (const timesheet of timesheets) {\r\n        for (const slot of timesheet.slots) {\r\n          if (slot.status === SlotStatus.NOT_AVAILABLE && slot.slotNumber === slotNumber) {\r\n            classIds.add(slot.classId)\r\n          }\r\n        }\r\n      }\r\n      const courseClasses = await this.classService.findMany({\r\n        _id: {\r\n          $in: [...classIds]\r\n        }\r\n      })\r\n\r\n      const updateClassProgressPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        const { progress } = courseClass\r\n        const completed = progress.completed + 1 > progress.total ? progress.total : progress.completed + 1\r\n        const total = progress.total\r\n        const percentage = Math.round((completed / total) * 100)\r\n        updateClassProgressPromises.push(\r\n          this.classService.update(\r\n            { _id: courseClass._id },\r\n            {\r\n              $set: { progress: { completed, total, percentage } }\r\n            }\r\n          )\r\n        )\r\n      })\r\n      await Promise.all(updateClassProgressPromises)\r\n\r\n      this.appLogger.log(`[updateClassProgressEndSlot]: End update class progress... id=${job.id}`)\r\n      return { status: true, numbersOfUpdatedClass: classIds.size }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[updateClassProgressEndSlot]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async completeClassAutomatically(job: Job) {\r\n    this.appLogger.debug(\r\n      `[completeClassAutomatically]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`\r\n    )\r\n\r\n    try {\r\n      this.appLogger.log(`[completeClassAutomatically]: Start complete class ... id=${job.id}`)\r\n\r\n      const startOfDate = moment().tz(VN_TIMEZONE).startOf('date')\r\n      const classAutoCompleteAfterDay =\r\n        Number((await this.settingService.findByKey(SettingKey.ClassAutoCompleteAfterDay)).value) || 5\r\n\r\n      const courseClasses = await this.classService.findMany({\r\n        status: ClassStatus.IN_PROGRESS\r\n      })\r\n\r\n      const completeClassPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        const { startDate, duration, weekdays } = courseClass\r\n        const classEndTime = this.classService.getClassEndTime({ startDate, duration, weekdays })\r\n\r\n        if (classEndTime.clone().add(classAutoCompleteAfterDay, 'day').isSameOrBefore(startOfDate)) {\r\n          completeClassPromises.push(this.classService.completeClass(courseClass._id, { role: 'SYSTEM' as UserRole }))\r\n        }\r\n      })\r\n      await Promise.all(completeClassPromises)\r\n\r\n      this.appLogger.log(`[completeClassAutomatically]: End complete class... id=${job.id}`)\r\n      return { status: true, numbersOfCompletedClass: completeClassPromises.length }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[completeClassAutomatically]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(\r\n          job.data\r\n        )}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async sendClassCertificate(job: Job) {\r\n    this.appLogger.debug(`[sendClassCertificate]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`)\r\n\r\n    try {\r\n      this.appLogger.log(`[sendClassCertificate]: Start complete class ... id=${job.id}`)\r\n\r\n      const courseClasses = await this.classService.findMany(\r\n        {\r\n          'progress.percentage': 100,\r\n          hasSentCertificate: { $exists: false }\r\n        },\r\n        ['instructorId', 'title', 'code', 'sessions'],\r\n        [{ path: 'instructor', select: ['name'] }]\r\n      )\r\n\r\n      const sendClassCertificatePromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        sendClassCertificatePromises.push(this.generateCertificateForClass(courseClass))\r\n      })\r\n      await Promise.allSettled(sendClassCertificatePromises)\r\n\r\n      this.appLogger.log(`[sendClassCertificate]: End complete class... id=${job.id}`)\r\n      return { status: true, numbersOfHasSentCertificateClass: sendClassCertificatePromises.length }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[sendClassCertificate]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  async generateCertificateForClass(courseClass: Class) {\r\n    const dateMoment = moment().tz(VN_TIMEZONE).format('LL')\r\n    const learnerClasses = await this.learnerClassService.findMany(\r\n      { classId: courseClass._id },\r\n      ['learnerId'],\r\n      [{ path: 'learner', select: ['_id', 'name'] }]\r\n    )\r\n\r\n    const classAttendanceRate =\r\n      Number((await this.settingService.findByKey(SettingKey.ClassAttendanceRate)).value) || 0.8\r\n    const classAssignmentPointAverage =\r\n      Number((await this.settingService.findByKey(SettingKey.ClassAssignmentPointAverage)).value) || 6\r\n\r\n    // generate PDF\r\n    const generatePDFPromises = []\r\n    for await (const learnerClass of learnerClasses) {\r\n      // BR-11: Learners must attend 80% of total class’s slots and get assignment average points at least 6 to receive the certificate.\r\n      // BR-48: If the instructors forget to take attendance, it will not affect the attendance percentage required to achieve the certificate at the end of the class.\r\n      // BR-50: After the class ends, if the instructor does not take attendance or grade any assignments, the learner will automatically get a certificate.\r\n      const learnerId = _.get(learnerClass, 'learnerId')\r\n\r\n      const classAssignmentCount = courseClass.sessions.filter((session) => session.assignments.length > 0).length\r\n      const [attendances, submissions] = await Promise.all([\r\n        this.attendanceService.findMany({\r\n          learnerId,\r\n          classId: courseClass._id\r\n        }),\r\n        this.assignmentSubmissionService.findMany({\r\n          learnerId,\r\n          classId: courseClass._id\r\n        })\r\n      ])\r\n      const presentAttendances = attendances.filter((attendance) => attendance.status === AttendanceStatus.PRESENT)\r\n      let totalAssignmentPoint = 0\r\n      submissions.forEach((submission) => {\r\n        if (submission.point) {\r\n          totalAssignmentPoint += submission.point\r\n        } else {\r\n          totalAssignmentPoint += 10\r\n        }\r\n      })\r\n\r\n      const isAttendanceRateEnough =\r\n        attendances.length === 0 || presentAttendances.length / attendances.length >= classAttendanceRate\r\n      const isAssignmentPointAvgEnough =\r\n        classAssignmentCount === 0 || totalAssignmentPoint / classAssignmentCount >= classAssignmentPointAverage\r\n      if (!isAttendanceRateEnough || !isAssignmentPointAvgEnough) continue\r\n\r\n      const certificateCode = await this.certificateService.generateCertificateCode()\r\n      const data = {\r\n        learnerName: _.get(learnerClass, 'learner.name') || 'Learner',\r\n        courseTitle: _.get(courseClass, 'title') || 'Course',\r\n        dateCompleted: dateMoment,\r\n        certificateCode,\r\n        instructorName: _.get(courseClass, 'instructor.name') || 'Instructor'\r\n      }\r\n      const certificatePath = `certs/cert-${_.get(courseClass, 'code')}-${learnerId}.pdf`\r\n      const metadata = {\r\n        learnerId,\r\n        code: certificateCode,\r\n        name: _.get(courseClass, 'title'),\r\n        learnerClassId: learnerClass._id\r\n      }\r\n      generatePDFPromises.push(this.helperService.generatePDF({ data, certificatePath, metadata }))\r\n    }\r\n    const generatePDFResponses: GeneratePDFResponse[] = (await Promise.all(generatePDFPromises)).filter(\r\n      (res) => res.status === true\r\n    )\r\n\r\n    // Upload multiple to Cloudinary\r\n    const mediaPaths = generatePDFResponses.map((res) => path.resolve(__dirname, '../../../', res.certificatePath))\r\n    const uploadResponses: UploadApiResponse[] = await this.mediaService.uploadMultiple(mediaPaths)\r\n\r\n    // Save certificate\r\n    const saveCertificatePromises = []\r\n    generatePDFResponses.forEach((res, index) => {\r\n      const { metadata } = res\r\n      saveCertificatePromises.push(\r\n        this.certificateService.create({\r\n          url: uploadResponses.at(index).url,\r\n          ownerId: _.get(metadata, 'learnerId'),\r\n          code: _.get(metadata, 'code'),\r\n          name: _.get(metadata, 'name'),\r\n          learnerClassId: _.get(metadata, 'learnerClassId')\r\n        })\r\n      )\r\n    })\r\n    await Promise.all(saveCertificatePromises)\r\n\r\n    // update class hasSentCertificate true\r\n    await this.classService.update(\r\n      { _id: courseClass._id },\r\n      {\r\n        $set: { hasSentCertificate: true }\r\n      }\r\n    )\r\n\r\n    //  send notification for learners\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: `Chúc mừng đã hoàn thành khóa học`,\r\n      body: `Lớp học ${courseClass.code}: ${courseClass.title} đã kết thúc. Bấm để xem chi tiết.`,\r\n      receiverIds: learnerClasses.map((learnerClass) => learnerClass.learnerId.toString()),\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS,\r\n        id: courseClass._id.toString()\r\n      }\r\n    })\r\n\r\n    // unlink pdf in disk\r\n    const unlinkMediaFilePromises = []\r\n    mediaPaths.forEach((mediaPath) => {\r\n      unlinkMediaFilePromises.push(\r\n        fs.unlink(mediaPath, (err) => {\r\n          if (err) {\r\n            console.error(`Error removing file: ${err}`)\r\n            return\r\n          }\r\n          console.log(`File ${mediaPath} has been successfully removed.`)\r\n        })\r\n      )\r\n    })\r\n    Promise.allSettled(unlinkMediaFilePromises)\r\n  }\r\n\r\n  async remindClassStartSlot(job: Job) {\r\n    const { slotNumber } = job.data\r\n    this.appLogger.debug(`[remindClassStartSlot]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`)\r\n\r\n    try {\r\n      this.appLogger.log(`[remindClassStartSlot]: Start remind class start slot... id=${job.id}`)\r\n\r\n      const startOfDate = moment().tz(VN_TIMEZONE).startOf('date')\r\n      let start, end: Date\r\n      switch (slotNumber) {\r\n        case SlotNumber.ONE:\r\n          start = startOfDate.clone().add(7, 'hour').toDate()\r\n          end = startOfDate.clone().add(9, 'hour').toDate()\r\n          break\r\n        case SlotNumber.TWO:\r\n          start = startOfDate.clone().add(9, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(11, 'hour').add(30, 'minute').toDate()\r\n          break\r\n        case SlotNumber.THREE:\r\n          start = startOfDate.clone().add(13, 'hour').toDate()\r\n          end = startOfDate.clone().add(15, 'hour').toDate()\r\n          break\r\n        case SlotNumber.FOUR:\r\n          start = startOfDate.clone().add(15, 'hour').add(30, 'minute').toDate()\r\n          end = startOfDate.clone().add(17, 'hour').add(30, 'minute').toDate()\r\n          break\r\n      }\r\n\r\n      const timesheets = await this.gardenTimesheetService.findMany({\r\n        'slots.start': start,\r\n        'slots.end': end\r\n      })\r\n\r\n      const classIds = new Set()\r\n      for (const timesheet of timesheets) {\r\n        for (const slot of timesheet.slots) {\r\n          if (slot.status === SlotStatus.NOT_AVAILABLE && slot.slotNumber === slotNumber) {\r\n            classIds.add(slot.classId)\r\n          }\r\n        }\r\n      }\r\n      const courseClasses = await this.classService.findMany({\r\n        _id: {\r\n          $in: [...classIds]\r\n        }\r\n      })\r\n\r\n      const remindClassSlotStartIn1HourPromises = []\r\n      courseClasses.forEach((courseClass) => {\r\n        remindClassSlotStartIn1HourPromises.push(this.sendClassSlotStartRemindNotificationForLearner(courseClass))\r\n      })\r\n      await Promise.all(remindClassSlotStartIn1HourPromises)\r\n\r\n      this.appLogger.log(`[remindClassStartSlot]: End remind class start slot... id=${job.id}`)\r\n      return { status: true, classIds: [...classIds] }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[remindClassStartSlot]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  private async sendClassSlotStartRemindNotificationForLearner(courseClass: Class) {\r\n    const learnerClasses = await this.learnerClassService.findMany({ classId: new Types.ObjectId(courseClass._id) }, [\r\n      'learnerId'\r\n    ])\r\n    if (learnerClasses.length === 0) return\r\n\r\n    await this.notificationService.sendFirebaseCloudMessaging({\r\n      title: `Buổi học sẽ bắt đầu sau 1 tiếng`,\r\n      body: `Lớp ${courseClass.code}: ${courseClass.title} sắp bắt đầu buổi học. Bấm để xem chi tiết.`,\r\n      receiverIds: learnerClasses.map((learnerClass) => learnerClass?.learnerId?.toString()),\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS,\r\n        id: courseClass._id.toString()\r\n      }\r\n    })\r\n  }\r\n\r\n  async remindClassStartSoon(job: Job) {\r\n    this.appLogger.debug(`[remindClassStartSoon]: id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}`)\r\n\r\n    try {\r\n      this.appLogger.log(`[remindClassStartSoon]: Start remind class start soon... id=${job.id}`)\r\n      const courseClasses = await this.classService.findManyByStatus([ClassStatus.PUBLISHED])\r\n      if (courseClasses.length === 0) return 'No PUBLISHED status class'\r\n\r\n      const tomorrowMoment = moment().tz(VN_TIMEZONE).startOf('date').add(1, 'day')\r\n      const remindClassStartSoonPromises = []\r\n      const classIds = []\r\n\r\n      for await (const courseClass of courseClasses) {\r\n        const startOfDate = moment(courseClass.startDate).tz(VN_TIMEZONE).startOf('date')\r\n        if (startOfDate.isSame(tomorrowMoment)) {\r\n          remindClassStartSoonPromises.push(this.sendClassStartSoonRemindNotification(courseClass))\r\n          classIds.push(courseClass._id)\r\n        }\r\n      }\r\n      await Promise.all(remindClassStartSoonPromises)\r\n\r\n      this.appLogger.log(`[remindClassStartSoon]: End remind class start soon... id=${job.id}`)\r\n      return { status: true, classIds }\r\n    } catch (error) {\r\n      this.appLogger.error(\r\n        `[remindClassStartSoon]: error id=${job.id}, name=${job.name}, data=${JSON.stringify(job.data)}, error=${error}`\r\n      )\r\n      return false\r\n    }\r\n  }\r\n\r\n  private async sendClassStartSoonRemindNotification(courseClass: Class) {\r\n    const [learnerClasses, garden] = await Promise.all([\r\n      this.learnerClassService.findMany({ classId: new Types.ObjectId(courseClass._id) }, ['learnerId']),\r\n      this.gardenService.findById(courseClass.gardenId.toString())\r\n    ])\r\n\r\n    const receiverIds = learnerClasses.map((learnerClass) => learnerClass?.learnerId?.toString())\r\n    receiverIds.push(courseClass.instructorId.toString())\r\n    receiverIds.push(garden.gardenManagerId.toString())\r\n\r\n    if (receiverIds.length === 0) return\r\n\r\n    await this.notificationService.sendFirebaseCloudMessaging({\r\n      title: `Lớp học sẽ bắt đầu vào ngày mai`,\r\n      body: `Lớp ${courseClass.code}: ${courseClass.title} sẽ bắt đầu vào ngày mai. Bấm để xem chi tiết.`,\r\n      receiverIds,\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS,\r\n        id: courseClass._id.toString()\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}