{"version":3,"file":"queue-producer.service.js","sourceRoot":"/","sources":["queue/services/queue-producer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { SlotNumber } from '@common/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { InjectQueue } from '@nestjs/bullmq'\r\nimport { Injectable, OnModuleInit } from '@nestjs/common'\r\nimport { JobName, JobSchedulerKey, QueueName } from '@queue/contracts/constant'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { Job, JobsOptions, Queue } from 'bullmq'\r\n\r\nexport const IQueueProducerService = Symbol('IQueueProducerService')\r\n\r\nexport interface IQueueProducerService {\r\n  addJob(queueName: QueueName, jobName: JobName, data: any, opts?: JobsOptions): Promise<Job>\r\n  getJob(queueName: QueueName, jobId: string): Promise<Job | null>\r\n  removeJob(queueName: QueueName, jobId: string): Promise<void>\r\n}\r\n\r\n@Injectable()\r\nexport class QueueProducerService implements IQueueProducerService, OnModuleInit {\r\n  private readonly appLogger = new AppLogger(QueueProducerService.name)\r\n  private queueMap: Map<QueueName, Queue>\r\n  constructor(\r\n    @InjectQueue(QueueName.CLASS_REQUEST) private readonly classRequestQueue: Queue,\r\n    @InjectQueue(QueueName.PAYOUT_REQUEST) private readonly payoutRequestQueue: Queue,\r\n    @InjectQueue(QueueName.RECRUITMENT) private readonly recruitmentQueue: Queue,\r\n    @InjectQueue(QueueName.CLASS) private readonly classQueue: Queue,\r\n    @InjectQueue(QueueName.SLOT) private readonly slotQueue: Queue\r\n  ) {}\r\n\r\n  async onModuleInit() {\r\n    if (process.env.NODE_ENV !== 'local') {\r\n      await this.scheduleUpdateClassStatusJob()\r\n      await this.scheduleUpdateClassProgressJob()\r\n      await this.scheduleAutoCompleteClassJob()\r\n    }\r\n\r\n    // Inject all queue to queueMap\r\n    this.queueMap = new Map<QueueName, Queue>()\r\n    this.queueMap.set(QueueName.CLASS_REQUEST, this.classRequestQueue)\r\n    this.queueMap.set(QueueName.PAYOUT_REQUEST, this.payoutRequestQueue)\r\n    this.queueMap.set(QueueName.RECRUITMENT, this.recruitmentQueue)\r\n    this.queueMap.set(QueueName.CLASS, this.classQueue)\r\n    this.queueMap.set(QueueName.SLOT, this.slotQueue)\r\n\r\n    if ((await this.classRequestQueue.client).status !== 'ready') {\r\n      throw Error('Redis service is not ready....')\r\n    }\r\n    this.appLogger.log(`Redis service is ready....`)\r\n\r\n    this.countDelayedJobs()\r\n    this.countJobSchedulers()\r\n  }\r\n\r\n  async addJob(queueName: QueueName, jobName: JobName, data: any, opts?: JobsOptions): Promise<Job> {\r\n    // Retrieve queue\r\n    const queue = this.queueMap.get(queueName)\r\n    if (!queue) throw new Error('Queue not found')\r\n\r\n    // Publish job\r\n    const job = await queue.add(jobName, data, {\r\n      backoff: 5000,\r\n      ...opts\r\n    })\r\n    this.appLogger.debug(`Published job: jobId: ${job.id}, jobName: ${jobName} to queue: ${queueName}`)\r\n    return job\r\n  }\r\n\r\n  async getJob(queueName: QueueName, jobId: string): Promise<Job | null> {\r\n    return this.queueMap.get(QueueName[queueName]).getJob(jobId)\r\n  }\r\n\r\n  async removeJob(queueName: QueueName, jobId: string): Promise<void> {\r\n    try {\r\n      this.appLogger.debug(`Remove Job: jobId: ${jobId} from queue: ${queueName}`)\r\n      await this.queueMap.get(QueueName[queueName]).remove(jobId)\r\n    } catch (error) {\r\n      this.appLogger.error(`Remove Job: [error] ${JSON.stringify(error)}`)\r\n    }\r\n  }\r\n\r\n  private async countDelayedJobs() {\r\n    this.appLogger.debug(\r\n      `Queue: ${QueueName.PAYOUT_REQUEST}: Delayed Jobs Count = ${await this.payoutRequestQueue.getDelayedCount()}`\r\n    )\r\n    this.appLogger.debug(\r\n      `Queue: ${QueueName.RECRUITMENT}: Delayed Jobs Count = ${await this.recruitmentQueue.getDelayedCount()}`\r\n    )\r\n    this.appLogger.debug(`Queue: ${QueueName.CLASS}: Delayed Jobs Count = ${await this.classQueue.getDelayedCount()}`)\r\n    this.appLogger.debug(`Queue: ${QueueName.SLOT}: Delayed Jobs Count = ${await this.slotQueue.getDelayedCount()}`)\r\n  }\r\n\r\n  private async countJobSchedulers() {\r\n    this.appLogger.debug(\r\n      `Queue: ${QueueName.CLASS}: Scheduler Jobs Count = ${(await this.classQueue.getJobSchedulers()).length}`\r\n    )\r\n  }\r\n\r\n  private async scheduleUpdateClassStatusJob(): Promise<void> {\r\n    await this.classQueue.upsertJobScheduler(\r\n      JobSchedulerKey.UpdateClassStatusScheduler,\r\n      {\r\n        pattern: '0 0 * * *',\r\n        tz: VN_TIMEZONE\r\n      },\r\n      {\r\n        name: JobName.UpdateClassStatusInProgress\r\n      }\r\n    )\r\n  }\r\n\r\n  private async scheduleUpdateClassProgressJob(): Promise<void> {\r\n    await Promise.all([\r\n      this.classQueue.upsertJobScheduler(\r\n        JobSchedulerKey.UpdateClassProgressEndSlot1Scheduler,\r\n        {\r\n          pattern: '0 9 * * *',\r\n          tz: VN_TIMEZONE\r\n        },\r\n        {\r\n          name: JobName.UpdateClassProgressEndSlot,\r\n          data: {\r\n            slotNumber: SlotNumber.ONE\r\n          }\r\n        }\r\n      ),\r\n      this.classQueue.upsertJobScheduler(\r\n        JobSchedulerKey.UpdateClassProgressEndSlot2Scheduler,\r\n        {\r\n          pattern: '30 11 * * *',\r\n          tz: VN_TIMEZONE\r\n        },\r\n        {\r\n          name: JobName.UpdateClassProgressEndSlot,\r\n          data: {\r\n            slotNumber: SlotNumber.TWO\r\n          }\r\n        }\r\n      ),\r\n      this.classQueue.upsertJobScheduler(\r\n        JobSchedulerKey.UpdateClassProgressEndSlot3Scheduler,\r\n        {\r\n          pattern: '0 15 * * *',\r\n          tz: VN_TIMEZONE\r\n        },\r\n        {\r\n          name: JobName.UpdateClassProgressEndSlot,\r\n          data: {\r\n            slotNumber: SlotNumber.THREE\r\n          }\r\n        }\r\n      ),\r\n      this.classQueue.upsertJobScheduler(\r\n        JobSchedulerKey.UpdateClassProgressEndSlot4Scheduler,\r\n        {\r\n          pattern: '30 17 * * *',\r\n          tz: VN_TIMEZONE\r\n        },\r\n        {\r\n          name: JobName.UpdateClassProgressEndSlot,\r\n          data: {\r\n            slotNumber: SlotNumber.FOUR\r\n          }\r\n        }\r\n      )\r\n    ])\r\n  }\r\n\r\n  private async scheduleAutoCompleteClassJob(): Promise<void> {\r\n    await this.classQueue.upsertJobScheduler(\r\n      JobSchedulerKey.CompleteClassScheduler,\r\n      {\r\n        pattern: '0 6 * * *',\r\n        tz: VN_TIMEZONE\r\n      },\r\n      {\r\n        name: JobName.ClassAutoCompleted\r\n      }\r\n    )\r\n  }\r\n}\r\n"]}