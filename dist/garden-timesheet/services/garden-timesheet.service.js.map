{"version":3,"file":"garden-timesheet.service.js","sourceRoot":"/","sources":["garden-timesheet/services/garden-timesheet.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef } from '@nestjs/common'\r\nimport * as moment from 'moment-timezone'\r\nimport * as _ from 'lodash'\r\nimport { IGardenTimesheetRepository } from '@garden-timesheet/repositories/garden-timesheet.repository'\r\nimport { GardenTimesheet, GardenTimesheetDocument } from '@garden-timesheet/schemas/garden-timesheet.schema'\r\nimport { FilterQuery, MongooseQueryOptions, PopulateOptions, QueryOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { QueryGardenTimesheetDto } from '@garden-timesheet/dto/view-garden-timesheet.dto'\r\nimport {\r\n  AttendanceStatus,\r\n  GardenStatus,\r\n  GardenTimesheetStatus,\r\n  SLOT_NUMBERS,\r\n  SlotNumber,\r\n  SlotStatus,\r\n  TimesheetType,\r\n  Weekday\r\n} from '@common/contracts/constant'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { CreateGardenTimesheetDto } from '@garden-timesheet/dto/create-garden-timesheet.dto'\r\nimport { AppLogger } from '@src/common/services/app-logger.service'\r\nimport {\r\n  SLOT_CLASS_DETAIL_PROJECTION,\r\n  VIEW_GARDEN_TIMESHEET_LIST_PROJECTION\r\n} from '@garden-timesheet/contracts/constant'\r\nimport { QueryTeachingTimesheetDto } from '@garden-timesheet/dto/view-teaching-timesheet.dto'\r\nimport { QueryAvailableTimeDto, ViewAvailableTimeResponse } from '@garden-timesheet/dto/view-available-timesheet.dto'\r\nimport { Slot } from '@garden-timesheet/schemas/slot.schema'\r\nimport { Garden } from '@garden/schemas/garden.schema'\r\nimport { IGardenRepository } from '@garden/repositories/garden.repository'\r\nimport { BaseSlotMetadataDto, CreateSlotDto } from '@garden-timesheet/dto/slot.dto'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { Course } from '@course/schemas/course.schema'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { QueryMyTimesheetDto } from '@garden-timesheet/dto/view-my-timesheet.dto'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\n\r\nexport const IGardenTimesheetService = Symbol('IGardenTimesheetService')\r\n\r\nexport interface IGardenTimesheetService {\r\n  findById(\r\n    gardenTimesheetId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenTimesheetDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<GardenTimesheet>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenTimesheetDocument>\r\n  update(\r\n    conditions: FilterQuery<GardenTimesheet>,\r\n    payload: UpdateQuery<GardenTimesheet>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<GardenTimesheetDocument>\r\n  viewGardenTimesheetList(\r\n    queryGardenTimesheetDto: QueryGardenTimesheetDto,\r\n    garden: Garden\r\n  ): Promise<GardenTimesheetDocument[]>\r\n  viewTeachingTimesheet(queryTeachingTimesheetDto: QueryTeachingTimesheetDto): Promise<GardenTimesheetDocument[]>\r\n  viewMyTimesheet(queryMyTimesheetDto: QueryMyTimesheetDto): Promise<GardenTimesheetDocument[]>\r\n  viewAvailableTime(queryAvailableTimeDto: QueryAvailableTimeDto): Promise<ViewAvailableTimeResponse>\r\n  generateSlotsForClass(\r\n    params: {\r\n      startDate: Date\r\n      duration: number\r\n      weekdays: Weekday[]\r\n      slotNumbers: SlotNumber[]\r\n      gardenId: Types.ObjectId\r\n      instructorId: Types.ObjectId\r\n      classId: Types.ObjectId\r\n      metadata: BaseSlotMetadataDto\r\n      courseData: Course\r\n    },\r\n    options?: QueryOptions | undefined\r\n  ): Promise<boolean>\r\n  findSlotBy(params: { slotId: string; instructorId?: string }): Promise<Slot>\r\n  findMany(\r\n    conditions: FilterQuery<GardenTimesheetDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<GardenTimesheetDocument[]>\r\n  updateMany(\r\n    conditions: FilterQuery<GardenTimesheetDocument>,\r\n    payload: UpdateQuery<GardenTimesheetDocument>,\r\n    options?: import('mongodb').UpdateOptions | null\r\n  ): Promise<void>\r\n}\r\n\r\n@Injectable()\r\nexport class GardenTimesheetService implements IGardenTimesheetService {\r\n  private readonly appLogger = new AppLogger(GardenTimesheetService.name)\r\n  constructor(\r\n    @Inject(IGardenTimesheetRepository)\r\n    private readonly gardenTimesheetRepository: IGardenTimesheetRepository,\r\n    @Inject(IGardenRepository)\r\n    private readonly gardenRepository: IGardenRepository,\r\n    private readonly helperService: HelperService,\r\n    @Inject(forwardRef(() => IClassService))\r\n    private readonly classService: IClassService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService\r\n  ) {}\r\n\r\n  public async findById(\r\n    gardenTimesheetId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const gardenTimesheet = await this.gardenTimesheetRepository.findOne({\r\n      conditions: {\r\n        _id: gardenTimesheetId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return gardenTimesheet\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<GardenTimesheet>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const gardenTimesheet = await this.gardenTimesheetRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return gardenTimesheet\r\n  }\r\n\r\n  public async findSlotBy(params: { slotId: string; instructorId?: string }) {\r\n    const { slotId, instructorId } = params\r\n    const conditions = { 'slots._id': new Types.ObjectId(slotId) }\r\n    if (instructorId) conditions['slots.instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const gardenTimesheet = await this.gardenTimesheetRepository.findOne({\r\n      conditions,\r\n      options: { lean: true }\r\n    })\r\n    if (!gardenTimesheet) return null\r\n\r\n    const slot = gardenTimesheet?.slots.find((slot) => slot._id.toString() === slotId)\r\n    const [garden, courseClass] = await Promise.all([\r\n      this.gardenRepository.findOne({\r\n        conditions: {\r\n          _id: gardenTimesheet.gardenId\r\n        },\r\n        projection: ['name']\r\n      }),\r\n      this.classService.findById(slot.classId.toString(), SLOT_CLASS_DETAIL_PROJECTION, [\r\n        { path: 'course', select: ['code'] }\r\n      ])\r\n    ])\r\n\r\n    return {\r\n      createdAt: gardenTimesheet['createdAt'],\r\n      updatedAt: gardenTimesheet['updatedAt'],\r\n      ...slot,\r\n      garden,\r\n      class: courseClass\r\n    }\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<GardenTimesheet>,\r\n    payload: UpdateQuery<GardenTimesheet>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.gardenTimesheetRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async viewGardenTimesheetList(queryGardenTimesheetDto: QueryGardenTimesheetDto, garden: Garden) {\r\n    const { type, gardenId, date } = queryGardenTimesheetDto\r\n    const dateMoment = moment(date).tz(VN_TIMEZONE)\r\n    this.appLogger.log(`viewGardenTimesheetList: type=${type}, gardenId=${gardenId}, date=${date}`)\r\n\r\n    // check month garden timesheet has been generated\r\n    const existedGardenTimesheet = await this.gardenTimesheetRepository.findOne({\r\n      conditions: {\r\n        gardenId: new Types.ObjectId(gardenId),\r\n        date: dateMoment.clone().startOf('month')\r\n      }\r\n    })\r\n    if (!existedGardenTimesheet) {\r\n      console.time(`generateTimesheetOfMonth: gardenId=${gardenId}, date=${date}`)\r\n      await this.generateTimesheetOfMonth(gardenId, date, garden.maxClass)\r\n      console.timeEnd(`generateTimesheetOfMonth: gardenId=${gardenId}, date=${date}`)\r\n    }\r\n\r\n    let fromDate: Date, toDate: Date\r\n    if (type === TimesheetType.MONTH) {\r\n      fromDate = dateMoment.clone().startOf('month').toDate()\r\n      toDate = dateMoment.clone().endOf('month').toDate()\r\n    } else if (type === TimesheetType.WEEK) {\r\n      fromDate = dateMoment.clone().startOf('isoWeek').toDate()\r\n      toDate = dateMoment.clone().endOf('isoWeek').toDate()\r\n    }\r\n\r\n    const timesheets = await this.gardenTimesheetRepository.findMany({\r\n      projection: VIEW_GARDEN_TIMESHEET_LIST_PROJECTION,\r\n      options: { lean: true },\r\n      conditions: {\r\n        gardenId: new Types.ObjectId(gardenId),\r\n        date: {\r\n          $gte: fromDate,\r\n          $lte: toDate\r\n        },\r\n        $or: [\r\n          {\r\n            status: GardenTimesheetStatus.INACTIVE\r\n          },\r\n          {\r\n            'slots.status': SlotStatus.NOT_AVAILABLE\r\n          }\r\n        ]\r\n      }\r\n    })\r\n    return this.transformDataToCalendar(timesheets)\r\n  }\r\n\r\n  public async viewTeachingTimesheet(\r\n    queryTeachingTimesheetDto: QueryTeachingTimesheetDto\r\n  ): Promise<GardenTimesheetDocument[]> {\r\n    const { type, instructorId, date } = queryTeachingTimesheetDto\r\n    const dateMoment = moment(date).tz(VN_TIMEZONE)\r\n    this.appLogger.log(`viewTeachingTimesheet: type=${type}, instructorId=${instructorId}, date=${date}`)\r\n\r\n    let fromDate: Date, toDate: Date\r\n    if (type === TimesheetType.MONTH) {\r\n      fromDate = dateMoment.clone().startOf('month').toDate()\r\n      toDate = dateMoment.clone().endOf('month').toDate()\r\n    } else if (type === TimesheetType.WEEK) {\r\n      fromDate = dateMoment.clone().startOf('isoWeek').toDate()\r\n      toDate = dateMoment.clone().endOf('isoWeek').toDate()\r\n    }\r\n\r\n    const timesheets = await this.gardenTimesheetRepository.findMany({\r\n      projection: VIEW_GARDEN_TIMESHEET_LIST_PROJECTION,\r\n      options: { lean: true },\r\n      conditions: {\r\n        date: {\r\n          $gte: fromDate,\r\n          $lte: toDate\r\n        },\r\n        'slots.instructorId': new Types.ObjectId(instructorId)\r\n      }\r\n    })\r\n    return this.transformDataToTeachingCalendar(timesheets, instructorId)\r\n  }\r\n\r\n  public async viewMyTimesheet(queryMyTimesheetDto: QueryMyTimesheetDto): Promise<GardenTimesheetDocument[]> {\r\n    const { type, learnerId, date } = queryMyTimesheetDto\r\n    const dateMoment = moment(date).tz(VN_TIMEZONE)\r\n    this.appLogger.log(`viewMyTimesheet: type=${type}, learnerId=${learnerId}, date=${date}`)\r\n\r\n    let fromDate: Date, toDate: Date\r\n    if (type === TimesheetType.MONTH) {\r\n      fromDate = dateMoment.clone().startOf('month').toDate()\r\n      toDate = dateMoment.clone().endOf('month').toDate()\r\n    } else if (type === TimesheetType.WEEK) {\r\n      fromDate = dateMoment.clone().startOf('isoWeek').toDate()\r\n      toDate = dateMoment.clone().endOf('isoWeek').toDate()\r\n    }\r\n\r\n    // get classes that learner had enrolled\r\n    const learnerClasses = await this.learnerClassService.findMany({\r\n      learnerId: new Types.ObjectId(learnerId)\r\n    })\r\n    const classIds = learnerClasses.map((learnerClass) => learnerClass.classId)\r\n\r\n    const timesheets = await this.gardenTimesheetRepository.findMany({\r\n      projection: VIEW_GARDEN_TIMESHEET_LIST_PROJECTION,\r\n      options: { lean: true },\r\n      conditions: {\r\n        date: {\r\n          $gte: fromDate,\r\n          $lte: toDate\r\n        },\r\n        'slots.classId': {\r\n          $in: classIds\r\n        }\r\n      },\r\n      populates: [\r\n        {\r\n          path: 'garden',\r\n          select: ['name']\r\n        },\r\n        {\r\n          path: 'slots.instructor',\r\n          select: ['name']\r\n        },\r\n        {\r\n          path: 'slots.attendance',\r\n          select: ['status'],\r\n          match: {\r\n            learnerId: new Types.ObjectId(learnerId)\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    return this.transformDataToMyCalendar(\r\n      timesheets,\r\n      classIds.map((classId) => classId.toString())\r\n    )\r\n  }\r\n\r\n  public async viewAvailableTime(queryAvailableTimeDto: QueryAvailableTimeDto): Promise<ViewAvailableTimeResponse> {\r\n    const { startDate, duration, weekdays, instructorId } = queryAvailableTimeDto\r\n\r\n    const isValidWeekdays = this.helperService.validateWeekdays(weekdays)\r\n    if (!isValidWeekdays) throw new AppException(Errors.WEEKDAYS_OF_CLASS_INVALID)\r\n\r\n    const startOfDate = moment(startDate).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = startOfDate.clone().add(duration, 'week').startOf('date')\r\n    this.appLogger.log(\r\n      `viewAvailableTime: startOfDate=${startOfDate.toISOString()}, duration=${duration}, endOfDate=${endOfDate.toISOString()}, weekdays=${weekdays}`\r\n    )\r\n\r\n    await this.generateAllTimesheetFromDateRange(startOfDate, endOfDate)\r\n\r\n    const searchDates = []\r\n    let currentDate = startOfDate.clone()\r\n    while (currentDate.isSameOrBefore(endOfDate)) {\r\n      for (let weekday of weekdays) {\r\n        const searchDate = currentDate.clone().isoWeekday(weekday)\r\n        if (searchDate.isSameOrAfter(startOfDate) && searchDate.isBefore(endOfDate)) {\r\n          searchDates.push(searchDate.toDate())\r\n        }\r\n      }\r\n      currentDate.add(1, 'week')\r\n    }\r\n\r\n    const groupGardenTimesheets = await this.gardenTimesheetRepository.model.aggregate([\r\n      {\r\n        $match: {\r\n          date: {\r\n            $in: searchDates\r\n          },\r\n          status: GardenTimesheetStatus.ACTIVE\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'gardens',\r\n          localField: 'gardenId',\r\n          foreignField: '_id',\r\n          as: 'gardens',\r\n          pipeline: [\r\n            {\r\n              $match: {\r\n                status: GardenStatus.ACTIVE\r\n              }\r\n            },\r\n            {\r\n              $project: {\r\n                _id: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $match: {\r\n          gardens: {\r\n            $exists: true,\r\n            $ne: []\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: '$gardenId',\r\n          timesheets: {\r\n            $push: '$$ROOT'\r\n          },\r\n          count: { $sum: 1 }\r\n        }\r\n      }\r\n    ])\r\n\r\n    this.appLogger.debug(`groupGardenTimesheets.length=${groupGardenTimesheets.length}`)\r\n    this.appLogger.debug(`totalNumberOfDays=${duration * weekdays.length}`)\r\n    this.appLogger.debug(`searchDates.length=${searchDates.length}`)\r\n\r\n    const availableGroupGardenTimesheets = []\r\n    const unavailableGroupGardenTimesheets = []\r\n    groupGardenTimesheets.forEach((groupGardenTimesheet) => {\r\n      if (groupGardenTimesheet.count === searchDates.length) {\r\n        availableGroupGardenTimesheets.push(groupGardenTimesheet)\r\n      } else {\r\n        unavailableGroupGardenTimesheets.push(groupGardenTimesheet)\r\n      }\r\n    })\r\n\r\n    if (availableGroupGardenTimesheets.length === 0) return { slotNumbers: [] }\r\n    this.appLogger.debug(`availableGroupGardenTimesheets.length=${availableGroupGardenTimesheets.length}`)\r\n\r\n    let availableTimeOfGardens = []\r\n    let availableTime = []\r\n    let notAvailableSlots = new Set()\r\n\r\n    for (const unavailableGroupGardenTimesheet of unavailableGroupGardenTimesheets) {\r\n      for (const gardenTimesheet of unavailableGroupGardenTimesheet.timesheets as GardenTimesheet[]) {\r\n        const slots = gardenTimesheet.slots as Slot[]\r\n        if (slots?.length !== 0) {\r\n          const groupSlots = _.groupBy(slots, 'slotNumber')\r\n          SLOT_NUMBERS.forEach((slotNumber) => {\r\n            const groupSlot = _.get(groupSlots, slotNumber)\r\n            const isSlotBusyByInstructor =\r\n              groupSlot &&\r\n              groupSlot?.length > 0 &&\r\n              groupSlot.find((slot) => slot.instructorId?.toString() === instructorId?.toString()) !== undefined\r\n\r\n            if (isSlotBusyByInstructor) {\r\n              notAvailableSlots.add(slotNumber)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const availableGroupGardenTimesheet of availableGroupGardenTimesheets) {\r\n      let availableGardenSlots = SLOT_NUMBERS\r\n      for (const gardenTimesheet of availableGroupGardenTimesheet.timesheets as GardenTimesheet[]) {\r\n        const slots = gardenTimesheet.slots as Slot[]\r\n        if (slots?.length !== 0) {\r\n          const groupSlots = _.groupBy(slots, 'slotNumber')\r\n          const tempAvailableGardenSlots = []\r\n          SLOT_NUMBERS.forEach((slotNumber) => {\r\n            const groupSlot = _.get(groupSlots, slotNumber)\r\n            const isSlotBusyByInstructor =\r\n              groupSlot &&\r\n              groupSlot?.length > 0 &&\r\n              groupSlot.find((slot) => slot.instructorId?.toString() === instructorId?.toString()) !== undefined\r\n            if (isSlotBusyByInstructor) {\r\n              notAvailableSlots.add(slotNumber)\r\n            }\r\n\r\n            if (!groupSlot || groupSlot?.length < gardenTimesheet.gardenMaxClass || !isSlotBusyByInstructor) {\r\n              tempAvailableGardenSlots.push(slotNumber)\r\n            }\r\n          })\r\n          availableGardenSlots = _.intersection(tempAvailableGardenSlots, availableGardenSlots)\r\n        }\r\n      }\r\n      availableTimeOfGardens.push({ slotNumbers: availableGardenSlots, gardenId: availableGroupGardenTimesheet._id })\r\n      availableTime = [...new Set([...availableTime, ...availableGardenSlots])]\r\n    }\r\n\r\n    const notAvailableSlotsByInstructor = [...notAvailableSlots] as SlotNumber[]\r\n    availableTime = availableTime.filter((slotNumber) => [...notAvailableSlots].includes(slotNumber) === false)\r\n\r\n    this.appLogger.log(`notAvailableSlotsByInstructor=${notAvailableSlotsByInstructor}`)\r\n    this.appLogger.log(`availableTimeOfDates=${JSON.stringify(availableTimeOfGardens)}`)\r\n    this.appLogger.log(`availableTime=${availableTime}`)\r\n\r\n    return { slotNumbers: availableTime, availableTimeOfGardens, notAvailableSlotsByInstructor }\r\n  }\r\n\r\n  async generateSlotsForClass(\r\n    params: {\r\n      startDate: Date\r\n      duration: number\r\n      weekdays: Weekday[]\r\n      slotNumbers: SlotNumber[]\r\n      gardenId: Types.ObjectId\r\n      instructorId: Types.ObjectId\r\n      classId: Types.ObjectId\r\n      metadata: BaseSlotMetadataDto\r\n      courseData: Course\r\n    },\r\n    options?: QueryOptions | undefined\r\n  ): Promise<boolean> {\r\n    const { startDate, duration, weekdays, slotNumbers, gardenId, instructorId, classId, metadata, courseData } = params\r\n    this.appLogger.debug(\r\n      `generateSlotsForClass: startDate=${startDate}, duration=${duration}, weekdays=${weekdays}, slotNumbers=${slotNumbers}, gardenId=${gardenId}, instructorId=${instructorId}, classId=${classId}`\r\n    )\r\n\r\n    const startOfDate = moment(startDate).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = startOfDate.clone().add(duration, 'week').startOf('date')\r\n\r\n    const classDates = []\r\n    let currentDate = startOfDate.clone()\r\n    while (currentDate.isSameOrBefore(endOfDate)) {\r\n      for (let weekday of weekdays) {\r\n        const classDate = currentDate.clone().isoWeekday(weekday)\r\n        if (classDate.isSameOrAfter(startOfDate) && classDate.isBefore(endOfDate)) {\r\n          classDates.push(classDate.toDate())\r\n        }\r\n      }\r\n      currentDate.add(1, 'week')\r\n    }\r\n\r\n    const gardenTimesheets = await this.gardenTimesheetRepository.findMany({\r\n      conditions: {\r\n        date: { $in: classDates },\r\n        status: GardenTimesheetStatus.ACTIVE,\r\n        gardenId\r\n      },\r\n      sort: { date: 1 }\r\n    })\r\n    this.appLogger.debug(`generateSlotsForClass: totalNumberOfDays=${duration * weekdays.length}`)\r\n    this.appLogger.debug(`generateSlotsForClass: classDates.length=${classDates.length}`)\r\n    this.appLogger.debug(`generateSlotsForClass: gardenTimesheets.length=${gardenTimesheets.length}`)\r\n    const updateGardenTimesheetPromises = []\r\n\r\n    gardenTimesheets.forEach((gardenTimesheet, index) => {\r\n      const session = courseData.sessions[index]\r\n      const newSlots = slotNumbers.map(\r\n        (slotNumber) =>\r\n          new CreateSlotDto(slotNumber, gardenTimesheet.date, instructorId, new Types.ObjectId(session._id), classId, {\r\n            ...metadata,\r\n            sessionNumber: session?.sessionNumber,\r\n            sessionTitle: session?.title\r\n          })\r\n      )\r\n      const totalSlots = [...gardenTimesheet.slots, ...newSlots].sort((a, b) => a.slotNumber - b.slotNumber)\r\n      updateGardenTimesheetPromises.push(\r\n        this.update(\r\n          { _id: gardenTimesheet._id },\r\n          {\r\n            slots: totalSlots\r\n          },\r\n          options\r\n        )\r\n      )\r\n    })\r\n    await Promise.all(updateGardenTimesheetPromises)\r\n    return true\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<GardenTimesheetDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const gardenTimesheets = await this.gardenTimesheetRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return gardenTimesheets\r\n  }\r\n\r\n  public async updateMany(\r\n    conditions: FilterQuery<GardenTimesheetDocument>,\r\n    payload: UpdateQuery<GardenTimesheetDocument>,\r\n    options?: import('mongodb').UpdateOptions | null\r\n  ) {\r\n    await this.gardenTimesheetRepository.updateMany(conditions, payload, options)\r\n  }\r\n\r\n  private async generateTimesheetOfMonth(gardenId: string, date: Date, gardenMaxClass: number) {\r\n    const startOfMonth = moment(date).tz(VN_TIMEZONE).startOf('month')\r\n    const endOfMonth = moment(date).tz(VN_TIMEZONE).endOf('month')\r\n    const monthTimesheet = []\r\n    let currentDate = startOfMonth.clone()\r\n    while (currentDate.isSameOrBefore(endOfMonth)) {\r\n      const gardenTimesheet = new CreateGardenTimesheetDto(\r\n        new Types.ObjectId(gardenId),\r\n        currentDate.toDate(),\r\n        gardenMaxClass\r\n      )\r\n      monthTimesheet.push(gardenTimesheet)\r\n      currentDate.add(1, 'day')\r\n    }\r\n    await this.gardenTimesheetRepository.model.insertMany(monthTimesheet)\r\n  }\r\n\r\n  private async generateAllTimesheetOfMonth(date: Date) {\r\n    this.appLogger.log(`generateAllTimesheetOfMonth: ${date.toISOString()}`)\r\n    const dateMoment = moment(date).tz(VN_TIMEZONE)\r\n    const gardens = await this.gardenRepository.findMany({\r\n      conditions: { status: GardenStatus.ACTIVE }\r\n    })\r\n    const gardenIds = gardens.map((garden) => garden._id)\r\n    // check month garden timesheet of gardens have been generated\r\n    const existedGardenTimesheets = await this.gardenTimesheetRepository.findMany({\r\n      conditions: {\r\n        date: dateMoment.clone().startOf('month'),\r\n        gardenId: {\r\n          $in: gardenIds\r\n        }\r\n      }\r\n    })\r\n    this.appLogger.log(`existedGardenTimesheets.length: ${existedGardenTimesheets.length}`)\r\n    this.appLogger.log(`gardenIds.length: ${gardenIds.length}`)\r\n    if (existedGardenTimesheets.length < gardenIds.length) {\r\n      console.time(`generateAllTimesheetOfMonth: date=${date.toISOString()}`)\r\n      const generateTimesheetPromises = []\r\n      const existedGardenTimesheetGardenIds = existedGardenTimesheets.map((gardenTimesheet) =>\r\n        gardenTimesheet.gardenId.toString()\r\n      )\r\n      gardens\r\n        .filter((garden) => existedGardenTimesheetGardenIds.includes(garden._id.toString()) === false)\r\n        .forEach((garden) => {\r\n          generateTimesheetPromises.push(this.generateTimesheetOfMonth(garden._id, date, garden.maxClass))\r\n        })\r\n      await Promise.all(generateTimesheetPromises)\r\n      console.timeEnd(`generateAllTimesheetOfMonth: date=${date.toISOString()}`)\r\n    }\r\n  }\r\n\r\n  private async generateAllTimesheetFromDateRange(startOfDate: moment.Moment, endOfDate: moment.Moment) {\r\n    const generateAllTimesheetPromises = []\r\n    let currentDate = startOfDate.clone().startOf('month')\r\n    while (currentDate.isSameOrBefore(endOfDate)) {\r\n      generateAllTimesheetPromises.push(this.generateAllTimesheetOfMonth(currentDate.clone().toDate()))\r\n      currentDate.add(1, 'month')\r\n    }\r\n    await Promise.all(generateAllTimesheetPromises)\r\n  }\r\n\r\n  private transformDataToCalendar(timesheets: GardenTimesheetDocument[]) {\r\n    const calendars = []\r\n    for (const timesheet of timesheets) {\r\n      if (timesheet.status === GardenTimesheetStatus.INACTIVE) {\r\n        const startOfDate = moment(timesheet.date).tz(VN_TIMEZONE).startOf('date')\r\n        const endOfDate = moment(timesheet.date).tz(VN_TIMEZONE).endOf('date')\r\n        _.set(timesheet, 'start', startOfDate)\r\n        _.set(timesheet, 'end', endOfDate)\r\n        _.unset(timesheet, 'date')\r\n        _.unset(timesheet, 'slots')\r\n        calendars.push(timesheet)\r\n      } else {\r\n        for (const slot of timesheet.slots) {\r\n          if (slot.status === SlotStatus.NOT_AVAILABLE) {\r\n            _.set(slot, 'gardenMaxClass', timesheet.gardenMaxClass)\r\n            calendars.push(slot)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return calendars\r\n  }\r\n\r\n  private transformDataToTeachingCalendar(timesheets: GardenTimesheetDocument[], instructorId: string) {\r\n    const calendars = []\r\n    for (const timesheet of timesheets) {\r\n      for (const slot of timesheet.slots) {\r\n        if (slot.status === SlotStatus.NOT_AVAILABLE && slot.instructorId.toString() === instructorId) {\r\n          _.set(slot, 'gardenMaxClass', timesheet.gardenMaxClass)\r\n          calendars.push(slot)\r\n        }\r\n      }\r\n    }\r\n    return calendars\r\n  }\r\n\r\n  private transformDataToMyCalendar(timesheets: GardenTimesheetDocument[], classIds: string[]) {\r\n    const calendars = []\r\n    for (const timesheet of timesheets) {\r\n      for (const slot of timesheet.slots) {\r\n        if (slot.status === SlotStatus.NOT_AVAILABLE && classIds.includes(slot.classId.toString())) {\r\n          _.set(slot, 'gardenMaxClass', timesheet.gardenMaxClass)\r\n          _.set(slot, 'garden', timesheet['garden'])\r\n          if (_.get(slot, 'attendance') === null) {\r\n            _.set(slot, 'attendance', {\r\n              status: AttendanceStatus.NOT_YET\r\n            })\r\n          }\r\n          calendars.push(slot)\r\n        }\r\n      }\r\n    }\r\n    return calendars\r\n  }\r\n}\r\n"]}