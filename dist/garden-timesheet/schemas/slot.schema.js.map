{"version":3,"file":"slot.schema.js","sourceRoot":"/","sources":["garden-timesheet/schemas/slot.schema.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+CAA8D;AAC9D,uCAAkD;AAClD,yDAA6C;AAC7C,8DAAmE;AACnE,mEAAuD;AACvD,kFAAkE;AAClE,uEAAuD;AAUhD,IAAM,IAAI,GAAV,MAAM,IAAI;IACf,YAAY,EAAW;QACrB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA;IACf,CAAC;CAiCF,CAAA;AApCY,oBAAI;AAKf;IADC,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC;;iCACjC;AAGX;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,qBAAU,EAAE,CAAC;;wCACnC;AAGtB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;8BAC9B,IAAI;mCAAA;AAGX;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;8BAChC,IAAI;iCAAA;AAMT;IAJC,IAAA,eAAI,EAAC;QACJ,IAAI,EAAE,qBAAU;QAChB,OAAO,EAAE,qBAAU,CAAC,SAAS;KAC9B,CAAC;;oCACgB;AAGlB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,8BAAU,CAAC,IAAI,EAAE,CAAC;8BACvC,gBAAK,CAAC,QAAQ;0CAAA;AAG5B;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,wBAAO,CAAC,IAAI,EAAE,CAAC;8BACvC,gBAAK,CAAC,QAAQ;uCAAA;AAGzB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,oBAAK,CAAC,IAAI,EAAE,CAAC;8BACvC,gBAAK,CAAC,QAAQ;qCAAA;AAGvB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,GAAG,EAAE,CAAC;;sCACG;AAG7B;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;gDACb;eAnChB,IAAI;IANhB,IAAA,iBAAM,EAAC;QACN,UAAU,EAAE;YACV,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB;KACF,CAAC;;GACW,IAAI,CAoChB;AAEY,QAAA,UAAU,GAAG,wBAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA","sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\r\nimport { HydratedDocument, Types } from 'mongoose'\r\nimport { Transform } from 'class-transformer'\r\nimport { SlotNumber, SlotStatus } from '@common/contracts/constant'\r\nimport { Class } from '@src/class/schemas/class.schema'\r\nimport { Instructor } from '@instructor/schemas/instructor.schema'\r\nimport { Session } from '@class/schemas/session.schema'\r\n\r\nexport type SlotDocument = HydratedDocument<Slot>\r\n\r\n@Schema({\r\n  timestamps: {\r\n    createdAt: true,\r\n    updatedAt: true\r\n  },\r\n})\r\nexport class Slot {\r\n  constructor(id?: string) {\r\n    this._id = id\r\n  }\r\n  @Transform(({ value }) => value?.toString())\r\n  _id: string\r\n\r\n  @Prop({ type: Number, required: true, enum: SlotNumber })\r\n  slotNumber: SlotNumber\r\n\r\n  @Prop({ type: Date, required: true })\r\n  start: Date\r\n\r\n  @Prop({ type: Date, required: true })\r\n  end: Date\r\n\r\n  @Prop({\r\n    enum: SlotStatus,\r\n    default: SlotStatus.AVAILABLE\r\n  })\r\n  status: SlotStatus\r\n\r\n  @Prop({ type: Types.ObjectId, ref: Instructor.name })\r\n  instructorId: Types.ObjectId\r\n\r\n  @Prop({ type: Types.ObjectId, ref: Session.name })\r\n  sessionId: Types.ObjectId\r\n\r\n  @Prop({ type: Types.ObjectId, ref: Class.name })\r\n  classId: Types.ObjectId\r\n\r\n  @Prop({ type: Types.Map })\r\n  metadata: Record<string, any>\r\n\r\n  @Prop({ type: Boolean, default: false })\r\n  hasTakenAttendance: boolean\r\n}\r\n\r\nexport const SlotSchema = SchemaFactory.createForClass(Slot)\r\n"]}