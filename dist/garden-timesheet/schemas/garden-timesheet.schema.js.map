{"version":3,"file":"garden-timesheet.schema.js","sourceRoot":"/","sources":["garden-timesheet/schemas/garden-timesheet.schema.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+CAA8D;AAC9D,uCAAkD;AAClD,iDAAgD;AAChD,yDAA6C;AAC7C,8DAAkE;AAClE,sEAAsD;AACtD,+CAAgD;AAiBzC,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAAY,EAAW;QACrB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAA;IACf,CAAC;CAqBF,CAAA;AAxBY,0CAAe;AAK1B;IADC,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC;;4CACjC;AAMX;IAJC,IAAA,eAAI,EAAC;QACJ,IAAI,EAAE,gCAAqB;QAC3B,OAAO,EAAE,gCAAqB,CAAC,MAAM;KACtC,CAAC;;+CAC2B;AAG7B;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;8BAC/B,IAAI;6CAAA;AAGV;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,sBAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;8BACvD,gBAAK,CAAC,QAAQ;iDAAA;AAGxB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,CAAC,wBAAU,CAAC,EAAE,CAAC;;8CAChB;AAGb;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;uDACjB;0BAvBX,eAAe;IAb3B,IAAA,iBAAM,EAAC;QACN,UAAU,EAAE,mBAAmB;QAC/B,UAAU,EAAE;YACV,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB;QACD,MAAM,EAAE;YACN,SAAS,CAAC,GAAG,EAAE,GAAG;gBAChB,OAAO,GAAG,CAAC,GAAG,CAAA;YAChB,CAAC;YACD,QAAQ,EAAE,IAAI;SACf;KACF,CAAC;;GACW,eAAe,CAwB3B;AAEY,QAAA,qBAAqB,GAAG,wBAAa,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;AAClF,6BAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AACtC,6BAAqB,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;AAClF,6BAAqB,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAA","sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\r\nimport { HydratedDocument, Types } from 'mongoose'\r\nimport * as paginate from 'mongoose-paginate-v2'\r\nimport { Transform } from 'class-transformer'\r\nimport { GardenTimesheetStatus } from '@common/contracts/constant'\r\nimport { Garden } from '@garden/schemas/garden.schema'\r\nimport { Slot, SlotSchema } from './slot.schema'\r\n\r\nexport type GardenTimesheetDocument = HydratedDocument<GardenTimesheet>\r\n\r\n@Schema({\r\n  collection: 'garden-timesheets',\r\n  timestamps: {\r\n    createdAt: true,\r\n    updatedAt: true\r\n  },\r\n  toJSON: {\r\n    transform(doc, ret) {\r\n      delete ret.__v\r\n    },\r\n    virtuals: true\r\n  }\r\n})\r\nexport class GardenTimesheet {\r\n  constructor(id?: string) {\r\n    this._id = id\r\n  }\r\n  @Transform(({ value }) => value?.toString())\r\n  _id: string\r\n\r\n  @Prop({\r\n    enum: GardenTimesheetStatus,\r\n    default: GardenTimesheetStatus.ACTIVE\r\n  })\r\n  status: GardenTimesheetStatus\r\n\r\n  @Prop({ type: Date, required: true })\r\n  date: Date\r\n\r\n  @Prop({ type: Types.ObjectId, ref: Garden.name, required: true })\r\n  gardenId: Types.ObjectId\r\n\r\n  @Prop({ type: [SlotSchema] })\r\n  slots: Slot[]\r\n\r\n  @Prop({ type: Number, required: true })\r\n  gardenMaxClass: number\r\n}\r\n\r\nexport const GardenTimesheetSchema = SchemaFactory.createForClass(GardenTimesheet)\r\nGardenTimesheetSchema.plugin(paginate)\r\nGardenTimesheetSchema.index({ date: 1, status: 1, gardenId: 1 }, { unique: true })\r\nGardenTimesheetSchema.index({ 'slots._id': 1, 'slots.instructorId': 1, date: 1 })\r\n"]}