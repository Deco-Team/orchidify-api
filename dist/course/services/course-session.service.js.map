{"version":3,"file":"course-session.service.js","sourceRoot":"/","sources":["course/services/course-session.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,uCAAgC;AAChC,yEAA0E;AAE7D,QAAA,qBAAqB,GAAG,MAAM,CAAC,uBAAuB,CAAC,CAAA;AAO7D,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAEmB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IACnD,CAAC;IAEG,KAAK,CAAC,SAAS,CAAC,MAAsE;QAC3F,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA;QACpD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAA;QACpC,IAAI,YAAY;YAAE,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;QAE/E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QAEF,MAAM,YAAY,GAAG,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,CAAA;QACnG,IAAI,YAAY,KAAK,CAAC,CAAC;YAAE,OAAO,IAAI,CAAA;QAEpC,OAAO,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAA;IACvC,CAAC;CACF,CAAA;AAtBY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,qCAAiB,CAAC,CAAA;;GAFjB,oBAAoB,CAsBhC","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { Session } from '@class/schemas/session.schema'\r\nimport { Types } from 'mongoose'\r\nimport { ICourseRepository } from '@course/repositories/course.repository'\r\n\r\nexport const ICourseSessionService = Symbol('ICourseSessionService')\r\n\r\nexport interface ICourseSessionService {\r\n  findOneBy(params: { sessionId: string; courseId: string; instructorId?: string }): Promise<Session>\r\n}\r\n\r\n@Injectable()\r\nexport class CourseSessionService implements ICourseSessionService {\r\n  constructor(\r\n    @Inject(ICourseRepository)\r\n    private readonly courseRepository: ICourseRepository\r\n  ) {}\r\n\r\n  public async findOneBy(params: { sessionId: string; courseId: string; instructorId?: string }) {\r\n    const { sessionId, courseId, instructorId } = params\r\n    const conditions = { _id: courseId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const course = await this.courseRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      options: { lean: true }\r\n    })\r\n\r\n    const sessionIndex = course?.sessions?.findIndex((session) => session._id.toString() === sessionId)\r\n    if (sessionIndex === -1) return null\r\n\r\n    return course?.sessions[sessionIndex]\r\n  }\r\n}\r\n"]}