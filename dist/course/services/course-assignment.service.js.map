{"version":3,"file":"course-assignment.service.js","sourceRoot":"/","sources":["course/services/course-assignment.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AAEnD,uCAAgC;AAChC,yEAA0E;AAE7D,QAAA,wBAAwB,GAAG,MAAM,CAAC,0BAA0B,CAAC,CAAA;AAOnE,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAClC,YAEmB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IACnD,CAAC;IAEG,KAAK,CAAC,SAAS,CAAC,MAAyE;QAC9F,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA;QACvD,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAA;QACpC,IAAI,YAAY;YAAE,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;QAE/E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;YACjD,UAAU;YACV,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;SACxB,CAAC,CAAA;QAEF,IAAI,UAAsB,CAAA;QAC1B,KAAK,IAAI,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpC,UAAU,GAAG,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,CAAA;YACnG,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,aAAa,CAAA;gBACnD,MAAK;YACP,CAAC;QACH,CAAC;QACD,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAA;QAE5B,OAAO,UAAU,CAAA;IACnB,CAAC;CACF,CAAA;AA7BY,0DAAuB;kCAAvB,uBAAuB;IADnC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,qCAAiB,CAAC,CAAA;;GAFjB,uBAAuB,CA6BnC","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { Assignment } from '@src/class/schemas/assignment.schema'\r\nimport { Types } from 'mongoose'\r\nimport { ICourseRepository } from '@course/repositories/course.repository'\r\n\r\nexport const ICourseAssignmentService = Symbol('ICourseAssignmentService')\r\n\r\nexport interface ICourseAssignmentService {\r\n  findOneBy(params: { assignmentId: string; courseId: string; instructorId?: string }): Promise<Assignment>\r\n}\r\n\r\n@Injectable()\r\nexport class CourseAssignmentService implements ICourseAssignmentService {\r\n  constructor(\r\n    @Inject(ICourseRepository)\r\n    private readonly courseRepository: ICourseRepository\r\n  ) {}\r\n\r\n  public async findOneBy(params: { assignmentId: string; courseId: string; instructorId?: string }) {\r\n    const { assignmentId, courseId, instructorId } = params\r\n    const conditions = { _id: courseId }\r\n    if (instructorId) conditions['instructorId'] = new Types.ObjectId(instructorId)\r\n\r\n    const course = await this.courseRepository.findOne({\r\n      conditions,\r\n      projection: 'sessions',\r\n      options: { lean: true }\r\n    })\r\n\r\n    let assignment: Assignment\r\n    for (let session of course.sessions) {\r\n      assignment = session?.assignments?.find((assignment) => assignment._id.toString() === assignmentId)\r\n      if (assignment) {\r\n        assignment['sessionNumber'] = session.sessionNumber\r\n        break\r\n      }\r\n    }\r\n    if (!assignment) return null\r\n\r\n    return assignment\r\n  }\r\n}\r\n"]}