{"version":3,"file":"course-combo.service.js","sourceRoot":"/","sources":["course/services/course-combo.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { ICourseRepository } from '@course/repositories/course.repository'\r\nimport { Course, CourseDocument } from '@course/schemas/course.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CourseStatus } from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { COURSE_COMBO_LIST_PROJECTION } from '@course/contracts/constant'\r\nimport * as _ from 'lodash'\r\nimport { CreateCourseComboDto } from '@course/dto/create-course-combo.dto'\r\nimport { QueryCourseComboDto, StaffQueryCourseComboDto } from '@course/dto/view-course-combo.dto'\r\nimport { COURSE_INSTRUCTOR_DETAIL_PROJECTION } from '@instructor/contracts/constant'\r\n\r\nexport const ICourseComboService = Symbol('ICourseComboService')\r\n\r\nexport interface ICourseComboService {\r\n  create(createCourseComboDto: CreateCourseComboDto, options?: SaveOptions | undefined): Promise<CourseDocument>\r\n  findById(\r\n    courseId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<CourseDocument>\r\n  update(\r\n    conditions: FilterQuery<Course>,\r\n    payload: UpdateQuery<Course>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<CourseDocument>\r\n  listByInstructor(instructorId: string, pagination: PaginationParams, queryCourseDto: QueryCourseComboDto)\r\n  listByStaff(pagination: PaginationParams, queryCourseDto: StaffQueryCourseComboDto)\r\n  findMany(\r\n    conditions: FilterQuery<CourseDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<CourseDocument[]>\r\n}\r\n\r\n@Injectable()\r\nexport class CourseComboService implements ICourseComboService {\r\n  constructor(\r\n    @Inject(ICourseRepository)\r\n    private readonly courseRepository: ICourseRepository\r\n  ) {}\r\n\r\n  public async create(createCourseComboDto: CreateCourseComboDto, options?: SaveOptions | undefined) {\r\n    createCourseComboDto['code'] = await this.generateCode()\r\n    const courseCombo = await this.courseRepository.create(createCourseComboDto, options)\r\n    return courseCombo\r\n  }\r\n\r\n  public async findById(\r\n    courseId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const course = await this.courseRepository.findOne({\r\n      conditions: {\r\n        _id: courseId,\r\n        childCourseIds: { $ne: [] }\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return course\r\n  }\r\n\r\n  public update(conditions: FilterQuery<Course>, payload: UpdateQuery<Course>, options?: QueryOptions | undefined) {\r\n    return this.courseRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async listByInstructor(\r\n    instructorId: string,\r\n    pagination: PaginationParams,\r\n    queryCourseDto: QueryCourseComboDto,\r\n    projection = COURSE_COMBO_LIST_PROJECTION\r\n  ) {\r\n    const { title } = queryCourseDto\r\n    const filter: Record<string, any> = {\r\n      instructorId: new Types.ObjectId(instructorId),\r\n      status: CourseStatus.ACTIVE,\r\n      childCourseIds: { $ne: [] }\r\n    }\r\n\r\n    if (title) {\r\n      filter['$text'] = {\r\n        $search: title\r\n      }\r\n    }\r\n\r\n    return this.courseRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n\r\n  async listByStaff(\r\n    pagination: PaginationParams,\r\n    queryCourseDto: StaffQueryCourseComboDto,\r\n    projection = COURSE_COMBO_LIST_PROJECTION\r\n  ) {\r\n    const { title } = queryCourseDto\r\n    const filter: Record<string, any> = {\r\n      status: CourseStatus.ACTIVE,\r\n      childCourseIds: { $ne: [] }\r\n    }\r\n\r\n    if (title) {\r\n      filter['$text'] = {\r\n        $search: title\r\n      }\r\n    }\r\n\r\n    return this.courseRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection,\r\n      populate: [\r\n        {\r\n          path: 'instructor',\r\n          select: COURSE_INSTRUCTOR_DETAIL_PROJECTION\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<CourseDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const courses = await this.courseRepository.findMany({\r\n      conditions: {\r\n        childCourseIds: { $ne: [] },\r\n        ...conditions,\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return courses\r\n  }\r\n\r\n  private async generateCode(): Promise<string> {\r\n    // Generate OCPxxx format data\r\n    const prefix = `OCP`\r\n    // Find the latest entry with the same date prefix\r\n    const lastRecord = await this.courseRepository.model.findOne().sort({ createdAt: -1 })\r\n    const number = parseInt(_.get(lastRecord, 'code', `${prefix}000`).split(prefix)[1]) + 1\r\n    return `${prefix}${number.toString().padStart(3, '0')}`\r\n  }\r\n}\r\n"]}