{"version":3,"file":"course.service.js","sourceRoot":"/","sources":["course/services/course.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { ICourseRepository } from '@course/repositories/course.repository'\r\nimport { Course, CourseDocument } from '@course/schemas/course.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreateCourseDto } from '@course/dto/create-course.dto'\r\nimport { ClassStatus, CourseStatus } from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { COURSE_LIST_PROJECTION } from '@course/contracts/constant'\r\nimport { QueryCourseDto, PublicQueryCourseDto, StaffQueryCourseDto } from '@course/dto/view-course.dto'\r\nimport { CourseLevel } from '@src/common/contracts/constant'\r\nimport * as _ from 'lodash'\r\nimport { HelperService } from '@common/services/helper.service'\r\n\r\nexport const ICourseService = Symbol('ICourseService')\r\n\r\nexport interface ICourseService {\r\n  create(createCourseDto: CreateCourseDto, options?: SaveOptions | undefined): Promise<CourseDocument>\r\n  findById(\r\n    courseId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<CourseDocument>\r\n  update(\r\n    conditions: FilterQuery<Course>,\r\n    payload: UpdateQuery<Course>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<CourseDocument>\r\n  listByInstructor(instructorId: string, pagination: PaginationParams, queryCourseDto: QueryCourseDto)\r\n  listByStaff(pagination: PaginationParams, queryCourseDto: StaffQueryCourseDto)\r\n  listPublicCourses(pagination: PaginationParams, queryCourseDto: PublicQueryCourseDto)\r\n  findManyByStatus(status: CourseStatus[]): Promise<CourseDocument[]>\r\n}\r\n\r\n@Injectable()\r\nexport class CourseService implements ICourseService {\r\n  constructor(\r\n    @Inject(ICourseRepository)\r\n    private readonly courseRepository: ICourseRepository,\r\n    private readonly helperService: HelperService\r\n  ) {}\r\n\r\n  public async create(createCourseDto: CreateCourseDto, options?: SaveOptions | undefined) {\r\n    createCourseDto['code'] = await this.generateCode()\r\n    const course = await this.courseRepository.create(createCourseDto, options)\r\n    return course\r\n  }\r\n\r\n  public async findById(\r\n    courseId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const course = await this.courseRepository.findOne({\r\n      conditions: {\r\n        _id: courseId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return course\r\n  }\r\n\r\n  public update(conditions: FilterQuery<Course>, payload: UpdateQuery<Course>, options?: QueryOptions | undefined) {\r\n    return this.courseRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async listByInstructor(\r\n    instructorId: string,\r\n    pagination: PaginationParams,\r\n    queryCourseDto: QueryCourseDto,\r\n    projection = COURSE_LIST_PROJECTION\r\n  ) {\r\n    const { title, type, level, status } = queryCourseDto\r\n    const filter: Record<string, any> = {\r\n      instructorId: new Types.ObjectId(instructorId),\r\n      status: {\r\n        $ne: CourseStatus.DELETED\r\n      }\r\n    }\r\n\r\n    const validLevel = level?.filter((level) =>\r\n      [CourseLevel.BASIC, CourseLevel.INTERMEDIATE, CourseLevel.ADVANCED].includes(level)\r\n    )\r\n    if (validLevel?.length > 0) {\r\n      filter['level'] = {\r\n        $in: validLevel\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) => [CourseStatus.DRAFT, CourseStatus.ACTIVE].includes(status))\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    if (title) {\r\n      filter['$text'] = {\r\n        $search: title\r\n      }\r\n    }\r\n\r\n    if (type) {\r\n      filter['type'] = type\r\n    }\r\n\r\n    return this.courseRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n\r\n  async listByStaff(\r\n    pagination: PaginationParams,\r\n    queryCourseDto: StaffQueryCourseDto,\r\n    projection = COURSE_LIST_PROJECTION\r\n  ) {\r\n    const { title, type, level, status } = queryCourseDto\r\n    const filter: Record<string, any> = {\r\n      status: {\r\n        $in: [CourseStatus.ACTIVE]\r\n      },\r\n    }\r\n\r\n    const validLevel = level?.filter((level) =>\r\n      [CourseLevel.BASIC, CourseLevel.INTERMEDIATE, CourseLevel.ADVANCED].includes(level)\r\n    )\r\n    if (validLevel?.length > 0) {\r\n      filter['level'] = {\r\n        $in: validLevel\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) => [CourseStatus.ACTIVE].includes(status))\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    if (title) {\r\n      filter['$text'] = {\r\n        $search: title\r\n      }\r\n    }\r\n\r\n    if (type) {\r\n      filter['type'] = type\r\n    }\r\n\r\n    return this.courseRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n\r\n  async listPublicCourses(pagination: PaginationParams, queryCourseDto: PublicQueryCourseDto) {\r\n    const { title, type, level, fromPrice, toPrice } = queryCourseDto\r\n    const { sort, limit, page } = pagination\r\n    const aggregateMatch = []\r\n\r\n    let textSearch = ''\r\n    if (title) textSearch += title.trim()\r\n    if (type) textSearch += (' ' + type.trim()).trim()\r\n    if (!!textSearch) {\r\n      aggregateMatch.push({\r\n        $match: {\r\n          $text: {\r\n            $search: textSearch\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    const validLevel = level?.filter((level) =>\r\n      [CourseLevel.BASIC, CourseLevel.INTERMEDIATE, CourseLevel.ADVANCED].includes(level)\r\n    )\r\n    if (validLevel?.length > 0) {\r\n      aggregateMatch.push({\r\n        $match: {\r\n          level: {\r\n            $in: validLevel\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    if (fromPrice !== undefined && toPrice !== undefined) {\r\n      aggregateMatch.push({\r\n        $match: {\r\n          price: {\r\n            $gte: fromPrice,\r\n            $lte: toPrice\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    const result = await this.courseRepository.model.aggregate([\r\n      ...aggregateMatch,\r\n      {\r\n        $project: {\r\n          _id: 1,\r\n          code: 1,\r\n          title: 1,\r\n          price: 1,\r\n          level: 1,\r\n          type: 1,\r\n          duration: 1,\r\n          thumbnail: 1,\r\n          status: 1,\r\n          learnerLimit: 1,\r\n          rate: 1,\r\n          discount: 1,\r\n          instructorId: 1,\r\n          isRequesting: 1,\r\n          createdAt: 1,\r\n          updatedAt: 1\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'classes',\r\n          localField: '_id',\r\n          foreignField: 'courseId',\r\n          as: 'classes',\r\n          pipeline: [\r\n            {\r\n              $match: {\r\n                status: ClassStatus.PUBLISHED\r\n              }\r\n            },\r\n            {\r\n              $project: {\r\n                _id: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $match: {\r\n          classes: {\r\n            $exists: true,\r\n            $ne: []\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'instructors',\r\n          localField: 'instructorId',\r\n          foreignField: '_id',\r\n          as: 'instructors',\r\n          pipeline: [\r\n            {\r\n              $project: {\r\n                _id: 1,\r\n                name: 1,\r\n                idCardPhoto: 1,\r\n                avatar: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $addFields: {\r\n          instructor: {\r\n            $arrayElemAt: ['$instructors', 0]\r\n          },\r\n          classesCount: {\r\n            $reduce: {\r\n              input: {\r\n                $ifNull: ['$classes', []]\r\n              },\r\n              initialValue: 0,\r\n              in: {\r\n                $add: ['$$value', 1]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          classes: 0,\r\n          instructors: 0\r\n        }\r\n      },\r\n      {\r\n        $sort: sort\r\n      },\r\n      {\r\n        $facet: {\r\n          list: [\r\n            {\r\n              $skip: (page - 1) * limit\r\n            },\r\n            {\r\n              $limit: limit\r\n            }\r\n          ],\r\n          count: [\r\n            {\r\n              $count: 'totalDocs'\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ])\r\n\r\n    const totalDocs = _.get(result, '[0].count[0].totalDocs', 0)\r\n    return this.helperService.convertDataToPaging({\r\n      docs: result[0].list,\r\n      totalDocs,\r\n      limit,\r\n      page\r\n    })\r\n  }\r\n\r\n  async findManyByStatus(status: CourseStatus[]): Promise<CourseDocument[]> {\r\n    const courses = await this.courseRepository.findMany({\r\n      conditions: {\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n    return courses\r\n  }\r\n\r\n  private async generateCode(): Promise<string> {\r\n    // Generate OCPxxx format data\r\n    const prefix = `OCP`\r\n    // Find the latest entry with the same date prefix\r\n    const lastRecord = await this.courseRepository.model.findOne().sort({ createdAt: -1 })\r\n    const number = parseInt(_.get(lastRecord, 'code', `${prefix}000`).split(prefix)[1]) + 1\r\n    return `${prefix}${number.toString().padStart(3, '0')}`\r\n  }\r\n}\r\n"]}