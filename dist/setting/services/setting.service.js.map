{"version":3,"file":"setting.service.js","sourceRoot":"/","sources":["setting/services/setting.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmD;AACnD,2EAA6E;AAMhE,QAAA,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAqBjD,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAEmB,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IACrD,CAAC;IAEG,KAAK,CAAC,QAAQ,CACnB,SAAiB,EACjB,UAAyC,EACzC,SAAkC;QAElC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACnD,UAAU,EAAE;gBACV,GAAG,EAAE,SAAS;aACf;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,GAAe,EAAE,UAAyC,EAAE,SAAkC;QACnH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACnD,UAAU,EAAE;gBACV,GAAG;aACJ;YACD,UAAU;YACV,SAAS;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;IAEM,MAAM,CAAC,UAAgC,EAAE,OAA6B,EAAE,OAAkC;QAC/G,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAC9E,CAAC;CACF,CAAA;AAnCY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,uCAAkB,CAAC,CAAA;;GAFlB,cAAc,CAmC1B","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport { ISettingRepository } from '@setting/repositories/setting.repository'\r\nimport { Setting, SettingDocument } from '@setting/schemas/setting.schema'\r\nimport { FilterQuery, PopulateOptions, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\nimport * as _ from 'lodash'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\n\r\nexport const ISettingService = Symbol('ISettingService')\r\n\r\nexport interface ISettingService {\r\n  findById(\r\n    settingId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<SettingDocument>\r\n  findByKey(\r\n    key: SettingKey,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<SettingDocument>\r\n  update(\r\n    conditions: FilterQuery<Setting>,\r\n    payload: UpdateQuery<Setting>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<SettingDocument>\r\n}\r\n\r\n@Injectable()\r\nexport class SettingService implements ISettingService {\r\n  constructor(\r\n    @Inject(ISettingRepository)\r\n    private readonly settingRepository: ISettingRepository\r\n  ) {}\r\n\r\n  public async findById(\r\n    settingId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const setting = await this.settingRepository.findOne({\r\n      conditions: {\r\n        _id: settingId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return setting\r\n  }\r\n\r\n  public async findByKey(key: SettingKey, projection?: string | Record<string, any>, populates?: Array<PopulateOptions>) {\r\n    const setting = await this.settingRepository.findOne({\r\n      conditions: {\r\n        key\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return setting\r\n  }\r\n\r\n  public update(conditions: FilterQuery<Setting>, payload: UpdateQuery<Setting>, options?: QueryOptions | undefined) {\r\n    return this.settingRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n}\r\n"]}