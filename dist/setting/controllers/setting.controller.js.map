{"version":3,"file":"setting.controller.js","sourceRoot":"/","sources":["setting/controllers/setting.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA0E;AAC1E,6CAA4G;AAG5G,oDAAqD;AACrD,wDAAgD;AAChD,2FAA4E;AAC5E,iEAAmE;AACnE,8DAAgI;AAChI,oDAAwD;AACxD,yEAA+D;AAC/D,qEAA0D;AAKnD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEmB,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IAC/C,CAAC;IASE,AAAN,KAAK,CAAC,QAAQ,CAAU,eAAgC;QACtD,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;IACjE,CAAC;IAQK,AAAN,KAAK,CAAC,qBAAqB;QACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,qBAAU,CAAC,WAAW,CAAC,CAAA;QAC3E,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAA;QAC3F,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,CAAA;IAChC,CAAC;CACF,CAAA;AA5BY,8CAAiB;AAatB;IAPL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,2BAA2B;KACrC,CAAC;IACD,IAAA,uBAAa,GAAE;IACf,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,4CAAyB,EAAE,CAAC;IAClD,IAAA,kBAAS,EAAC,6BAAY,CAAC,YAAY,CAAC;IACpC,IAAA,YAAG,GAAE;IACU,WAAA,IAAA,cAAK,GAAE,CAAA;;qCAAkB,kCAAe;;iDAEvD;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,oCAAoC;KAC9C,CAAC;IACD,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,uDAAoC,EAAE,CAAC;IAC7D,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAC;IAC5C,IAAA,YAAG,EAAC,cAAc,CAAC;;;;8DAKnB;4BA3BU,iBAAiB;IAH7B,IAAA,iBAAO,EAAC,SAAS,CAAC;IAClB,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAC9C,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;;GAFf,iBAAiB,CA4B7B","sourcesContent":["import { Controller, Get, Inject, Query, UseGuards } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse } from '@common/contracts/dto'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { CourseTypesSettingDetailDataResponse, QuerySettingDto, SettingDetailDataResponse } from '@setting/dto/view-setting.dto'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\n\r\n@ApiTags('Setting')\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@Controller()\r\nexport class SettingController {\r\n  constructor(\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `View Setting Value By Key`\r\n  })\r\n  @ApiBearerAuth()\r\n  @ApiOkResponse({ type: SettingDetailDataResponse })\r\n  @UseGuards(JwtAuthGuard.ACCESS_TOKEN)\r\n  @Get()\r\n  async getByKey(@Query() querySettingDto: QuerySettingDto) {\r\n    return await this.settingService.findByKey(querySettingDto.key)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View Course Types (Setting Detail)`\r\n  })\r\n  @ApiOkResponse({ type: CourseTypesSettingDetailDataResponse })\r\n  @ApiErrorResponse([Errors.SETTING_NOT_FOUND])\r\n  @Get('course-types')\r\n  async getCourseTypesSetting() {\r\n    const setting = await this.settingService.findByKey(SettingKey.CourseTypes)\r\n    if (!setting || setting.enabled === false) throw new AppException(Errors.SETTING_NOT_FOUND)\r\n    return { docs: setting.value }\r\n  }\r\n}\r\n"]}