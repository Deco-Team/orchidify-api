{"version":3,"file":"seeder.command.js","sourceRoot":"/","sources":["command/seeder.command.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,8EAA+D;AAC/D,2CAAuC;AACvC,yEAAmE;AACnE,mDAAuD;AAShD,IAAM,aAAa,qBAAnB,MAAM,aAAc,SAAQ,8BAAa;IAE9C,YAEE,cAAgD;QAEhD,KAAK,EAAE,CAAA;QAFU,mBAAc,GAAd,cAAc,CAAiB;QAHjC,cAAS,GAAG,IAAI,8BAAS,CAAC,eAAa,CAAC,IAAI,CAAC,CAAA;IAM9D,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,WAAqB,EAAE,OAA6B;QAC5D,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;IACjC,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;QAGlD,MAAM,WAAW,GAAG,OAAO,CAAC,6CAA6C,CAAC,CAAA;QAE1E,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YAC7C,OAAM;QACR,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAA;QAC/C,MAAM,oBAAoB,GAAG,EAAE,CAAA;QAC/B,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,OAAO,CAAC,GAAG,EAAE,CAAC,CAAA;YACzC,oBAAoB,CAAC,IAAI,CACvB,IAAI,CAAC,cAAc,CAAC,MAAM,CACxB,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EACpB;gBACE,IAAI,EAAE;oBACJ,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,OAAO,EAAE,OAAO,CAAC,OAAO;iBACzB;aACF,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CACF,CAAA;QACH,CAAC;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QAEvC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAA;IACrD,CAAC;CACF,CAAA;AA9CY,sCAAa;wBAAb,aAAa;IADzB,IAAA,wBAAO,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;IAIvD,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;;GAHf,aAAa,CA8CzB","sourcesContent":["import { AppLogger } from '@common/services/app-logger.service'\r\nimport { Inject } from '@nestjs/common'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { Command, CommandRunner } from 'nest-commander'\r\n\r\ninterface BasicCommandOptions {\r\n  string?: string\r\n  boolean?: boolean\r\n  number?: number\r\n}\r\n\r\n@Command({ name: 'seed', description: 'A parameter parse' })\r\nexport class SeederCommand extends CommandRunner {\r\n  private readonly appLogger = new AppLogger(SeederCommand.name)\r\n  constructor(\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService\r\n  ) {\r\n    super()\r\n  }\r\n\r\n  async run(passedParam: string[], options?: BasicCommandOptions): Promise<void> {\r\n    await this.runWithSettingData()\r\n  }\r\n\r\n  async runWithSettingData() {\r\n    this.appLogger.log(`Start Setting Seeder Command`)\r\n\r\n    // read data from src\\command\\data\\orchidify-db.settings.json\r\n    const settingData = require('src/command/data/orchidify-db.settings.json')\r\n\r\n    if (settingData.length === 0) {\r\n      this.appLogger.error(`No setting data found`)\r\n      return\r\n    }\r\n\r\n    this.appLogger.log(JSON.stringify(settingData))\r\n    const updateSettingPromise = []\r\n    for (const setting of settingData) {\r\n      this.appLogger.log(`Key: ${setting.key}`)\r\n      updateSettingPromise.push(\r\n        this.settingService.update(\r\n          { key: setting.key },\r\n          {\r\n            $set: {\r\n              key: setting.key,\r\n              value: setting.value,\r\n              enabled: setting.enabled\r\n            }\r\n          },\r\n          { upsert: true }\r\n        )\r\n      )\r\n    }\r\n    await Promise.all(updateSettingPromise)\r\n\r\n    this.appLogger.log(`Finish Setting Seeder Command`)\r\n  }\r\n}\r\n"]}