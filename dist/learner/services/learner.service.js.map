{"version":3,"file":"learner.service.js","sourceRoot":"/","sources":["learner/services/learner.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,8DAA0D;AAE1D,oDAAqE;AAErE,2CAAmD;AACnD,2EAAiF;AAIpE,QAAA,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAejD,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAEmB,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IACrD,CAAC;IAEG,MAAM,CAAC,OAAY,EAAE,OAAiC;QAC3D,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;IACxD,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,SAAiB,EAAE,UAAyC;QAChF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACnD,UAAU,EAAE;gBACV,GAAG,EAAE,SAAS;aACf;YACD,UAAU;SACX,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,KAAa,EAAE,UAAyC;QAC/E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACnD,UAAU,EAAE;gBACV,KAAK;aACN;YACD,UAAU;SACX,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;IAEM,MAAM,CAAC,UAAgC,EAAE,OAA6B,EAAE,OAAkC;QAC/G,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IAC9E,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,UAA4B,EAAE,eAAgC,EAAE,UAAU,GAAG,kCAAuB;QAC7G,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,eAAe,CAAA;QAC/C,MAAM,MAAM,GAAwB;YAClC,MAAM,EAAE;gBACN,GAAG,EAAE,wBAAa,CAAC,UAAU;aAC9B;SACF,CAAA;QAED,MAAM,WAAW,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAC5C,CAAC,wBAAa,CAAC,MAAM,EAAE,wBAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAChE,CAAA;QACD,IAAI,WAAW,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC,QAAQ,CAAC,GAAG;gBACjB,GAAG,EAAE,WAAW;aACjB,CAAA;QACH,CAAC;QAED,IAAI,UAAU,GAAG,EAAE,CAAA;QACnB,IAAI,IAAI;YAAE,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE,CAAA;QACnC,IAAI,KAAK;YAAE,UAAU,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;QAC3C,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,CAAC,OAAO,CAAC,GAAG;gBAChB,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE;aAC3B,CAAA;QACH,CAAC;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACnD,GAAG,UAAU;YACb,UAAU;SACX,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AAjEY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,uCAAkB,CAAC,CAAA;;GAFlB,cAAc,CAiE1B","sourcesContent":["import { IAuthUserService } from '@auth/services/auth.service'\r\nimport { LearnerStatus } from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { LEARNER_LIST_PROJECTION } from '@learner/contracts/constant'\r\nimport { QueryLearnerDto } from '@learner/dto/view-learner.dto'\r\nimport { Injectable, Inject } from '@nestjs/common'\r\nimport { ILearnerRepository } from '@src/learner/repositories/learner.repository'\r\nimport { Learner, LearnerDocument } from '@src/learner/schemas/learner.schema'\r\nimport { FilterQuery, QueryOptions, SaveOptions, UpdateQuery } from 'mongoose'\r\n\r\nexport const ILearnerService = Symbol('ILearnerService')\r\n\r\nexport interface ILearnerService extends IAuthUserService {\r\n  create(learner: any, options?: SaveOptions | undefined): Promise<LearnerDocument>\r\n  findById(learnerId: string, projection?: string | Record<string, any>): Promise<LearnerDocument>\r\n  findByEmail(email: string, projection?: string | Record<string, any>): Promise<LearnerDocument>\r\n  update(\r\n    conditions: FilterQuery<Learner>,\r\n    payload: UpdateQuery<Learner>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<LearnerDocument>\r\n  list(pagination: PaginationParams, queryLearnerDto: QueryLearnerDto)\r\n}\r\n\r\n@Injectable()\r\nexport class LearnerService implements ILearnerService {\r\n  constructor(\r\n    @Inject(ILearnerRepository)\r\n    private readonly learnerRepository: ILearnerRepository\r\n  ) {}\r\n\r\n  public create(learner: any, options?: SaveOptions | undefined) {\r\n    return this.learnerRepository.create(learner, options)\r\n  }\r\n\r\n  public async findById(learnerId: string, projection?: string | Record<string, any>) {\r\n    const learner = await this.learnerRepository.findOne({\r\n      conditions: {\r\n        _id: learnerId\r\n      },\r\n      projection\r\n    })\r\n    return learner\r\n  }\r\n\r\n  public async findByEmail(email: string, projection?: string | Record<string, any>) {\r\n    const learner = await this.learnerRepository.findOne({\r\n      conditions: {\r\n        email\r\n      },\r\n      projection\r\n    })\r\n    return learner\r\n  }\r\n\r\n  public update(conditions: FilterQuery<Learner>, payload: UpdateQuery<Learner>, options?: QueryOptions | undefined) {\r\n    return this.learnerRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(pagination: PaginationParams, queryLearnerDto: QueryLearnerDto, projection = LEARNER_LIST_PROJECTION) {\r\n    const { name, email, status } = queryLearnerDto\r\n    const filter: Record<string, any> = {\r\n      status: {\r\n        $ne: LearnerStatus.UNVERIFIED\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [LearnerStatus.ACTIVE, LearnerStatus.INACTIVE].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    let textSearch = ''\r\n    if (name) textSearch += name.trim()\r\n    if (email) textSearch += ' ' + email.trim()\r\n    if (textSearch) {\r\n      filter['$text'] = {\r\n        $search: textSearch.trim()\r\n      }\r\n    }\r\n\r\n    return this.learnerRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection\r\n    })\r\n  }\r\n}\r\n"]}