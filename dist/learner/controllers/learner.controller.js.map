{"version":3,"file":"learner.controller.js","sourceRoot":"/","sources":["learner/controllers/learner.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmF;AACnF,6CAA4G;AAC5G,4BAA2B;AAE3B,iEAAuE;AACvE,oDAA2F;AAC3F,2EAAwD;AACxD,8DAAqD;AACrD,qEAA0D;AAC1D,+DAAqD;AACrD,yEAA+D;AAC/D,wDAAgD;AAChD,8DAA0E;AAC1E,2FAA4E;AAC5E,oDAAwE;AACxE,kFAAiF;AAQ1E,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEmB,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IAC/C,CAAC;IAQE,AAAN,KAAK,CAAC,WAAW,CAAQ,GAAG;QAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAClC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,qCAA0B,CAAC,CAAA;QAEnF,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAA;QAC9D,OAAO,OAAO,CAAA;IAChB,CAAC;IAQK,AAAN,KAAK,CAAC,aAAa,CAAQ,GAAG,EAAU,uBAAgD;QACtF,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QAClC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,uBAAuB,CAAC,CAAA;QAElF,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,4BAAY,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAA;QAC9D,OAAO,IAAI,qBAAe,CAAC,IAAI,CAAC,CAAA;IAClC,CAAC;CACF,CAAA;AAjCY,8CAAiB;AAYtB;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,sBAAsB;KAChC,CAAC;IACD,IAAA,YAAG,EAAC,SAAS,CAAC;IACd,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,6CAA0B,EAAE,CAAC;IACnD,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAC;IAC1B,WAAA,IAAA,YAAG,GAAE,CAAA;;;;oDAMvB;AAQK;IANL,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,wBAAwB;KAClC,CAAC;IACD,IAAA,YAAG,EAAC,SAAS,CAAC;IACd,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,yBAAmB,EAAE,CAAC;IAC5C,IAAA,yCAAgB,EAAC,CAAC,cAAM,CAAC,iBAAiB,CAAC,CAAC;IACxB,WAAA,IAAA,YAAG,GAAE,CAAA;IAAO,WAAA,IAAA,aAAI,GAAE,CAAA;;6CAA0B,oDAAuB;;sDAMvF;4BAhCU,iBAAiB;IAN7B,IAAA,iBAAO,EAAC,SAAS,CAAC;IAClB,IAAA,uBAAa,GAAE;IACf,IAAA,+BAAqB,EAAC,EAAE,IAAI,EAAE,mBAAa,EAAE,CAAC;IAC9C,IAAA,uBAAK,EAAC,mBAAQ,CAAC,OAAO,CAAC;IACvB,IAAA,kBAAS,EAAC,6BAAY,CAAC,YAAY,EAAE,wBAAU,CAAC;IAChD,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,iCAAe,CAAC,CAAA;;GAFf,iBAAiB,CAiC7B","sourcesContent":["import { Controller, Get, Req, UseGuards, Inject, Put, Body } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ILearnerService } from '@src/learner/services/learner.service'\r\nimport { ErrorResponse, SuccessDataResponse, SuccessResponse } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { LearnerProfileDataResponse } from '@learner/dto/view-learner.dto'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { LEARNER_PROFILE_PROJECTION } from '@learner/contracts/constant'\r\nimport { UpdateLearnerProfileDto } from '@learner/dto/update-learner-profile.dto'\r\n\r\n@ApiTags('Learner')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@Roles(UserRole.LEARNER)\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Controller()\r\nexport class LearnerController {\r\n  constructor(\r\n    @Inject(ILearnerService)\r\n    private readonly learnerService: ILearnerService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: 'View learner profile'\r\n  })\r\n  @Get('profile')\r\n  @ApiOkResponse({ type: LearnerProfileDataResponse })\r\n  @ApiErrorResponse([Errors.LEARNER_NOT_FOUND])\r\n  async viewProfile(@Req() req) {\r\n    const { _id } = _.get(req, 'user')\r\n    const learner = await this.learnerService.findById(_id, LEARNER_PROFILE_PROJECTION)\r\n\r\n    if (!learner) throw new AppException(Errors.LEARNER_NOT_FOUND)\r\n    return learner\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: 'Update learner profile'\r\n  })\r\n  @Put('profile')\r\n  @ApiOkResponse({ type: SuccessDataResponse })\r\n  @ApiErrorResponse([Errors.LEARNER_NOT_FOUND])\r\n  async updateProfile(@Req() req, @Body() updateLearnerProfileDto: UpdateLearnerProfileDto) {\r\n    const { _id } = _.get(req, 'user')\r\n    const learner = await this.learnerService.update({ _id }, updateLearnerProfileDto)\r\n\r\n    if (!learner) throw new AppException(Errors.LEARNER_NOT_FOUND)\r\n    return new SuccessResponse(true)\r\n  }\r\n}\r\n"]}