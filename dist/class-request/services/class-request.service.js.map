{"version":3,"file":"class-request.service.js","sourceRoot":"/","sources":["class-request/services/class-request.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as moment from 'moment-timezone'\r\nimport * as _ from 'lodash'\r\nimport { IClassRequestRepository } from '@src/class-request/repositories/class-request.repository'\r\nimport { ClassRequest, ClassRequestDocument } from '@src/class-request/schemas/class-request.schema'\r\nimport { Connection, FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreatePublishClassRequestDto } from '@class-request/dto/create-publish-class-request.dto'\r\nimport { ClassRequestStatus, ClassRequestType, ClassStatus, CourseStatus, Weekday } from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { CLASS_REQUEST_LIST_PROJECTION } from '@src/class-request/contracts/constant'\r\nimport { QueryClassRequestDto } from '@src/class-request/dto/view-class-request.dto'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { SuccessResponse, UserAuth } from '@common/contracts/dto'\r\nimport { ApprovePublishClassRequestDto } from '@class-request/dto/approve-publish-class-request.dto'\r\nimport { RejectPublishClassRequestDto } from '@class-request/dto/reject-publish-class-request.dto'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ICourseService } from '@course/services/course.service'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { BaseProgressDto } from '@class/dto/progress.dto'\r\nimport { IQueueProducerService } from '@queue/services/queue-producer.service'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { HelperService } from '@common/services/helper.service'\r\n\r\nexport const IClassRequestService = Symbol('IClassRequestService')\r\n\r\nexport interface IClassRequestService {\r\n  createPublishClassRequest(\r\n    createPublishClassRequestDto: CreatePublishClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ): Promise<ClassRequestDocument>\r\n  findById(\r\n    classRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ClassRequestDocument>\r\n  update(\r\n    conditions: FilterQuery<ClassRequest>,\r\n    payload: UpdateQuery<ClassRequest>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<ClassRequestDocument>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryClassRequestDto: QueryClassRequestDto,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  )\r\n  findMany(\r\n    conditions: FilterQuery<ClassRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ClassRequestDocument[]>\r\n  findManyByStatus(status: ClassRequestStatus[]): Promise<ClassRequestDocument[]>\r\n  findManyByCreatedByAndStatus(createdBy: string, status?: ClassRequestStatus[]): Promise<ClassRequestDocument[]>\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number>\r\n  cancelPublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  expirePublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  approvePublishClassRequest(\r\n    classRequestId: string,\r\n    approvePublishClassRequestDto: ApprovePublishClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  rejectPublishClassRequest(\r\n    classRequestId: string,\r\n    rejectPublishClassRequestDto: RejectPublishClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n}\r\n\r\n@Injectable()\r\nexport class ClassRequestService implements IClassRequestService {\r\n  private readonly appLogger = new AppLogger(ClassRequestService.name)\r\n  constructor(\r\n    @Inject(IClassRequestRepository)\r\n    private readonly classRequestRepository: IClassRequestRepository,\r\n    @Inject(ICourseService)\r\n    private readonly courseService: ICourseService,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService,\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @InjectConnection() readonly connection: Connection,\r\n    @Inject(IQueueProducerService)\r\n    private readonly queueProducerService: IQueueProducerService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    private readonly helperService: HelperService\r\n  ) {}\r\n  public async createPublishClassRequest(\r\n    createPublishClassRequestDto: CreatePublishClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ) {\r\n    const classRequest = await this.classRequestRepository.create(createPublishClassRequestDto, options)\r\n    // update course\r\n    await this.courseService.update(\r\n      { _id: classRequest.courseId },\r\n      {\r\n        $set: {\r\n          isRequesting: true\r\n        }\r\n      }\r\n    )\r\n    this.addClassRequestAutoExpiredJob(classRequest)\r\n\r\n    return classRequest\r\n  }\r\n\r\n  public async findById(\r\n    classRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const classRequest = await this.classRequestRepository.findOne({\r\n      conditions: {\r\n        _id: classRequestId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return classRequest\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<ClassRequest>,\r\n    payload: UpdateQuery<ClassRequest>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.classRequestRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryClassRequestDto: QueryClassRequestDto,\r\n    projection = CLASS_REQUEST_LIST_PROJECTION,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const { type, status, createdBy } = queryClassRequestDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    if (createdBy) {\r\n      filter['createdBy'] = new Types.ObjectId(createdBy)\r\n    }\r\n\r\n    const validType = type?.filter((type) => [ClassRequestType.PUBLISH_CLASS].includes(type))\r\n    if (validType?.length > 0) {\r\n      filter['type'] = {\r\n        $in: validType\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [\r\n        ClassRequestStatus.PENDING,\r\n        ClassRequestStatus.APPROVED,\r\n        ClassRequestStatus.CANCELED,\r\n        ClassRequestStatus.EXPIRED,\r\n        ClassRequestStatus.REJECTED\r\n      ].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    return this.classRequestRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection: ['-metadata.sessions', '-metadata.media', '-histories'],\r\n      populate: populates\r\n    })\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<ClassRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  async findManyByStatus(status: ClassRequestStatus[]): Promise<ClassRequestDocument[]> {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions: {\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  async findManyByCreatedByAndStatus(\r\n    createdBy: string,\r\n    status?: ClassRequestStatus[]\r\n  ): Promise<ClassRequestDocument[]> {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions: {\r\n        createdBy: new Types.ObjectId(createdBy),\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number> {\r\n    const startOfDate = moment(date).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = moment(date).tz(VN_TIMEZONE).endOf('date')\r\n    return this.classRequestRepository.model.countDocuments({\r\n      createdBy: new Types.ObjectId(createdBy),\r\n      createdAt: {\r\n        $gte: startOfDate.toDate(),\r\n        $lte: endOfDate.toDate()\r\n      }\r\n    })\r\n  }\r\n\r\n  async cancelPublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (\r\n      !classRequest ||\r\n      classRequest.type !== ClassRequestType.PUBLISH_CLASS ||\r\n      classRequest.createdBy.toString() !== _id\r\n    )\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate course\r\n    const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n    if (!course || course.instructorId.toString() !== _id) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n    if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.update(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.CANCELED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.CANCELED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async approvePublishClassRequest(\r\n    classRequestId: string,\r\n    approvePublishClassRequestDto: ApprovePublishClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { gardenId } = approvePublishClassRequestDto\r\n    const { _id, role } = userAuth\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.type !== ClassRequestType.PUBLISH_CLASS)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate course\r\n    const course = await this.courseService.findById(classRequest.courseId?.toString(), ['+sessions'])\r\n    if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n    if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n    // validate gardenId fit with time of class request\r\n    const { startDate, duration, weekdays, slotNumbers } = classRequest?.metadata\r\n    const availableSlots = await this.gardenTimesheetService.viewAvailableTime({\r\n      startDate,\r\n      duration,\r\n      weekdays,\r\n      instructorId: course.instructorId\r\n    })\r\n    this.appLogger.log(\r\n      `getAvailableGardenList: slotNumbers=${slotNumbers}, availableSlotNumbers=${\r\n        availableSlots.slotNumbers\r\n      }, availableTimeOfGardens=${JSON.stringify(availableSlots.availableTimeOfGardens)}`\r\n    )\r\n    if (_.difference(slotNumbers, availableSlots.slotNumbers).length !== 0)\r\n      throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n    const availableGardens = availableSlots.availableTimeOfGardens.filter((availableTimeOfGarden) => {\r\n      this.appLogger.log(`gardenId=${availableTimeOfGarden.gardenId}, slotNumbers=${availableTimeOfGarden.slotNumbers}`)\r\n      return _.difference(slotNumbers, availableTimeOfGarden.slotNumbers).length === 0\r\n    })\r\n    if (availableGardens.length === 0) throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n    const garden = availableGardens.find((availableGarden) => availableGarden.gardenId?.toString() === gardenId)\r\n    if (!garden) throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.classRequestRepository.findOneAndUpdate(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.APPROVED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.APPROVED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // update course\r\n        await this.courseService.update(\r\n          { _id: classRequest.courseId },\r\n          {\r\n            $set: {\r\n              status: CourseStatus.ACTIVE,\r\n              isRequesting: false\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // create new class\r\n        const classData = _.pick(classRequest.metadata, [\r\n          'title',\r\n          'description',\r\n          'startDate',\r\n          'price',\r\n          'level',\r\n          'type',\r\n          'duration',\r\n          'thumbnail',\r\n          'media',\r\n          'sessions',\r\n          'learnerLimit',\r\n          'weekdays',\r\n          'slotNumbers',\r\n          'gardenRequiredToolkits',\r\n          'instructorId'\r\n        ])\r\n        classData['code'] = await this.classService.generateCode()\r\n        classData['status'] = ClassStatus.PUBLISHED\r\n        classData['histories'] = [\r\n          {\r\n            status: ClassStatus.PUBLISHED,\r\n            timestamp: new Date(),\r\n            userId: new Types.ObjectId(_id),\r\n            userRole: role\r\n          }\r\n        ]\r\n        classData['learnerQuantity'] = 0\r\n        classData['gardenId'] = new Types.ObjectId(gardenId)\r\n        classData['courseId'] = classRequest.courseId\r\n        classData['progress'] = new BaseProgressDto(_.get(classData, ['duration']) * 2, 0)\r\n        const createdClass = await this.classService.create(classData, { session })\r\n\r\n        // gen slots for class\r\n        await this.gardenTimesheetService.generateSlotsForClass(\r\n          {\r\n            startDate,\r\n            duration,\r\n            weekdays,\r\n            slotNumbers,\r\n            gardenId: new Types.ObjectId(gardenId),\r\n            instructorId: course.instructorId,\r\n            classId: new Types.ObjectId(createdClass._id),\r\n            metadata: { code: createdClass.code, title: createdClass.title },\r\n            courseData: course\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    // TODO: send notification\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async rejectPublishClassRequest(\r\n    classRequestId: string,\r\n    rejectPublishClassRequestDto: RejectPublishClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { rejectReason } = rejectPublishClassRequestDto\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.type !== ClassRequestType.PUBLISH_CLASS)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate course\r\n    const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n    if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n    if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.update(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.REJECTED,\r\n              rejectReason\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.REJECTED,\r\n                timestamp: new Date(),\r\n                userId: new Types.ObjectId(_id),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // update course\r\n        await this.courseService.update(\r\n          { _id: classRequest.courseId },\r\n          {\r\n            $set: {\r\n              isRequesting: false\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    // TODO: send notification\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async expirePublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.type !== ClassRequestType.PUBLISH_CLASS)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate course\r\n    const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n    if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n    if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.update(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.EXPIRED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.EXPIRED,\r\n                timestamp: new Date(),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // update course\r\n        await this.courseService.update(\r\n          { _id: classRequest.courseId },\r\n          {\r\n            $set: {\r\n              isRequesting: false\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    // TODO: send notification\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async getExpiredAt(date: Date): Promise<Date> {\r\n    const classRequestAutoExpiration = await this.settingService.findByKey(SettingKey.ClassRequestAutoExpiration)\r\n    const dateMoment = moment.tz(date, VN_TIMEZONE)\r\n    const expiredDate = dateMoment.clone().add(Number(classRequestAutoExpiration.value) || 2, 'day')\r\n    let expiredAt = expiredDate.clone()\r\n\r\n    // check in weekdays\r\n    let currentDate = dateMoment.clone()\r\n    while (currentDate.isSameOrBefore(expiredDate)) {\r\n      // Sunday: isoWeekday=7\r\n      if (currentDate.clone().isoWeekday() === 7) {\r\n        expiredAt.add(1, 'day')\r\n      }\r\n      currentDate.add(1, 'day')\r\n    }\r\n\r\n    return expiredAt.toDate()\r\n  }\r\n\r\n  async addClassRequestAutoExpiredJob(classRequest: ClassRequest) {\r\n    try {\r\n      const expiredAt = await this.getExpiredAt(classRequest['createdAt'])\r\n      const delayTime = this.helperService.getDiffTimeByMilliseconds(expiredAt)\r\n\r\n      await this.queueProducerService.addJob(\r\n        QueueName.CLASS_REQUEST,\r\n        JobName.ClassRequestAutoExpired,\r\n        {\r\n          classRequestId: classRequest._id,\r\n          expiredAt\r\n        },\r\n        {\r\n          delay: delayTime,\r\n          jobId: classRequest._id.toString()\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this.appLogger.error(JSON.stringify(err))\r\n    }\r\n  }\r\n}\r\n"]}