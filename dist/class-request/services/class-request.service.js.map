{"version":3,"file":"class-request.service.js","sourceRoot":"/","sources":["class-request/services/class-request.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as moment from 'moment-timezone'\r\nimport * as _ from 'lodash'\r\nimport { IClassRequestRepository } from '@src/class-request/repositories/class-request.repository'\r\nimport { ClassRequest, ClassRequestDocument } from '@src/class-request/schemas/class-request.schema'\r\nimport { Connection, FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { CreatePublishClassRequestDto } from '@class-request/dto/create-publish-class-request.dto'\r\nimport {\r\n  ClassRequestStatus,\r\n  ClassRequestType,\r\n  ClassStatus,\r\n  CourseStatus,\r\n  GardenTimesheetStatus,\r\n  StaffStatus,\r\n  UserRole,\r\n  Weekday\r\n} from '@common/contracts/constant'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { CLASS_REQUEST_LIST_PROJECTION } from '@src/class-request/contracts/constant'\r\nimport { QueryClassRequestDto } from '@src/class-request/dto/view-class-request.dto'\r\nimport { VN_TIMEZONE } from '@src/config'\r\nimport { SuccessResponse, UserAuth } from '@common/contracts/dto'\r\nimport { ApproveClassRequestDto } from '@class-request/dto/approve-class-request.dto'\r\nimport { RejectClassRequestDto } from '@class-request/dto/reject-class-request.dto'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ICourseService } from '@course/services/course.service'\r\nimport { IGardenTimesheetService } from '@garden-timesheet/services/garden-timesheet.service'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { BaseProgressDto } from '@class/dto/progress.dto'\r\nimport { IQueueProducerService } from '@queue/services/queue-producer.service'\r\nimport { JobName, QueueName } from '@queue/contracts/constant'\r\nimport { ISettingService } from '@setting/services/setting.service'\r\nimport { SettingKey } from '@setting/contracts/constant'\r\nimport { HelperService } from '@common/services/helper.service'\r\nimport { Session } from '@class/schemas/session.schema'\r\nimport { CreateCancelClassRequestDto } from '@class-request/dto/create-cancel-class-request.dto'\r\nimport { ILearnerClassService } from '@class/services/learner-class.service'\r\nimport { INotificationService } from '@notification/services/notification.service'\r\nimport { FCMNotificationDataType } from '@notification/contracts/constant'\r\nimport { IStaffService } from '@staff/services/staff.service'\r\nimport { IReportService } from '@report/services/report.service'\r\nimport { ReportType } from '@report/contracts/constant'\r\n\r\nexport const IClassRequestService = Symbol('IClassRequestService')\r\n\r\nexport interface IClassRequestService {\r\n  createPublishClassRequest(\r\n    createPublishClassRequestDto: CreatePublishClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ): Promise<ClassRequestDocument>\r\n  createCancelClassRequest(\r\n    createCancelClassRequestDto: CreateCancelClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ): Promise<ClassRequestDocument>\r\n  findById(\r\n    classRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ClassRequestDocument>\r\n  update(\r\n    conditions: FilterQuery<ClassRequest>,\r\n    payload: UpdateQuery<ClassRequest>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<ClassRequestDocument>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryClassRequestDto: QueryClassRequestDto,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  )\r\n  findMany(\r\n    conditions: FilterQuery<ClassRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<ClassRequestDocument[]>\r\n  findManyByStatus(status: ClassRequestStatus[]): Promise<ClassRequestDocument[]>\r\n  findManyByCreatedByAndStatus(createdBy: string, status?: ClassRequestStatus[]): Promise<ClassRequestDocument[]>\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number>\r\n  cancelClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  expirePublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  expireCancelClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>\r\n  approveClassRequest(\r\n    classRequestId: string,\r\n    ApproveClassRequestDto: ApproveClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n  rejectClassRequest(\r\n    classRequestId: string,\r\n    RejectClassRequestDto: RejectClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse>\r\n}\r\n\r\n@Injectable()\r\nexport class ClassRequestService implements IClassRequestService {\r\n  private readonly appLogger = new AppLogger(ClassRequestService.name)\r\n  constructor(\r\n    private readonly helperService: HelperService,\r\n    @Inject(IClassRequestRepository)\r\n    private readonly classRequestRepository: IClassRequestRepository,\r\n    @Inject(ICourseService)\r\n    private readonly courseService: ICourseService,\r\n    @Inject(IGardenTimesheetService)\r\n    private readonly gardenTimesheetService: IGardenTimesheetService,\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @InjectConnection() readonly connection: Connection,\r\n    @Inject(IQueueProducerService)\r\n    private readonly queueProducerService: IQueueProducerService,\r\n    @Inject(ISettingService)\r\n    private readonly settingService: ISettingService,\r\n    @Inject(ILearnerClassService)\r\n    private readonly learnerClassService: ILearnerClassService,\r\n    @Inject(INotificationService)\r\n    private readonly notificationService: INotificationService,\r\n    @Inject(IStaffService)\r\n    private readonly staffService: IStaffService,\r\n    @Inject(IReportService)\r\n    private readonly reportService: IReportService\r\n  ) {}\r\n  public async createPublishClassRequest(\r\n    createPublishClassRequestDto: CreatePublishClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ) {\r\n    const classRequest = await this.classRequestRepository.create(createPublishClassRequestDto, options)\r\n    // update course\r\n    await this.courseService.update(\r\n      { _id: classRequest.courseId },\r\n      {\r\n        $set: {\r\n          isRequesting: true\r\n        }\r\n      }\r\n    )\r\n    this.addClassRequestAutoExpiredJob(classRequest)\r\n\r\n    // Send notification to staff\r\n    this.sendNotificationToStaffWhenClassRequestIsCreated({ classRequest })\r\n\r\n    return classRequest\r\n  }\r\n\r\n  public async createCancelClassRequest(\r\n    createCancelClassRequestDto: CreateCancelClassRequestDto,\r\n    options?: SaveOptions | undefined\r\n  ) {\r\n    const classRequest = await this.classRequestRepository.create(createCancelClassRequestDto, options)\r\n    this.addClassRequestAutoExpiredJob(classRequest)\r\n\r\n    return classRequest\r\n  }\r\n\r\n  public async findById(\r\n    classRequestId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const classRequest = await this.classRequestRepository.findOne({\r\n      conditions: {\r\n        _id: classRequestId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return classRequest\r\n  }\r\n\r\n  public update(\r\n    conditions: FilterQuery<ClassRequest>,\r\n    payload: UpdateQuery<ClassRequest>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return this.classRequestRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryClassRequestDto: QueryClassRequestDto,\r\n    projection = CLASS_REQUEST_LIST_PROJECTION,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const { type, status, createdBy } = queryClassRequestDto\r\n    const filter: Record<string, any> = {}\r\n\r\n    if (createdBy) {\r\n      filter['createdBy'] = new Types.ObjectId(createdBy)\r\n    }\r\n\r\n    const validType = type?.filter((level) =>\r\n      [ClassRequestType.PUBLISH_CLASS, ClassRequestType.CANCEL_CLASS].includes(level)\r\n    )\r\n    if (validType?.length > 0) {\r\n      filter['type'] = {\r\n        $in: validType\r\n      }\r\n    }\r\n\r\n    const validStatus = status?.filter((status) =>\r\n      [\r\n        ClassRequestStatus.PENDING,\r\n        ClassRequestStatus.APPROVED,\r\n        ClassRequestStatus.CANCELED,\r\n        ClassRequestStatus.EXPIRED,\r\n        ClassRequestStatus.REJECTED\r\n      ].includes(status)\r\n    )\r\n    if (validStatus?.length > 0) {\r\n      filter['status'] = {\r\n        $in: validStatus\r\n      }\r\n    }\r\n\r\n    return this.classRequestRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection: ['-metadata.sessions', '-metadata.media', '-histories'],\r\n      populate: populates\r\n    })\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<ClassRequestDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  async findManyByStatus(status: ClassRequestStatus[]): Promise<ClassRequestDocument[]> {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions: {\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  async findManyByCreatedByAndStatus(\r\n    createdBy: string,\r\n    status?: ClassRequestStatus[]\r\n  ): Promise<ClassRequestDocument[]> {\r\n    const classRequests = await this.classRequestRepository.findMany({\r\n      conditions: {\r\n        createdBy: new Types.ObjectId(createdBy),\r\n        status: {\r\n          $in: status\r\n        }\r\n      }\r\n    })\r\n    return classRequests\r\n  }\r\n\r\n  countByCreatedByAndDate(createdBy: string, date: Date): Promise<number> {\r\n    const startOfDate = moment(date).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = moment(date).tz(VN_TIMEZONE).endOf('date')\r\n    return this.classRequestRepository.model.countDocuments({\r\n      createdBy: new Types.ObjectId(createdBy),\r\n      createdAt: {\r\n        $gte: startOfDate.toDate(),\r\n        $lte: endOfDate.toDate()\r\n      }\r\n    })\r\n  }\r\n\r\n  async cancelClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.createdBy.toString() !== _id)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    if (classRequest.type === ClassRequestType.PUBLISH_CLASS) {\r\n      // validate course\r\n      const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n      if (!course || course.instructorId.toString() !== _id) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n      if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.update(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.CANCELED\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.CANCELED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // update course\r\n          await this.courseService.update(\r\n            { _id: classRequest.courseId },\r\n            {\r\n              $set: {\r\n                isRequesting: false\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    } else if (classRequest.type === ClassRequestType.CANCEL_CLASS) {\r\n      // validate class\r\n      const courseClass = await this.classService.findById(classRequest.classId?.toString())\r\n      if (!courseClass || courseClass.instructorId.toString() !== _id) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.update(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.CANCELED\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.CANCELED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    }\r\n\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async approveClassRequest(\r\n    classRequestId: string,\r\n    approveClassRequestDto: ApproveClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { gardenId } = approveClassRequestDto\r\n    const { _id, role } = userAuth\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest) throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    if (classRequest.type === ClassRequestType.PUBLISH_CLASS) {\r\n      if (!gardenId) throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n      // validate course\r\n      const course = await this.courseService.findById(classRequest.courseId?.toString(), ['+sessions'])\r\n      if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n      if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n      // validate gardenId fit with time of class request\r\n      const { startDate, duration, weekdays, slotNumbers } = classRequest?.metadata\r\n      const availableSlots = await this.gardenTimesheetService.viewAvailableTime({\r\n        startDate,\r\n        duration,\r\n        weekdays,\r\n        instructorId: course.instructorId\r\n      })\r\n      this.appLogger.log(\r\n        `getAvailableGardenList: slotNumbers=${slotNumbers}, availableSlotNumbers=${\r\n          availableSlots.slotNumbers\r\n        }, availableTimeOfGardens=${JSON.stringify(availableSlots.availableTimeOfGardens)}`\r\n      )\r\n      if (_.difference(slotNumbers, availableSlots.slotNumbers).length !== 0)\r\n        throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n      const availableGardens = availableSlots.availableTimeOfGardens.filter((availableTimeOfGarden) => {\r\n        this.appLogger.log(\r\n          `gardenId=${availableTimeOfGarden.gardenId}, slotNumbers=${availableTimeOfGarden.slotNumbers}`\r\n        )\r\n        return _.difference(slotNumbers, availableTimeOfGarden.slotNumbers).length === 0\r\n      })\r\n      if (availableGardens.length === 0) throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n      const garden = availableGardens.find((availableGarden) => availableGarden.gardenId?.toString() === gardenId)\r\n      if (!garden) throw new AppException(Errors.GARDEN_NOT_AVAILABLE_FOR_CLASS_REQUEST)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.classRequestRepository.findOneAndUpdate(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.APPROVED\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.APPROVED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // update course\r\n          await this.courseService.update(\r\n            { _id: classRequest.courseId },\r\n            {\r\n              $set: {\r\n                status: CourseStatus.ACTIVE,\r\n                isRequesting: false\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // update course report\r\n          await this.reportService.update(\r\n            { type: ReportType.CourseSum },\r\n            {\r\n              $inc: {\r\n                'data.quantity': 1\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // create new class\r\n          const classData = _.pick(classRequest.metadata, [\r\n            'title',\r\n            'description',\r\n            'startDate',\r\n            'price',\r\n            'level',\r\n            'type',\r\n            'duration',\r\n            'thumbnail',\r\n            'media',\r\n            'sessions',\r\n            'learnerLimit',\r\n            'weekdays',\r\n            'slotNumbers',\r\n            'gardenRequiredToolkits',\r\n            'instructorId'\r\n          ])\r\n          classData['code'] = await this.classService.generateCode()\r\n          classData['status'] = ClassStatus.PUBLISHED\r\n          classData['histories'] = [\r\n            {\r\n              status: ClassStatus.PUBLISHED,\r\n              timestamp: new Date(),\r\n              userId: new Types.ObjectId(_id),\r\n              userRole: role\r\n            }\r\n          ]\r\n          classData['learnerQuantity'] = 0\r\n          classData['gardenId'] = new Types.ObjectId(gardenId)\r\n          classData['courseId'] = classRequest.courseId\r\n          classData['progress'] = new BaseProgressDto(_.get(classData, ['duration']) * 2, 0)\r\n\r\n          // generate deadline for assignments\r\n          let sessions = _.get(classRequest, 'metadata.sessions') as Session[]\r\n          classData['sessions'] = this.generateDeadlineClassAssignment({ sessions, startDate, duration, weekdays })\r\n\r\n          const createdClass = await this.classService.create(classData, { session })\r\n\r\n          // update class report\r\n          this.reportService.update(\r\n            { type: ReportType.ClassSum },\r\n            {\r\n              $inc: {\r\n                'data.quantity': 1,\r\n                [`data.${ClassStatus.PUBLISHED}.quantity`]: 1\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // gen slots for class\r\n          await this.gardenTimesheetService.generateSlotsForClass(\r\n            {\r\n              startDate,\r\n              duration,\r\n              weekdays,\r\n              slotNumbers,\r\n              gardenId: new Types.ObjectId(gardenId),\r\n              instructorId: course.instructorId,\r\n              classId: new Types.ObjectId(createdClass._id),\r\n              metadata: { code: createdClass.code, title: createdClass.title },\r\n              courseData: course\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    } else if (classRequest.type === ClassRequestType.CANCEL_CLASS) {\r\n      // validate class\r\n      const courseClass = await this.classService.findById(classRequest.classId?.toString())\r\n      if (!courseClass) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n      if (courseClass.status !== ClassStatus.PUBLISHED) throw new AppException(Errors.CLASS_STATUS_INVALID)\r\n\r\n      // BR-41: A cancel-class request can only be created if the class has no learners enrolled.\r\n      const learnerClasses = await this.learnerClassService.findMany({\r\n        classId: courseClass._id\r\n      })\r\n      if (learnerClasses.length > 0) throw new AppException(Errors.CANCEL_CLASS_REQUEST_CAN_NOT_BE_APPROVED)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.classRequestRepository.findOneAndUpdate(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.APPROVED\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.APPROVED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // cancel class\r\n          await this.classService.update(\r\n            { _id: new Types.ObjectId(courseClass._id) },\r\n            {\r\n              $set: {\r\n                status: ClassStatus.CANCELED,\r\n                cancelReason: classRequest.description\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassStatus.CANCELED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(courseClass.instructorId),\r\n                  userRole: UserRole.INSTRUCTOR\r\n                }\r\n              }\r\n            },\r\n            { new: true, session }\r\n          )\r\n\r\n          // update class report\r\n          this.reportService.update(\r\n            { type: ReportType.ClassSum },\r\n            {\r\n              $inc: {\r\n                [`data.${courseClass.status}.quantity`]: -1,\r\n                [`data.${ClassStatus.CANCELED}.quantity`]: 1\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // clear class timesheet\r\n          const { startDate, duration, weekdays, gardenId } = courseClass\r\n          const startOfDate = moment(startDate).tz(VN_TIMEZONE).startOf('date')\r\n          const endOfDate = startOfDate.clone().add(duration, 'week').startOf('date')\r\n          const searchDates = []\r\n          let currentDate = startOfDate.clone()\r\n          while (currentDate.isSameOrBefore(endOfDate)) {\r\n            for (let weekday of weekdays) {\r\n              const searchDate = currentDate.clone().isoWeekday(weekday)\r\n              if (searchDate.isSameOrAfter(startOfDate) && searchDate.isBefore(endOfDate)) {\r\n                searchDates.push(searchDate.toDate())\r\n              }\r\n            }\r\n            currentDate.add(1, 'week')\r\n          }\r\n\r\n          await this.gardenTimesheetService.updateMany(\r\n            {\r\n              date: {\r\n                $in: searchDates\r\n              },\r\n              status: GardenTimesheetStatus.ACTIVE,\r\n              gardenId: gardenId\r\n            },\r\n            {\r\n              $pull: {\r\n                slots: { classId: new Types.ObjectId(courseClass._id) }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    }\r\n\r\n    // send notification to instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu lớp học của bạn đã được duyệt',\r\n      body:\r\n        classRequest.type === ClassRequestType.PUBLISH_CLASS\r\n          ? 'Lớp học đã được mở. Bấm để xem chi tiết.'\r\n          : 'Lớp học đã hủy. Bấm để xem chi tiết',\r\n      receiverIds: [classRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS_REQUEST,\r\n        id: classRequestId\r\n      }\r\n    })\r\n\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async rejectClassRequest(\r\n    classRequestId: string,\r\n    RejectClassRequestDto: RejectClassRequestDto,\r\n    userAuth: UserAuth\r\n  ): Promise<SuccessResponse> {\r\n    const { rejectReason } = RejectClassRequestDto\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest) throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    if (classRequest.type === ClassRequestType.PUBLISH_CLASS) {\r\n      // validate course\r\n      const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n      if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n      if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.update(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.REJECTED,\r\n                rejectReason\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.REJECTED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n\r\n          // update course\r\n          await this.courseService.update(\r\n            { _id: classRequest.courseId },\r\n            {\r\n              $set: {\r\n                isRequesting: false\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    } else if (classRequest.type === ClassRequestType.CANCEL_CLASS) {\r\n      // validate class\r\n      const courseClass = await this.classService.findById(classRequest.classId?.toString())\r\n      if (!courseClass) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n      // Execute in transaction\r\n      const session = await this.connection.startSession()\r\n      try {\r\n        await session.withTransaction(async () => {\r\n          // update class request\r\n          await this.update(\r\n            { _id: classRequestId },\r\n            {\r\n              $set: {\r\n                status: ClassRequestStatus.REJECTED,\r\n                rejectReason\r\n              },\r\n              $push: {\r\n                histories: {\r\n                  status: ClassRequestStatus.REJECTED,\r\n                  timestamp: new Date(),\r\n                  userId: new Types.ObjectId(_id),\r\n                  userRole: role\r\n                }\r\n              }\r\n            },\r\n            { session }\r\n          )\r\n        })\r\n      } finally {\r\n        await session.endSession()\r\n      }\r\n    }\r\n\r\n    // send notification to instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu lớp học của bạn đã bị từ chối',\r\n      body:\r\n        classRequest.type === ClassRequestType.PUBLISH_CLASS\r\n          ? 'Yêu cầu mở lớp chưa phù hợp. Bấm để xem chi tiết.'\r\n          : 'Yêu cầu hủy lớp chưa phù hợp. Bấm để xem chi tiết',\r\n      receiverIds: [classRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS_REQUEST,\r\n        id: classRequestId\r\n      }\r\n    })\r\n    this.queueProducerService.removeJob(QueueName.CLASS_REQUEST, classRequestId)\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async expirePublishClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.type !== ClassRequestType.PUBLISH_CLASS)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate course\r\n    const course = await this.courseService.findById(classRequest.courseId?.toString())\r\n    if (!course) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n    if (course.status === CourseStatus.DELETED) throw new AppException(Errors.COURSE_STATUS_INVALID)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.update(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.EXPIRED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.EXPIRED,\r\n                timestamp: new Date(),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        // update course\r\n        await this.courseService.update(\r\n          { _id: classRequest.courseId },\r\n          {\r\n            $set: {\r\n              isRequesting: false\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    // send notification to instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu lớp học của bạn đã hết hạn',\r\n      body: 'Yêu cầu mở lớp đã hết hạn. Bấm để xem chi tiết.',\r\n      receiverIds: [classRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS_REQUEST,\r\n        id: classRequestId\r\n      }\r\n    })\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async expireCancelClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse> {\r\n    const { _id, role } = userAuth\r\n\r\n    // validate class request\r\n    const classRequest = await this.findById(classRequestId)\r\n    if (!classRequest || classRequest.type !== ClassRequestType.CANCEL_CLASS)\r\n      throw new AppException(Errors.CLASS_REQUEST_NOT_FOUND)\r\n    if (classRequest.status !== ClassRequestStatus.PENDING) throw new AppException(Errors.CLASS_REQUEST_STATUS_INVALID)\r\n\r\n    // validate class\r\n    const courseClass = await this.classService.findById(classRequest.classId?.toString())\r\n    if (!courseClass) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        // update class request\r\n        await this.update(\r\n          { _id: classRequestId },\r\n          {\r\n            $set: {\r\n              status: ClassRequestStatus.EXPIRED\r\n            },\r\n            $push: {\r\n              histories: {\r\n                status: ClassRequestStatus.EXPIRED,\r\n                timestamp: new Date(),\r\n                userRole: role\r\n              }\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n    // send notification to instructor\r\n    this.notificationService.sendFirebaseCloudMessaging({\r\n      title: 'Yêu cầu lớp học của bạn đã hết hạn',\r\n      body: 'Yêu cầu hủy lớp đã hết hạn. Bấm để xem chi tiết.',\r\n      receiverIds: [classRequest.createdBy.toString()],\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS_REQUEST,\r\n        id: classRequestId\r\n      }\r\n    })\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  async getExpiredAt(date: Date): Promise<Date> {\r\n    const classRequestAutoExpiration = await this.settingService.findByKey(SettingKey.ClassRequestAutoExpiration)\r\n    const dateMoment = moment.tz(date, VN_TIMEZONE)\r\n    const expiredDate = dateMoment.clone().add(Number(classRequestAutoExpiration.value) || 2, 'day')\r\n    let expiredAt = expiredDate.clone()\r\n\r\n    // check in weekdays\r\n    let currentDate = dateMoment.clone()\r\n    while (currentDate.isSameOrBefore(expiredDate)) {\r\n      // Sunday: isoWeekday=7\r\n      if (currentDate.clone().isoWeekday() === 7) {\r\n        expiredAt.add(1, 'day')\r\n      }\r\n      currentDate.add(1, 'day')\r\n    }\r\n\r\n    return expiredAt.toDate()\r\n  }\r\n\r\n  async addClassRequestAutoExpiredJob(classRequest: ClassRequest) {\r\n    try {\r\n      const expiredAt = await this.getExpiredAt(classRequest['createdAt'])\r\n      const delayTime = this.helperService.getDiffTimeByMilliseconds(expiredAt)\r\n\r\n      await this.queueProducerService.addJob(\r\n        QueueName.CLASS_REQUEST,\r\n        JobName.ClassRequestAutoExpired,\r\n        {\r\n          classRequestId: classRequest._id,\r\n          expiredAt\r\n        },\r\n        {\r\n          delay: delayTime,\r\n          jobId: classRequest._id.toString()\r\n        }\r\n      )\r\n    } catch (err) {\r\n      this.appLogger.error(JSON.stringify(err))\r\n    }\r\n  }\r\n\r\n  private generateDeadlineClassAssignment(params: {\r\n    sessions: Session[]\r\n    startDate: Date\r\n    duration: number\r\n    weekdays: Weekday[]\r\n  }) {\r\n    const { sessions, startDate, duration, weekdays } = params\r\n    const startOfDate = moment(startDate).tz(VN_TIMEZONE).startOf('date')\r\n    const endOfDate = startOfDate.clone().add(duration, 'week').startOf('date')\r\n\r\n    const classDates = [] as Date[]\r\n    let currentDate = startOfDate.clone()\r\n    while (currentDate.isSameOrBefore(endOfDate)) {\r\n      for (let weekday of weekdays) {\r\n        const classDate = currentDate.clone().isoWeekday(weekday)\r\n        if (classDate.isSameOrAfter(startOfDate) && classDate.isBefore(endOfDate)) {\r\n          classDates.push(classDate.toDate())\r\n        }\r\n      }\r\n      currentDate.add(1, 'week')\r\n    }\r\n    const classEndOfDate = moment(classDates[classDates.length - 1])\r\n      .tz(VN_TIMEZONE)\r\n      .endOf('date')\r\n\r\n    return sessions.map((session) => {\r\n      if (session?.assignments?.length > 0) {\r\n        const sessionStartDate = classDates[session.sessionNumber - 1]\r\n        const assignmentDeadline = moment(sessionStartDate).tz(VN_TIMEZONE).add(7, 'day').endOf('date')\r\n        const deadline = assignmentDeadline.isAfter(classEndOfDate) ? classEndOfDate : assignmentDeadline\r\n        session.assignments = session.assignments.map((assignment) => ({ ...assignment, deadline: deadline.toDate() }))\r\n      }\r\n      return session\r\n    })\r\n  }\r\n\r\n  private async sendNotificationToStaffWhenClassRequestIsCreated({ classRequest }) {\r\n    const staffs = await this.staffService.findMany({\r\n      status: StaffStatus.ACTIVE,\r\n      role: UserRole.STAFF\r\n    })\r\n    const staffIds = staffs.map((staff) => staff._id.toString())\r\n    await this.notificationService.sendTopicFirebaseCloudMessaging({\r\n      title: 'Yêu cầu lớp học của bạn đã được tạo',\r\n      body:\r\n        classRequest.type === ClassRequestType.PUBLISH_CLASS\r\n          ? 'Yêu cầu mở lớp được tạo. Bấm để xem chi tiết.'\r\n          : 'Yêu cầu hủy lớp. Bấm để xem chi tiết',\r\n      receiverIds: staffIds,\r\n      data: {\r\n        type: FCMNotificationDataType.CLASS_REQUEST,\r\n        id: classRequest._id.toString()\r\n      },\r\n      topic: 'STAFF_NOTIFICATION_TOPIC'\r\n    })\r\n  }\r\n}\r\n"]}