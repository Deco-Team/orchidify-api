{"version":3,"file":"feedback.service.js","sourceRoot":"/","sources":["feedback/services/feedback.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@nestjs/common'\r\nimport * as _ from 'lodash'\r\nimport { IFeedbackRepository } from '@feedback/repositories/feedback.repository'\r\nimport { Feedback, FeedbackDocument } from '@feedback/schemas/feedback.schema'\r\nimport { Connection, FilterQuery, PopulateOptions, QueryOptions, SaveOptions, Types, UpdateQuery } from 'mongoose'\r\nimport { QueryFeedbackDto } from '@feedback/dto/view-feedback.dto'\r\nimport { FEEDBACK_LIST_PROJECTION } from '@feedback/contracts/constant'\r\nimport { AppLogger } from '@common/services/app-logger.service'\r\nimport { SendFeedbackDto } from '@feedback/dto/send-feedback.dto'\r\nimport { PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { BaseRatingSummaryDto, BaseRatingTotalCountByRateDto } from '@class/dto/rating-summary.dto'\r\nimport { InjectConnection } from '@nestjs/mongoose'\r\nimport { SuccessResponse } from '@common/contracts/dto'\r\nimport { IClassService } from '@class/services/class.service'\r\nimport { ICourseService } from '@course/services/course.service'\r\n\r\nexport const IFeedbackService = Symbol('IFeedbackService')\r\n\r\nexport interface IFeedbackService {\r\n  sendFeedback(\r\n    sendFeedbackDto: SendFeedbackDto,\r\n    classRatingSummary: BaseRatingSummaryDto,\r\n    courseRatingSummary: BaseRatingSummaryDto\r\n  ): Promise<SuccessResponse>\r\n  create(sendFeedbackDto: SendFeedbackDto, options?: SaveOptions | undefined): Promise<FeedbackDocument>\r\n  findById(\r\n    feedbackId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<FeedbackDocument>\r\n  findOneBy(\r\n    conditions: FilterQuery<Feedback>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<FeedbackDocument>\r\n  findMany(\r\n    conditions: FilterQuery<FeedbackDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ): Promise<FeedbackDocument[]>\r\n  update(\r\n    conditions: FilterQuery<Feedback>,\r\n    payload: UpdateQuery<Feedback>,\r\n    options?: QueryOptions | undefined\r\n  ): Promise<FeedbackDocument>\r\n  list(\r\n    pagination: PaginationParams,\r\n    queryFeedbackDto: QueryFeedbackDto,\r\n    projection?: string | Record<string, any>,\r\n    populate?: Array<PopulateOptions>\r\n  )\r\n}\r\n\r\n@Injectable()\r\nexport class FeedbackService implements IFeedbackService {\r\n  private readonly appLogger = new AppLogger(FeedbackService.name)\r\n  constructor(\r\n    @InjectConnection() readonly connection: Connection,\r\n    @Inject(IFeedbackRepository)\r\n    private readonly feedbackRepository: IFeedbackRepository,\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService,\r\n    @Inject(ICourseService)\r\n    private readonly courseService: ICourseService\r\n  ) {}\r\n\r\n  public async sendFeedback(\r\n    sendFeedbackDto: SendFeedbackDto,\r\n    classRatingSummaryDto: BaseRatingSummaryDto,\r\n    courseRatingSummaryDto: BaseRatingSummaryDto\r\n  ) {\r\n    const { classId, courseId, rate } = sendFeedbackDto\r\n    // Execute in transaction\r\n    const session = await this.connection.startSession()\r\n    try {\r\n      await session.withTransaction(async () => {\r\n        await this.create(sendFeedbackDto, { session })\r\n\r\n        let classTotalCountByRate: BaseRatingTotalCountByRateDto\r\n        let classRatingSummary: BaseRatingSummaryDto\r\n        let classRate: number\r\n        if (!classRatingSummaryDto) {\r\n          classTotalCountByRate = new BaseRatingTotalCountByRateDto()\r\n          classTotalCountByRate[`${rate}`]++\r\n          classRatingSummary = new BaseRatingSummaryDto(rate, 1, classTotalCountByRate)\r\n          classRate = rate\r\n        } else {\r\n          const { totalSum, totalCount, totalCountByRate } = classRatingSummaryDto\r\n          classTotalCountByRate = totalCountByRate\r\n          classTotalCountByRate[`${rate}`]++\r\n          classRatingSummary = new BaseRatingSummaryDto(totalSum + rate, totalCount + 1, classTotalCountByRate)\r\n          classRate = Math.ceil((classRatingSummary.totalSum / classRatingSummary.totalCount) * 10) / 10\r\n        }\r\n        await this.classService.update(\r\n          { _id: classId },\r\n          {\r\n            $set: {\r\n              rate: classRate,\r\n              ratingSummary: classRatingSummary\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n\r\n        let courseTotalCountByRate: BaseRatingTotalCountByRateDto\r\n        let courseRatingSummary: BaseRatingSummaryDto\r\n        let courseRate: number\r\n        if (!courseRatingSummaryDto) {\r\n          courseTotalCountByRate = new BaseRatingTotalCountByRateDto()\r\n          courseTotalCountByRate[`${rate}`]++\r\n          courseRatingSummary = new BaseRatingSummaryDto(rate, 1, courseTotalCountByRate)\r\n          courseRate = rate\r\n        } else {\r\n          const { totalSum, totalCount, totalCountByRate } = courseRatingSummaryDto\r\n          courseTotalCountByRate = totalCountByRate\r\n          courseTotalCountByRate[`${rate}`]++\r\n          courseRatingSummary = new BaseRatingSummaryDto(totalSum + rate, totalCount + 1, courseTotalCountByRate)\r\n          courseRate = Math.ceil((courseRatingSummary.totalSum / courseRatingSummary.totalCount) * 10) / 10\r\n        }\r\n        await this.courseService.update(\r\n          { _id: courseId },\r\n          {\r\n            $set: {\r\n              rate: courseRate,\r\n              ratingSummary: courseRatingSummary\r\n            }\r\n          },\r\n          { session }\r\n        )\r\n      })\r\n    } finally {\r\n      await session.endSession()\r\n    }\r\n\r\n    return new SuccessResponse(true)\r\n  }\r\n\r\n  public async create(sendFeedbackDto: SendFeedbackDto, options?: SaveOptions | undefined) {\r\n    return await this.feedbackRepository.create({ ...sendFeedbackDto }, options)\r\n  }\r\n\r\n  public async update(\r\n    conditions: FilterQuery<Feedback>,\r\n    payload: UpdateQuery<Feedback>,\r\n    options?: QueryOptions | undefined\r\n  ) {\r\n    return await this.feedbackRepository.findOneAndUpdate(conditions, payload, options)\r\n  }\r\n\r\n  public async findById(\r\n    feedbackId: string,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const feedback = await this.feedbackRepository.findOne({\r\n      conditions: {\r\n        _id: feedbackId\r\n      },\r\n      projection,\r\n      populates\r\n    })\r\n    return feedback\r\n  }\r\n\r\n  public async findOneBy(\r\n    conditions: FilterQuery<Feedback>,\r\n    projection?: string | Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const feedback = await this.feedbackRepository.findOne({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return feedback\r\n  }\r\n\r\n  public async findMany(\r\n    conditions: FilterQuery<FeedbackDocument>,\r\n    projection?: Record<string, any>,\r\n    populates?: Array<PopulateOptions>\r\n  ) {\r\n    const feedbacks = await this.feedbackRepository.findMany({\r\n      conditions,\r\n      projection,\r\n      populates\r\n    })\r\n    return feedbacks\r\n  }\r\n\r\n  async list(\r\n    pagination: PaginationParams,\r\n    queryFeedbackDto: QueryFeedbackDto,\r\n    projection = FEEDBACK_LIST_PROJECTION,\r\n    populate?: Array<PopulateOptions>\r\n  ) {\r\n    const { rate, courseId } = queryFeedbackDto\r\n    const filter: Record<string, any> = {}\r\n    if (courseId) {\r\n      filter['courseId'] = new Types.ObjectId(courseId)\r\n    }\r\n\r\n    if (rate) {\r\n      filter['rate'] = rate\r\n    }\r\n\r\n    return this.feedbackRepository.model.paginate(filter, {\r\n      ...pagination,\r\n      projection,\r\n      populate\r\n    })\r\n  }\r\n}\r\n"]}