{"version":3,"file":"instructor.feedback.controller.js","sourceRoot":"/","sources":["feedback/controllers/instructor.feedback.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller, Get, UseGuards, Inject, Param, Query, Req } from '@nestjs/common'\r\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger'\r\nimport * as _ from 'lodash'\r\n\r\nimport { ErrorResponse, PaginationQuery } from '@common/contracts/dto'\r\nimport { Roles } from '@auth/decorators/roles.decorator'\r\nimport { UserRole } from '@common/contracts/constant'\r\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard'\r\nimport { RolesGuard } from '@auth/guards/roles.guard'\r\nimport { IFeedbackService } from '@feedback/services/feedback.service'\r\nimport {\r\n  InstructorViewClassFeedbackListDataResponse,\r\n  InstructorViewCourseFeedbackListDataResponse,\r\n  QueryFeedbackDto\r\n} from '@feedback/dto/view-feedback.dto'\r\nimport { Types } from 'mongoose'\r\nimport { INSTRUCTOR_VIEW_FEEDBACK_LIST_PROJECTION } from '@feedback/contracts/constant'\r\nimport { Pagination, PaginationParams } from '@common/decorators/pagination.decorator'\r\nimport { ApiErrorResponse } from '@common/decorators/api-response.decorator'\r\nimport { Errors } from '@common/contracts/error'\r\nimport { ICourseService } from '@course/services/course.service'\r\nimport { AppException } from '@common/exceptions/app.exception'\r\nimport { IClassService } from '@class/services/class.service'\r\n\r\n@ApiTags('Feedback - Instructor')\r\n@ApiBearerAuth()\r\n@ApiBadRequestResponse({ type: ErrorResponse })\r\n@UseGuards(JwtAuthGuard.ACCESS_TOKEN, RolesGuard)\r\n@Roles(UserRole.INSTRUCTOR)\r\n@Controller('instructor')\r\nexport class InstructorFeedbackController {\r\n  constructor(\r\n    @Inject(IFeedbackService)\r\n    private readonly feedbackService: IFeedbackService,\r\n    @Inject(ICourseService)\r\n    private readonly courseService: ICourseService,\r\n    @Inject(IClassService)\r\n    private readonly classService: IClassService\r\n  ) {}\r\n\r\n  @ApiOperation({\r\n    summary: `View Course's Feedback List`\r\n  })\r\n  @ApiQuery({ type: PaginationQuery })\r\n  @ApiOkResponse({ type: InstructorViewCourseFeedbackListDataResponse })\r\n  @ApiErrorResponse([Errors.COURSE_NOT_FOUND])\r\n  @Get('courses/:courseId([0-9a-f]{24})')\r\n  async listCourseFeedback(\r\n    @Req() req,\r\n    @Param('courseId') courseId: string,\r\n    @Pagination() pagination: PaginationParams,\r\n    @Query() queryFeedbackDto: QueryFeedbackDto\r\n  ) {\r\n    const { _id } = _.get(req, 'user')\r\n    const course = await this.courseService.findById(courseId)\r\n    if (!course || course.instructorId?.toString() !== _id) throw new AppException(Errors.COURSE_NOT_FOUND)\r\n\r\n    queryFeedbackDto.courseId = new Types.ObjectId(courseId)\r\n    return await this.feedbackService.list(pagination, queryFeedbackDto, INSTRUCTOR_VIEW_FEEDBACK_LIST_PROJECTION)\r\n  }\r\n\r\n  @ApiOperation({\r\n    summary: `View Class's Feedback List`\r\n  })\r\n  @ApiOkResponse({ type: InstructorViewClassFeedbackListDataResponse })\r\n  @ApiErrorResponse([Errors.CLASS_NOT_FOUND])\r\n  @Get('classes/:classId([0-9a-f]{24})')\r\n  async listClassFeedback(@Req() req, @Param('classId') classId: string, @Query() queryFeedbackDto: QueryFeedbackDto) {\r\n    const { _id } = _.get(req, 'user')\r\n    const courseClass = await this.classService.findById(classId)\r\n    if (!courseClass || courseClass.instructorId?.toString() !== _id) throw new AppException(Errors.CLASS_NOT_FOUND)\r\n\r\n    const { rate } = queryFeedbackDto\r\n    const conditions = {\r\n      classId: new Types.ObjectId(classId)\r\n    }\r\n    if (rate) {\r\n      conditions['rate'] = rate\r\n    }\r\n\r\n    const feedbacks = await this.feedbackService.findMany(conditions, INSTRUCTOR_VIEW_FEEDBACK_LIST_PROJECTION)\r\n    return { docs: feedbacks }\r\n  }\r\n}\r\n"]}