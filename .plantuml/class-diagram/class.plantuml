@startuml Class Module

skinparam classAttributeIconSize 0

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

' Controllers
class ManagementClassController {
  -classService: IClassService
  -sessionService: ISessionService
  -assignmentService: IAssignmentService
  -learnerClassService: ILearnerClassService
  +list()
  +getDetail()
  +getLessonDetail()
  +getAssignmentDetail()
  +getClassToolkitRequirements()
  +completeClass()
  +cancelClass()
}

class LearnerClassController {
  -classService: IClassService
  -sessionService: ISessionService
  -assignmentService: IAssignmentService
  -learnerClassService: ILearnerClassService
  -assignmentSubmissionService: IAssignmentSubmissionService
  -feedbackService: IFeedbackService
  +enrollClass()
  +myClassList()
  +getDetail()
  +getLessonDetail()
  +getAssignmentDetail()
  +submitAssignment()
}

class InstructorClassController {
  -classService: IClassService
  -sessionService: ISessionService
  -assignmentService: IAssignmentService
  -learnerClassService: ILearnerClassService
  -assignmentSubmissionService: IAssignmentSubmissionService
  +list()
  +getDetail()
  +getLessonDetail()
  +getAssignmentDetail()
  +updateAssignment()
  +listAssignmentSubmission()
  +getAssignmentSubmissionDetail()
  +gradeAssignmentSubmission()
  +uploadSessionResources()
}

' Interfaces
interface IClassService {
  create(createClassDto: CreateClassDto): Promise<ClassDocument>
  findById(classId: string, projection?: any, populates?: PopulateOptions[]): Promise<ClassDocument>
  update(conditions: FilterQuery<Class>, payload: UpdateQuery<Class>): Promise<ClassDocument>
  listByInstructor(instructorId: string, pagination: PaginationParams, queryClassDto: QueryClassDto)
  listByStaff(pagination: PaginationParams, queryClassDto: QueryClassDto)
  findManyByStatus(status: ClassStatus[]): Promise<ClassDocument[]>
  generateCode(): Promise<string>
  enrollClass(enrollClassDto: EnrollClassDto): Promise<CreateMomoPaymentResponse>
  completeClass(classId: string, userAuth: UserAuth): Promise<void>
  cancelClass(classId: string, cancelClassDto: CancelClassDto, userAuth: UserAuth): Promise<void>
}

interface ILearnerClassService {
  create(createLearnerClassDto: any): Promise<LearnerClassDocument>
  findById(learnerClassId: string, projection?: any, populates?: PopulateOptions[]): Promise<LearnerClassDocument>
  update(conditions: FilterQuery<LearnerClass>, payload: UpdateQuery<LearnerClass>): Promise<LearnerClassDocument>
  findOneBy(conditions: FilterQuery<LearnerClass>, projection?: any, populates?: PopulateOptions[]): Promise<LearnerClassDocument>
  findMany(conditions: FilterQuery<LearnerClassDocument>, projection?: any, populates?: PopulateOptions[]): Promise<LearnerClassDocument[]>
  listMyClassesByLearner(learnerId: string, pagination: PaginationParams, queryClassDto: QueryClassDto)
}

interface ISessionService {
  findOneBy(params: { sessionId: string; classId: string; instructorId?: string }): Promise<Session>
  findMySession(params: { sessionId: string; classId: string; learnerId: string }): Promise<Session>
}

interface IAssignmentService {
  findOneBy(params: { assignmentId: string; classId: string; instructorId?: string }): Promise<Assignment>
  findMyAssignment(params: { assignmentId: string; classId: string; learnerId: string }): Promise<Assignment>
  updateAssignment(params: {
    assignmentId: string
    classId: string 
    instructorId?: string
    updateAssignmentDto: UpdateAssignmentDto
  }): Promise<void>
}

interface IAssignmentSubmissionService {
  create(createAssignmentSubmissionDto: CreateAssignmentSubmissionDto): Promise<AssignmentSubmission>
  update(conditions: FilterQuery<AssignmentSubmission>, payload: UpdateQuery<AssignmentSubmission>): Promise<AssignmentSubmission>
  findById(submissionId: string, projection?: any, populates?: PopulateOptions[]): Promise<AssignmentSubmission>
  findMyAssignmentSubmission(params: { assignmentId: string; learnerId: string }): Promise<AssignmentSubmission>
  list(querySubmissionDto: { classId: string; assignmentId: string })
  findMany(conditions: FilterQuery<AssignmentSubmissionDocument>, projection?: any, populates?: PopulateOptions[]): Promise<AssignmentSubmission[]>
}

class ClassService {
  -classRepository: IClassRepository
  -notificationService: INotificationService
  -connection: Connection 
  -configService: ConfigService
  -paymentService: IPaymentService
  -transactionService: ITransactionService
  -learnerService: ILearnerService
  -learnerClassService: ILearnerClassService
  -gardenTimesheetService: IGardenTimesheetService
  -settingService: ISettingService
  -instructorService: IInstructorService
  -courseService: ICourseService
  -reportService: IReportService

  +create()
  +findById()
  +update()
  +listByInstructor()
  +listByStaff()
  +findManyByStatus()
  +generateCode()
  +enrollClass()
  +completeClass()
  +cancelClass()
  -checkDuplicateTimesheetWithMyClasses()
  -processPaymentWithMomo()
  -processPaymentWithStripe()
  -updateClassReportWhenClassCompleted()
  -updateRevenueReportWhenClassCompleted()
  -updateClassReportWhenClassCanceled()
}

class LearnerClassService {
  -learnerClassRepository: ILearnerClassRepository
  -classRepository: IClassRepository
  -connection: Connection
  -helperService: HelperService

  +create()
  +findById()
  +update()
  +findOneBy()
  +findMany()
  +listMyClassesByLearner()
}

class SessionService {
  -classRepository: IClassRepository
  -learnerClassService: ILearnerClassService

  +findOneBy()
  +findMySession()
}

class AssignmentService {
  -classRepository: IClassRepository

  +findOneBy()
  +findMyAssignment()
  +updateAssignment()
}

class AssignmentSubmissionService {
  -assignmentSubmissionRepository: IAssignmentSubmissionRepository
  -learnerClassRepository: ILearnerClassRepository

  +create()
  +update() 
  +findById()
  +findMyAssignmentSubmission()
  +list()
  +findMany()
}


' Repositories
interface IClassRepository {}
interface ILearnerClassRepository {}
interface IAssignmentSubmissionRepository {}

class ClassRepository {
  +model: PaginateModel<ClassDocument>
}

class LearnerClassRepository {
  +model: PaginateModel<LearnerClassDocument>
}

class AssignmentSubmissionRepository {
  +model: PaginateModel<AssignmentSubmissionDocument>
}

abstract class AbstractRepository {
  - model: PaginateModel<T>
  + constructor(model: PaginateModel<T>)
  + findOne(params: {conditions, projection?, populates?, options?}): Promise<T | undefined>
  + firstOrFail(params: {conditions, projection?, options?, populates?, error?}): Promise<T>
  + findMany(params: {conditions, projection?, populates?, sort?, options?}): Promise<Array<T>>
  + paginate(conditions: FilterQuery<T>, options?: PaginateOptions): Promise<PaginateResult<T>>
  + create(payload: Record<string, any>, options?: SaveOptions): Promise<T>
  + updateOneOrFail(conditions: FilterQuery<T>, payload: object, options?: SaveOptions): Promise<T>
  + findOneAndUpdate(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?: QueryOptions): Promise<T>
  + updateMany(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?): Promise<UpdateWriteOpResult>
  + findOneAndDelete(conditions: FilterQuery<T>, options?: QueryOptions): Promise<T>
  + deleteMany(conditions: FilterQuery<T>, options?): Promise<DeleteResult>
}

' DTOs
class BaseClassDto {
  +_id: string
  +code: string
  +title: string
  +description: string
  +startDate: Date
  +price: number
  +level: CourseLevel
  +type: string[]
  +duration: number
  +thumbnail: string
  +media: BaseMediaDto[]
  +sessions: BaseSessionDto[]
  +status: ClassStatus
  +histories: ClassStatusHistory[]
  +learnerLimit: number
  +learnerQuantity: number
  +weekdays: Weekday[]
  +slotNumbers: SlotNumber[]
}

' Schemas
entity Class {
  +_id: string
  +code: string
  +title: string
  +description: string
  +startDate: Date
  +price: number
  +level: string
  +type: string[]
  +duration: number
  +thumbnail: string
  +media: BaseMediaDto[]
  +sessions: Session[]
  +status: ClassStatus
  +histories: ClassStatusHistory[]
}

entity LearnerClass {
  +_id: string
  +enrollDate: Date
  +finishDate: Date
  +transactionId: Types.ObjectId
  +learnerId: Types.ObjectId
  +classId: Types.ObjectId
  +courseId: Types.ObjectId
  +price: number
  +discount: number
}

entity AssignmentSubmission {
  +_id: string
  +attachments: BaseMediaDto[]
  +point: number
  +feedback: string
  +status: SubmissionStatus
  +assignmentId: Types.ObjectId
  +classId: Types.ObjectId
  +learnerId: Types.ObjectId
}

' Relationships
ManagementClassController ..> IClassService
LearnerClassController ..> IClassService
InstructorClassController ..> IClassService

ManagementClassController ..> ILearnerClassService
LearnerClassController ..> ILearnerClassService
InstructorClassController ..> ILearnerClassService

ManagementClassController ..> ISessionService
LearnerClassController ..> ISessionService
InstructorClassController ..> ISessionService

ManagementClassController ..> IAssignmentService
LearnerClassController ..> IAssignmentService
InstructorClassController ..> IAssignmentService

LearnerClassController ..> IAssignmentSubmissionService
InstructorClassController ..> IAssignmentSubmissionService

IClassService <|.. ClassService
ILearnerClassService <|.. LearnerClassService
ISessionService <|.. SessionService
IAssignmentService <|.. AssignmentService
IAssignmentSubmissionService <|.. AssignmentSubmissionService

ClassService ..> IClassRepository
LearnerClassService ..> ILearnerClassRepository
AssignmentSubmissionService ..> IAssignmentSubmissionRepository

IClassRepository <|.. ClassRepository
ILearnerClassRepository <|.. LearnerClassRepository 
IAssignmentSubmissionRepository <|.. AssignmentSubmissionRepository

IClassRepository --|> AbstractRepository
ClassRepository --|> AbstractRepository

ILearnerClassRepository --|> AbstractRepository
LearnerClassRepository --|> AbstractRepository

IAssignmentSubmissionRepository --|> AbstractRepository
AssignmentSubmissionRepository --|> AbstractRepository

ClassService ..> BaseClassDto
ISessionService ..> BaseClassDto
IAssignmentService ..> BaseClassDto

ClassRepository ..> Class
BaseClassDto -- Class

LearnerClassRepository ..> LearnerClass

AssignmentSubmissionRepository ..> AssignmentSubmission
BaseClassDto -- AssignmentSubmission

@enduml

