@startuml Garden Timesheet Module

skinparam classAttributeIconSize 0

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

' Controllers
class ManagementGardenTimesheetController {
  -gardenTimesheetService: IGardenTimesheetService
  -gardenService: IGardenService 
  -notificationService: INotificationService
  +viewGardenTimesheet()
  +viewInstructorTimesheet()
  +updateGardenTimesheet()
  +gardenManagerViewSlotList()
  +gardenManagerViewUnavailableTimesheet()
  +gardenManagerViewSlotDetail()
}

class InstructorGardenTimesheetController {
  -gardenTimesheetService: IGardenTimesheetService
  +viewAvailableTime()
  +viewTeachingTimesheet()
  +getSlotDetail()
}

class LearnerGardenTimesheetController {
  -gardenTimesheetService: IGardenTimesheetService
  +viewMyTimesheet()
}

' Interfaces
interface IGardenTimesheetService {
  +findById(id: string, projection?, populates?): Promise<GardenTimesheetDocument>
  +findOneBy(conditions: FilterQuery, projection?, populates?): Promise<GardenTimesheetDocument>
  +update(conditions: FilterQuery, payload: UpdateQuery, options?): Promise<GardenTimesheetDocument>
  +viewGardenTimesheetList(query: QueryGardenTimesheetDto, garden: Garden): Promise<GardenTimesheetDocument[]>
  +viewTeachingTimesheet(query: QueryTeachingTimesheetDto): Promise<GardenTimesheetDocument[]>
  +viewMyTimesheet(query: QueryMyTimesheetDto): Promise<GardenTimesheetDocument[]>
  +viewSlotsByGardenIds(query: QuerySlotByGardenIdsDto): Promise<GardenTimesheetDocument[]>
  +viewInactiveTimesheetByGarden(query: QueryInactiveTimesheetByGardenDto): Promise<GardenTimesheetDocument[]>
  +viewAvailableTime(query: QueryAvailableTimeDto): Promise<ViewAvailableTimeResponse>
  +generateSlotsForClass(params: object, options?): Promise<boolean>
  +findSlotBy(params: object): Promise<Slot>
  +findMany(conditions: FilterQuery, projection?, populates?): Promise<GardenTimesheetDocument[]>
  +updateMany(conditions: FilterQuery, payload: UpdateQuery, options?): Promise<void>
}

interface IGardenTimesheetRepository {
}

class GardenTimesheetService {
  -gardenTimesheetRepository: IGardenTimesheetRepository
  -gardenRepository: IGardenRepository
  -helperService: HelperService
  -classService: IClassService
  -learnerClassService: ILearnerClassService
  +findById()
  +findOneBy()
  +update()
  +viewGardenTimesheetList()
  +viewTeachingTimesheet()
  +viewMyTimesheet()
  +viewSlotsByGardenIds()
  +viewInactiveTimesheetByGarden()
  +viewAvailableTime()
  +generateSlotsForClass()
  +findSlotBy()
  +findMany()
  +updateMany()
  -generateTimesheetOfMonth()
  -generateAllTimesheetOfMonth()
  -generateAllTimesheetFromDateRange()
  -transformDataToCalendar()
  -transformDataToTeachingCalendar()
  -transformDataToMyCalendar()
  -transformDataToGardenIdsCalendar()
}

class GardenTimesheetRepository {
  +model: PaginateModel<GardenTimesheetDocument>
}

abstract class AbstractRepository {
  - model: PaginateModel<T>
  + constructor(model: PaginateModel<T>)
  + findOne(params: {conditions, projection?, populates?, options?}): Promise<T | undefined>
  + firstOrFail(params: {conditions, projection?, options?, populates?, error?}): Promise<T>
  + findMany(params: {conditions, projection?, populates?, sort?, options?}): Promise<Array<T>>
  + paginate(conditions: FilterQuery<T>, options?: PaginateOptions): Promise<PaginateResult<T>>
  + create(payload: Record<string, any>, options?: SaveOptions): Promise<T>
  + updateOneOrFail(conditions: FilterQuery<T>, payload: object, options?: SaveOptions): Promise<T>
  + findOneAndUpdate(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?: QueryOptions): Promise<T>
  + updateMany(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?): Promise<UpdateWriteOpResult>
  + findOneAndDelete(conditions: FilterQuery<T>, options?: QueryOptions): Promise<T>
  + deleteMany(conditions: FilterQuery<T>, options?): Promise<DeleteResult>
}

' DTOs
class BaseGardenTimesheetDto {
  +_id: string
  +date: Date
  +status: GardenTimesheetStatus
  +gardenId: string
  +slots: BaseSlotDto[]
  +gardenMaxClass: number
  +createdAt: Date
  +updatedAt: Date
}

class BaseSlotDto {
  +_id: string
  +slotNumber: SlotNumber
  +start: Date
  +end: Date
  +status: SlotStatus
  +instructorId: string
  +sessionId: string
  +classId: string
  +metadata: BaseSlotMetadataDto
  +hasTakenAttendance: boolean
}

' Schemas
entity GardenTimesheet {
  +_id: string
  +status: GardenTimesheetStatus
  +date: Date
  +gardenId: Types.ObjectId
  +slots: Slot[]
  +gardenMaxClass: number
}

entity Slot {
  +_id: Types.ObjectId
  +slotNumber: SlotNumber
  +start: Date
  +end: Date
  +status: SlotStatus
  +instructorId: Types.ObjectId
  +sessionId: Types.ObjectId
  +classId: Types.ObjectId
  +metadata: BaseSlotMetadataDto
  +hasTakenAttendance: boolean
}

' Relationships
ManagementGardenTimesheetController ..> IGardenTimesheetService
InstructorGardenTimesheetController ..> IGardenTimesheetService
LearnerGardenTimesheetController ..> IGardenTimesheetService

IGardenTimesheetService <|.. GardenTimesheetService
IGardenTimesheetRepository <|.. GardenTimesheetRepository
GardenTimesheetRepository --|> AbstractRepository
IGardenTimesheetRepository --|> AbstractRepository

GardenTimesheetService ..> IGardenTimesheetRepository
GardenTimesheetService ..> BaseGardenTimesheetDto
GardenTimesheetRepository ..> GardenTimesheet

BaseGardenTimesheetDto -- GardenTimesheet
BaseSlotDto -- Slot
GardenTimesheet *-- Slot

@enduml
