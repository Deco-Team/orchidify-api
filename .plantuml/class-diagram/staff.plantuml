@startuml Staff Module

skinparam classAttributeIconSize 0

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

' Controllers
class ManagementStaffController {
  -staffService: IStaffService
  -userTokenService: IUserTokenService
  -recruitmentService: IRecruitmentService
  -reportService: IReportService
  +list()
  +getDetail()
  +create()
  +update()
  +deactivate()
  +activate()
}

' Interfaces
interface IStaffService {
  +create(createStaffDto: CreateStaffDto): Promise<StaffDocument>
  +findById(staffId: string): Promise<StaffDocument>
  +findByEmail(email: string): Promise<StaffDocument>
  +update(conditions: FilterQuery, payload: UpdateQuery): Promise<StaffDocument>
  +list(pagination: PaginationParams, queryStaffDto: QueryStaffDto)
  +findMany(conditions: FilterQuery): Promise<StaffDocument[]>
}

interface IStaffRepository {
}

class StaffService {
  -staffRepository: IStaffRepository
  -helperService: HelperService
  -notificationService: INotificationService
  -reportService: IReportService
  +create()
  +findById()
  +findByEmail()
  +update()
  +list()
  +findMany()
  -generateStaffCode()
}

class StaffRepository {
  +model: PaginateModel<StaffDocument>
}

abstract class AbstractRepository {
  -model: PaginateModel<T>
  +constructor(model: PaginateModel<T>)
  +findOne(params: {conditions, projection?, populates?, options?}): Promise<T | undefined>
  +firstOrFail(params: {conditions, projection?, options?, populates?, error?}): Promise<T>
  +findMany(params: {conditions, projection?, populates?, sort?, options?}): Promise<Array<T>>
  +paginate(conditions: FilterQuery<T>, options?: PaginateOptions): Promise<PaginateResult<T>>
  +create(payload: Record<string, any>, options?: SaveOptions): Promise<T>
  +updateOneOrFail(conditions: FilterQuery<T>, payload: object, options?: SaveOptions): Promise<T>
  +findOneAndUpdate(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?: QueryOptions): Promise<T>
  +updateMany(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?): Promise<UpdateWriteOpResult>
  +findOneAndDelete(conditions: FilterQuery<T>, options?: QueryOptions): Promise<T>
  +deleteMany(conditions: FilterQuery<T>, options?): Promise<DeleteResult>
}

' DTOs
class BaseStaffDto {
  +_id: string
  +name: string
  +email: string
  +staffCode: string
  +password: string
  +idCardPhoto: string
  +status: StaffStatus
  +role: UserRole
  +createdAt: Date
  +updatedAt: Date
}

' Schemas
entity Staff {
  +_id: string
  +name: string
  +email: string
  +staffCode: string
  +password: string
  +status: StaffStatus
  +idCardPhoto: string
  +role: UserRole
}

' Relationships
ManagementStaffController ..> IStaffService

IStaffService <|.. StaffService

StaffService ..> IStaffRepository
StaffService ..> BaseStaffDto

IStaffRepository <|.. StaffRepository
IStaffRepository --|> AbstractRepository
StaffRepository --|> AbstractRepository

StaffRepository ..> Staff
BaseStaffDto -- Staff

@enduml
