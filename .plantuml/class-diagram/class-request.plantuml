@startuml Class Request Module

skinparam classAttributeIconSize 0

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
}

' Controllers
class ManagementClassRequestController {
  -classRequestService: IClassRequestService
  +list()
  +getDetail()
  +approve()
  +reject()
}

class InstructorClassRequestController {
  -classRequestService: IClassRequestService
  -courseService: ICourseService
  -classService: IClassService
  -gardenTimesheetService: IGardenTimesheetService
  -learnerClassService: ILearnerClassService
  -settingService: ISettingService
  -helperService: HelperService
  +list()
  +getDetail()
  +createPublishClassRequest()
  +createCancelClassRequest()
  +cancel()
}

' Interfaces
interface IClassRequestService {
  +createPublishClassRequest(createPublishClassRequestDto: CreatePublishClassRequestDto): Promise<ClassRequestDocument>
  +createCancelClassRequest(createCancelClassRequestDto: CreateCancelClassRequestDto): Promise<ClassRequestDocument>
  +findById(classRequestId: string): Promise<ClassRequestDocument>
  +update(conditions: FilterQuery, payload: UpdateQuery): Promise<ClassRequestDocument>
  +list(pagination: PaginationParams, queryClassRequestDto: QueryClassRequestDto)
  +findMany(conditions: FilterQuery): Promise<ClassRequestDocument[]>
  +findManyByStatus(status: ClassRequestStatus[]): Promise<ClassRequestDocument[]>
  +findManyByCreatedByAndStatus(createdBy: string, status?: ClassRequestStatus[]): Promise<ClassRequestDocument[]>
  +countByCreatedByAndDate(createdBy: string, date: Date): Promise<number>
  +cancelClassRequest(classRequestId: string, userAuth: UserAuth): Promise<SuccessResponse>
  +approveClassRequest(classRequestId: string, approveClassRequestDto: ApproveClassRequestDto, userAuth: UserAuth): Promise<SuccessResponse>
  +rejectClassRequest(classRequestId: string, rejectClassRequestDto: RejectClassRequestDto, userAuth: UserAuth): Promise<SuccessResponse>
}

interface IClassRequestRepository {
}

class ClassRequestService {
  -classRequestRepository: IClassRequestRepository
  -courseService: ICourseService
  -gardenTimesheetService: IGardenTimesheetService
  -classService: IClassService
  -queueProducerService: IQueueProducerService
  -settingService: ISettingService
  -learnerClassService: ILearnerClassService
  -notificationService: INotificationService
  -staffService: IStaffService
  -reportService: IReportService
  +createPublishClassRequest()
  +createCancelClassRequest()
  +findById()
  +update()
  +list()
  +findMany()
  +findManyByStatus()
  +findManyByCreatedByAndStatus()
  +countByCreatedByAndDate()
  +cancelClassRequest()
  +approveClassRequest()
  +rejectClassRequest()
}

class ClassRequestRepository {
  +model: PaginateModel<ClassRequestDocument>
}

abstract class AbstractRepository {
  - model: PaginateModel<T>
  + constructor(model: PaginateModel<T>)
  + findOne(params: {conditions, projection?, populates?, options?}): Promise<T | undefined>
  + firstOrFail(params: {conditions, projection?, options?, populates?, error?}): Promise<T>
  + findMany(params: {conditions, projection?, populates?, sort?, options?}): Promise<Array<T>>
  + paginate(conditions: FilterQuery<T>, options?: PaginateOptions): Promise<PaginateResult<T>>
  + create(payload: Record<string, any>, options?: SaveOptions): Promise<T>
  + updateOneOrFail(conditions: FilterQuery<T>, payload: object, options?: SaveOptions): Promise<T>
  + findOneAndUpdate(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?: QueryOptions): Promise<T>
  + updateMany(conditions: FilterQuery<T>, payload: UpdateQuery<T>, options?): Promise<UpdateWriteOpResult>
  + findOneAndDelete(conditions: FilterQuery<T>, options?: QueryOptions): Promise<T>
  + deleteMany(conditions: FilterQuery<T>, options?): Promise<DeleteResult>
}

' DTOs
class BaseClassRequestDto {
  +_id: string
  +type: ClassRequestType
  +status: ClassRequestStatus
  +rejectReason: string
  +histories: ClassRequestStatusHistory[]
  +description: string
  +metadata: BaseClassRequestMetadataDto
  +createdBy: Types.ObjectId
  +courseId: Types.ObjectId
  +classId: Types.ObjectId
  +createdAt: Date
  +updatedAt: Date
}

' Schemas
entity ClassRequest {
  +_id: string
  +type: ClassRequestType
  +status: ClassRequestStatus
  +rejectReason: string
  +histories: ClassRequestStatusHistory[]
  +description: string
  +metadata: Record<string, any>
  +createdBy: Types.ObjectId
  +courseId: Types.ObjectId
  +classId: Types.ObjectId
}

' Relationships
ManagementClassRequestController ..> IClassRequestService
InstructorClassRequestController ..> IClassRequestService

IClassRequestService <|.. ClassRequestService

ClassRequestService ..> IClassRequestRepository

ManagementClassRequestController ..> BaseClassRequestDto
InstructorClassRequestController ..> BaseClassRequestDto
ClassRequestService ..> BaseClassRequestDto

IClassRequestRepository <|.. ClassRequestRepository

IClassRequestRepository --|> AbstractRepository
ClassRequestRepository --|> AbstractRepository

ClassRequestRepository ..> ClassRequest
BaseClassRequestDto -- ClassRequest

@enduml
